[{"data":1,"prerenderedAt":3608},["ShallowReactive",2],{"navigation":3,"-docs-advanced-fulltext-search":236,"-docs-advanced-fulltext-search-surround":1696,"search-data":1701},[4,24,51,73,95,113,159,172,206],{"title":5,"path":6,"stem":7,"children":8,"icon":23},"入门","/docs/getting-started","docs/1.getting-started/1.index",[9,11,15,19],{"title":10,"path":6,"stem":7},"介绍",{"title":12,"path":13,"stem":14},"安装","/docs/getting-started/installation","docs/1.getting-started/2.installation",{"title":16,"path":17,"stem":18},"配置","/docs/getting-started/configuration","docs/1.getting-started/3.configuration",{"title":20,"path":21,"stem":22},"迁移","/docs/getting-started/migration","docs/1.getting-started/4.migration","i-lucide-square-play",{"title":25,"icon":26,"path":27,"stem":28,"children":29,"page":50},"集合","i-lucide-database","/docs/collections","docs/2.collections",[30,34,38,42,46],{"title":31,"path":32,"stem":33},"定义","/docs/collections/define","docs/2.collections/1.define",{"title":35,"path":36,"stem":37},"类型","/docs/collections/types","docs/2.collections/2.types",{"title":39,"path":40,"stem":41},"来源","/docs/collections/sources","docs/2.collections/3.sources",{"title":43,"path":44,"stem":45},"验证器","/docs/collections/validators","docs/2.collections/4.validators",{"title":47,"path":48,"stem":49},"从组件继承","/docs/collections/inherit-schema-from-component","docs/2.collections/5.inherit-schema-from-component",false,{"title":52,"icon":53,"path":54,"stem":55,"children":56,"page":50},"文件","i-lucide-file","/docs/files","docs/3.files",[57,61,65,69],{"title":58,"path":59,"stem":60},"Markdown","/docs/files/markdown","docs/3.files/1.markdown",{"title":62,"path":63,"stem":64},"YAML","/docs/files/yaml","docs/3.files/2.yaml",{"title":66,"path":67,"stem":68},"JSON","/docs/files/json","docs/3.files/3.json",{"title":70,"path":71,"stem":72},"CSV","/docs/files/csv","docs/3.files/4.csv",{"title":74,"icon":75,"path":76,"stem":77,"children":78,"page":50},"查询工具","i-lucide-square-function","/docs/utils","docs/4.utils",[79,83,87,91],{"title":80,"path":81,"stem":82},"queryCollection","/docs/utils/query-collection","docs/4.utils/1.query-collection",{"title":84,"path":85,"stem":86},"queryCollectionNavigation","/docs/utils/query-collection-navigation","docs/4.utils/2.query-collection-navigation",{"title":88,"path":89,"stem":90},"queryCollectionItemSurroundings","/docs/utils/query-collection-item-surroundings","docs/4.utils/3.query-collection-item-surroundings",{"title":92,"path":93,"stem":94},"queryCollectionSearchSections","/docs/utils/query-collection-search-sections","docs/4.utils/4.query-collection-search-sections",{"title":96,"icon":97,"path":98,"stem":99,"children":100,"page":50},"组件","i-lucide-square-code","/docs/components","docs/5.components",[101,105,109],{"title":102,"path":103,"stem":104},"内容渲染器","/docs/components/content-renderer","docs/5.components/0.content-renderer",{"title":106,"path":107,"stem":108},"插槽","/docs/components/slot","docs/5.components/1.slot",{"title":110,"path":111,"stem":112},"文章组件","/docs/components/prose","docs/5.components/2.prose",{"title":114,"icon":115,"path":116,"stem":117,"children":118,"page":50},"部署","i-lucide-cloud-upload","/docs/deploy","docs/6.deploy",[119,123,127,131,135,139,143,147,151,155],{"title":120,"path":121,"stem":122},"服务器","/docs/deploy/server","docs/6.deploy/1.server",{"title":124,"path":125,"stem":126},"静态","/docs/deploy/static","docs/6.deploy/10.static",{"title":128,"path":129,"stem":130},"无服务器","/docs/deploy/serverless","docs/6.deploy/2.serverless",{"title":132,"path":133,"stem":134},"NuxtHub","/docs/deploy/nuxthub","docs/6.deploy/3.nuxthub",{"title":136,"path":137,"stem":138},"Cloudflare Pages","/docs/deploy/cloudflare-pages","docs/6.deploy/4.cloudflare-pages",{"title":140,"path":141,"stem":142},"Cloudflare Workers","/docs/deploy/cloudflare-workers","docs/6.deploy/5.cloudflare-workers",{"title":144,"path":145,"stem":146},"Vercel","/docs/deploy/vercel","docs/6.deploy/6.vercel",{"title":148,"path":149,"stem":150},"Netlify","/docs/deploy/netlify","docs/6.deploy/7.netlify",{"title":152,"path":153,"stem":154},"AWS Amplify","/docs/deploy/aws-amplify","docs/6.deploy/8.aws-amplify",{"title":156,"path":157,"stem":158},"Docker","/docs/deploy/docker","docs/6.deploy/9.docker",{"title":160,"icon":115,"path":161,"stem":162,"children":163,"page":50},"Examples & Integrations","/docs/integrations","docs/7.integrations",[164,168],{"title":165,"path":166,"stem":167},"I18n module","/docs/integrations/i18n","docs/7.integrations/01.i18n",{"title":169,"path":170,"stem":171},"LLMs 模块","/docs/integrations/llms","docs/7.integrations/02.llms",{"title":173,"icon":174,"path":175,"stem":176,"children":177,"page":50},"高级用法","i-lucide-code-xml","/docs/advanced","docs/8.advanced",[178,182,186,190,194,198,202],{"title":179,"path":180,"stem":181},"全文搜索","/docs/advanced/fulltext-search","docs/8.advanced/1.fulltext-search",{"title":183,"path":184,"stem":185},"原始内容","/docs/advanced/raw-content","docs/8.advanced/2.raw-content",{"title":187,"path":188,"stem":189},"SQL 存储","/docs/advanced/database","docs/8.advanced/3.database",{"title":191,"path":192,"stem":193},"调试工具","/docs/advanced/tools","docs/8.advanced/4.tools",{"title":195,"path":196,"stem":197},"钩子","/docs/advanced/hooks","docs/8.advanced/5.hooks",{"title":199,"path":200,"stem":201},"自定义来源","/docs/advanced/custom-source","docs/8.advanced/6.custom-source",{"title":203,"path":204,"stem":205},"转换器","/docs/advanced/transformers","docs/8.advanced/8.transformers",{"title":207,"icon":208,"path":209,"stem":210,"children":211,"page":50},"Nuxt Studio","i-lucide-monitor","/docs/studio","docs/9.studio",[212,216,220,224,228,232],{"title":213,"path":214,"stem":215},"设置","/docs/studio/setup","docs/9.studio/1.setup",{"title":217,"path":218,"stem":219},"同步","/docs/studio/github","docs/9.studio/2.github",{"title":221,"path":222,"stem":223},"内容编辑器","/docs/studio/content","docs/9.studio/3.content",{"title":225,"path":226,"stem":227},"媒体库","/docs/studio/medias","docs/9.studio/4.medias",{"title":229,"path":230,"stem":231},"应用配置","/docs/studio/config","docs/9.studio/5.config",{"title":233,"path":234,"stem":235},"本地调试","/docs/studio/debug","docs/9.studio/6.debug",{"id":237,"title":179,"body":238,"description":1690,"extension":1691,"layout":1692,"links":1692,"meta":1693,"navigation":464,"path":180,"seo":1694,"stem":181,"__hash__":1695},"docs/docs/8.advanced/1.fulltext-search.md",{"type":239,"value":240,"toc":1685},"minimark",[241,271,276,286,293,603,607,612,1186,1190,1196,1681],[242,243,244,245,251,252,258,259,264,265,270],"p",{},"Content 模块提供了一个便捷的工具 ",[246,247,248],"a",{"href":93},[249,250,92],"code",{},"，用于将内容文件拆分成可搜索的章节。这对于在网站中实现全文搜索非常有用。你可以将该工具的结果与 ",[246,253,257],{"href":254,"rel":255},"https://ui.nuxt.com/pro/components/content-search",[256],"nofollow","Nuxt UI Content Search"," 或其他搜索库如 ",[246,260,263],{"href":261,"rel":262},"https://fusejs.io/",[256],"Fuse.js","、",[246,266,269],{"href":267,"rel":268},"https://lucaong.github.io/minisearch",[256],"minisearch"," 等结合使用。",[272,273,275],"h2",{"id":274},"nuxt-ui-pro","Nuxt UI Pro",[242,277,278,279,281,282,285],{},"Nuxt UI Pro 提供了一个现成的全文搜索组件。你可以将 ",[249,280,92],{}," 的结果传递给该组件的 ",[249,283,284],{},"files"," 属性来使用。",[242,287,288,289,292],{},"详细阅读 ",[246,290,257],{"href":254,"rel":291},[256],"。",[294,295,296,595],"code-group",{},[297,298,304],"pre",{"className":299,"code":300,"filename":301,"language":302,"meta":303,"style":303},"language-vue shiki shiki-themes material-theme-lighter material-theme material-theme-palenight","\u003Cscript setup lang=\"ts\">\nconst { data: navigation } = await useAsyncData('navigation', () => queryCollectionNavigation('docs'))\nconst { data: files } = await useAsyncData('search', () => queryCollectionSearchSections('docs'))\n\nconst searchTerm = ref('')\n\u003C/script>\n\n\u003Ctemplate>\n  \u003CUContentSearch\n    v-model:search-term=\"searchTerm\"\n    :files=\"files\"\n    :navigation=\"navigation\"\n    :fuse=\"{ resultLimit: 42 }\"\n  />\n\u003C/template>\n","UContentSearchExample.vue","vue","",[249,305,306,341,409,459,466,487,497,502,512,521,537,551,565,580,586],{"__ignoreMap":303},[307,308,311,315,319,323,326,329,332,336,338],"span",{"class":309,"line":310},"line",1,[307,312,314],{"class":313},"sMK4o","\u003C",[307,316,318],{"class":317},"swJcz","script",[307,320,322],{"class":321},"spNyl"," setup",[307,324,325],{"class":321}," lang",[307,327,328],{"class":313},"=",[307,330,331],{"class":313},"\"",[307,333,335],{"class":334},"sfazB","ts",[307,337,331],{"class":313},[307,339,340],{"class":313},">\n",[307,342,344,347,350,353,356,360,363,366,370,374,377,380,383,385,388,391,394,397,399,401,404,406],{"class":309,"line":343},2,[307,345,346],{"class":321},"const",[307,348,349],{"class":313}," {",[307,351,352],{"class":317}," data",[307,354,355],{"class":313},":",[307,357,359],{"class":358},"sTEyZ"," navigation ",[307,361,362],{"class":313},"}",[307,364,365],{"class":313}," =",[307,367,369],{"class":368},"s7zQu"," await",[307,371,373],{"class":372},"s2Zo4"," useAsyncData",[307,375,376],{"class":358},"(",[307,378,379],{"class":313},"'",[307,381,382],{"class":334},"navigation",[307,384,379],{"class":313},[307,386,387],{"class":313},",",[307,389,390],{"class":313}," ()",[307,392,393],{"class":321}," =>",[307,395,396],{"class":372}," queryCollectionNavigation",[307,398,376],{"class":358},[307,400,379],{"class":313},[307,402,403],{"class":334},"docs",[307,405,379],{"class":313},[307,407,408],{"class":358},"))\n",[307,410,412,414,416,418,420,423,425,427,429,431,433,435,438,440,442,444,446,449,451,453,455,457],{"class":309,"line":411},3,[307,413,346],{"class":321},[307,415,349],{"class":313},[307,417,352],{"class":317},[307,419,355],{"class":313},[307,421,422],{"class":358}," files ",[307,424,362],{"class":313},[307,426,365],{"class":313},[307,428,369],{"class":368},[307,430,373],{"class":372},[307,432,376],{"class":358},[307,434,379],{"class":313},[307,436,437],{"class":334},"search",[307,439,379],{"class":313},[307,441,387],{"class":313},[307,443,390],{"class":313},[307,445,393],{"class":321},[307,447,448],{"class":372}," queryCollectionSearchSections",[307,450,376],{"class":358},[307,452,379],{"class":313},[307,454,403],{"class":334},[307,456,379],{"class":313},[307,458,408],{"class":358},[307,460,462],{"class":309,"line":461},4,[307,463,465],{"emptyLinePlaceholder":464},true,"\n",[307,467,469,471,474,476,479,481,484],{"class":309,"line":468},5,[307,470,346],{"class":321},[307,472,473],{"class":358}," searchTerm ",[307,475,328],{"class":313},[307,477,478],{"class":372}," ref",[307,480,376],{"class":358},[307,482,483],{"class":313},"''",[307,485,486],{"class":358},")\n",[307,488,490,493,495],{"class":309,"line":489},6,[307,491,492],{"class":313},"\u003C/",[307,494,318],{"class":317},[307,496,340],{"class":313},[307,498,500],{"class":309,"line":499},7,[307,501,465],{"emptyLinePlaceholder":464},[307,503,505,507,510],{"class":309,"line":504},8,[307,506,314],{"class":313},[307,508,509],{"class":317},"template",[307,511,340],{"class":313},[307,513,515,518],{"class":309,"line":514},9,[307,516,517],{"class":313},"  \u003C",[307,519,520],{"class":317},"UContentSearch\n",[307,522,524,527,529,531,534],{"class":309,"line":523},10,[307,525,526],{"class":321},"    v-model:search-term",[307,528,328],{"class":313},[307,530,331],{"class":313},[307,532,533],{"class":334},"searchTerm",[307,535,536],{"class":313},"\"\n",[307,538,540,543,545,547,549],{"class":309,"line":539},11,[307,541,542],{"class":321},"    :files",[307,544,328],{"class":313},[307,546,331],{"class":313},[307,548,284],{"class":334},[307,550,536],{"class":313},[307,552,554,557,559,561,563],{"class":309,"line":553},12,[307,555,556],{"class":321},"    :navigation",[307,558,328],{"class":313},[307,560,331],{"class":313},[307,562,382],{"class":334},[307,564,536],{"class":313},[307,566,568,571,573,575,578],{"class":309,"line":567},13,[307,569,570],{"class":321},"    :fuse",[307,572,328],{"class":313},[307,574,331],{"class":313},[307,576,577],{"class":334},"{ resultLimit: 42 }",[307,579,536],{"class":313},[307,581,583],{"class":309,"line":582},14,[307,584,585],{"class":313},"  />\n",[307,587,589,591,593],{"class":309,"line":588},15,[307,590,492],{"class":313},[307,592,509],{"class":317},[307,594,340],{"class":313},[596,597,600],"code-preview",{"icon":598,"label":599},"i-lucide-eye","实时预览",[601,602],"example-fulltext-content-search",{},[272,604,606],{"id":605},"minisearch-示例","MiniSearch 示例",[242,608,288,609,292],{},[246,610,269],{"href":267,"rel":611},[256],[294,613,614,1181],{},[297,615,618],{"className":299,"code":616,"filename":617,"language":302,"meta":303,"style":303},"\u003Cscript setup lang=\"ts\">\nimport MiniSearch from 'minisearch'\n\nconst query = ref('')\nconst { data } = await useAsyncData('search', () => queryCollectionSearchSections('docs'))\n\nconst miniSearch = new MiniSearch({\n  fields: ['title', 'content'],\n  storeFields: ['title', 'content'],\n  searchOptions: {\n    prefix: true,\n    fuzzy: 0.2,\n  },\n})\n\n// 将数据添加到 MiniSearch 实例中\nminiSearch.addAll(toValue(data.value))\nconst result = computed(() => miniSearch.search(toValue(query)))\n\u003C/script>\n\n\u003Ctemplate>\n  \u003CUContainer class=\"p-4\">\n    \u003CUCard>\n      \u003CUInput v-model=\"query\" placeholder=\"搜索...\" />\n      \u003Cul>\n        \u003Cli v-for=\"link of result\" :key=\"link.id\" class=\"mt-2\">\n          \u003CNuxtLink :to=\"link.id\">{{ link.title }}\u003C/NuxtLink>\n          \u003Cp class=\"text-gray-500 text-xs\">{{ link.content }}\u003C/p>\n        \u003C/li>\n      \u003C/ul>\n    \u003C/UCard>\n  \u003C/UContainer>\n\u003C/template>\n","MiniSearchExample.vue",[249,619,620,640,659,663,680,723,727,747,779,806,816,829,842,847,853,857,864,889,923,932,937,946,968,979,1015,1025,1071,1103,1132,1142,1152,1162,1172],{"__ignoreMap":303},[307,621,622,624,626,628,630,632,634,636,638],{"class":309,"line":310},[307,623,314],{"class":313},[307,625,318],{"class":317},[307,627,322],{"class":321},[307,629,325],{"class":321},[307,631,328],{"class":313},[307,633,331],{"class":313},[307,635,335],{"class":334},[307,637,331],{"class":313},[307,639,340],{"class":313},[307,641,642,645,648,651,654,656],{"class":309,"line":343},[307,643,644],{"class":368},"import",[307,646,647],{"class":358}," MiniSearch ",[307,649,650],{"class":368},"from",[307,652,653],{"class":313}," '",[307,655,269],{"class":334},[307,657,658],{"class":313},"'\n",[307,660,661],{"class":309,"line":411},[307,662,465],{"emptyLinePlaceholder":464},[307,664,665,667,670,672,674,676,678],{"class":309,"line":461},[307,666,346],{"class":321},[307,668,669],{"class":358}," query ",[307,671,328],{"class":313},[307,673,478],{"class":372},[307,675,376],{"class":358},[307,677,483],{"class":313},[307,679,486],{"class":358},[307,681,682,684,686,689,691,693,695,697,699,701,703,705,707,709,711,713,715,717,719,721],{"class":309,"line":468},[307,683,346],{"class":321},[307,685,349],{"class":313},[307,687,688],{"class":358}," data ",[307,690,362],{"class":313},[307,692,365],{"class":313},[307,694,369],{"class":368},[307,696,373],{"class":372},[307,698,376],{"class":358},[307,700,379],{"class":313},[307,702,437],{"class":334},[307,704,379],{"class":313},[307,706,387],{"class":313},[307,708,390],{"class":313},[307,710,393],{"class":321},[307,712,448],{"class":372},[307,714,376],{"class":358},[307,716,379],{"class":313},[307,718,403],{"class":334},[307,720,379],{"class":313},[307,722,408],{"class":358},[307,724,725],{"class":309,"line":489},[307,726,465],{"emptyLinePlaceholder":464},[307,728,729,731,734,736,739,742,744],{"class":309,"line":499},[307,730,346],{"class":321},[307,732,733],{"class":358}," miniSearch ",[307,735,328],{"class":313},[307,737,738],{"class":313}," new",[307,740,741],{"class":372}," MiniSearch",[307,743,376],{"class":358},[307,745,746],{"class":313},"{\n",[307,748,749,752,754,757,759,762,764,766,768,771,773,776],{"class":309,"line":504},[307,750,751],{"class":317},"  fields",[307,753,355],{"class":313},[307,755,756],{"class":358}," [",[307,758,379],{"class":313},[307,760,761],{"class":334},"title",[307,763,379],{"class":313},[307,765,387],{"class":313},[307,767,653],{"class":313},[307,769,770],{"class":334},"content",[307,772,379],{"class":313},[307,774,775],{"class":358},"]",[307,777,778],{"class":313},",\n",[307,780,781,784,786,788,790,792,794,796,798,800,802,804],{"class":309,"line":514},[307,782,783],{"class":317},"  storeFields",[307,785,355],{"class":313},[307,787,756],{"class":358},[307,789,379],{"class":313},[307,791,761],{"class":334},[307,793,379],{"class":313},[307,795,387],{"class":313},[307,797,653],{"class":313},[307,799,770],{"class":334},[307,801,379],{"class":313},[307,803,775],{"class":358},[307,805,778],{"class":313},[307,807,808,811,813],{"class":309,"line":523},[307,809,810],{"class":317},"  searchOptions",[307,812,355],{"class":313},[307,814,815],{"class":313}," {\n",[307,817,818,821,823,827],{"class":309,"line":539},[307,819,820],{"class":317},"    prefix",[307,822,355],{"class":313},[307,824,826],{"class":825},"sfNiH"," true",[307,828,778],{"class":313},[307,830,831,834,836,840],{"class":309,"line":553},[307,832,833],{"class":317},"    fuzzy",[307,835,355],{"class":313},[307,837,839],{"class":838},"sbssI"," 0.2",[307,841,778],{"class":313},[307,843,844],{"class":309,"line":567},[307,845,846],{"class":313},"  },\n",[307,848,849,851],{"class":309,"line":582},[307,850,362],{"class":313},[307,852,486],{"class":358},[307,854,855],{"class":309,"line":588},[307,856,465],{"emptyLinePlaceholder":464},[307,858,860],{"class":309,"line":859},16,[307,861,863],{"class":862},"sHwdD","// 将数据添加到 MiniSearch 实例中\n",[307,865,867,870,873,876,878,881,884,886],{"class":309,"line":866},17,[307,868,869],{"class":358},"miniSearch",[307,871,872],{"class":313},".",[307,874,875],{"class":372},"addAll",[307,877,376],{"class":358},[307,879,880],{"class":372},"toValue",[307,882,883],{"class":358},"(data",[307,885,872],{"class":313},[307,887,888],{"class":358},"value))\n",[307,890,892,894,897,899,902,904,907,909,912,914,916,918,920],{"class":309,"line":891},18,[307,893,346],{"class":321},[307,895,896],{"class":358}," result ",[307,898,328],{"class":313},[307,900,901],{"class":372}," computed",[307,903,376],{"class":358},[307,905,906],{"class":313},"()",[307,908,393],{"class":321},[307,910,911],{"class":358}," miniSearch",[307,913,872],{"class":313},[307,915,437],{"class":372},[307,917,376],{"class":358},[307,919,880],{"class":372},[307,921,922],{"class":358},"(query)))\n",[307,924,926,928,930],{"class":309,"line":925},19,[307,927,492],{"class":313},[307,929,318],{"class":317},[307,931,340],{"class":313},[307,933,935],{"class":309,"line":934},20,[307,936,465],{"emptyLinePlaceholder":464},[307,938,940,942,944],{"class":309,"line":939},21,[307,941,314],{"class":313},[307,943,509],{"class":317},[307,945,340],{"class":313},[307,947,949,951,954,957,959,961,964,966],{"class":309,"line":948},22,[307,950,517],{"class":313},[307,952,953],{"class":317},"UContainer",[307,955,956],{"class":321}," class",[307,958,328],{"class":313},[307,960,331],{"class":313},[307,962,963],{"class":334},"p-4",[307,965,331],{"class":313},[307,967,340],{"class":313},[307,969,971,974,977],{"class":309,"line":970},23,[307,972,973],{"class":313},"    \u003C",[307,975,976],{"class":317},"UCard",[307,978,340],{"class":313},[307,980,982,985,988,991,993,995,998,1000,1003,1005,1007,1010,1012],{"class":309,"line":981},24,[307,983,984],{"class":313},"      \u003C",[307,986,987],{"class":317},"UInput",[307,989,990],{"class":321}," v-model",[307,992,328],{"class":313},[307,994,331],{"class":313},[307,996,997],{"class":334},"query",[307,999,331],{"class":313},[307,1001,1002],{"class":321}," placeholder",[307,1004,328],{"class":313},[307,1006,331],{"class":313},[307,1008,1009],{"class":334},"搜索...",[307,1011,331],{"class":313},[307,1013,1014],{"class":313}," />\n",[307,1016,1018,1020,1023],{"class":309,"line":1017},25,[307,1019,984],{"class":313},[307,1021,1022],{"class":317},"ul",[307,1024,340],{"class":313},[307,1026,1028,1031,1034,1037,1039,1041,1044,1046,1049,1051,1053,1056,1058,1060,1062,1064,1067,1069],{"class":309,"line":1027},26,[307,1029,1030],{"class":313},"        \u003C",[307,1032,1033],{"class":317},"li",[307,1035,1036],{"class":321}," v-for",[307,1038,328],{"class":313},[307,1040,331],{"class":313},[307,1042,1043],{"class":334},"link of result",[307,1045,331],{"class":313},[307,1047,1048],{"class":321}," :key",[307,1050,328],{"class":313},[307,1052,331],{"class":313},[307,1054,1055],{"class":334},"link.id",[307,1057,331],{"class":313},[307,1059,956],{"class":321},[307,1061,328],{"class":313},[307,1063,331],{"class":313},[307,1065,1066],{"class":334},"mt-2",[307,1068,331],{"class":313},[307,1070,340],{"class":313},[307,1072,1074,1077,1080,1083,1085,1087,1089,1091,1094,1097,1099,1101],{"class":309,"line":1073},27,[307,1075,1076],{"class":313},"          \u003C",[307,1078,1079],{"class":317},"NuxtLink",[307,1081,1082],{"class":321}," :to",[307,1084,328],{"class":313},[307,1086,331],{"class":313},[307,1088,1055],{"class":334},[307,1090,331],{"class":313},[307,1092,1093],{"class":313},">",[307,1095,1096],{"class":358},"{{ link.title }}",[307,1098,492],{"class":313},[307,1100,1079],{"class":317},[307,1102,340],{"class":313},[307,1104,1106,1108,1110,1112,1114,1116,1119,1121,1123,1126,1128,1130],{"class":309,"line":1105},28,[307,1107,1076],{"class":313},[307,1109,242],{"class":317},[307,1111,956],{"class":321},[307,1113,328],{"class":313},[307,1115,331],{"class":313},[307,1117,1118],{"class":334},"text-gray-500 text-xs",[307,1120,331],{"class":313},[307,1122,1093],{"class":313},[307,1124,1125],{"class":358},"{{ link.content }}",[307,1127,492],{"class":313},[307,1129,242],{"class":317},[307,1131,340],{"class":313},[307,1133,1135,1138,1140],{"class":309,"line":1134},29,[307,1136,1137],{"class":313},"        \u003C/",[307,1139,1033],{"class":317},[307,1141,340],{"class":313},[307,1143,1145,1148,1150],{"class":309,"line":1144},30,[307,1146,1147],{"class":313},"      \u003C/",[307,1149,1022],{"class":317},[307,1151,340],{"class":313},[307,1153,1155,1158,1160],{"class":309,"line":1154},31,[307,1156,1157],{"class":313},"    \u003C/",[307,1159,976],{"class":317},[307,1161,340],{"class":313},[307,1163,1165,1168,1170],{"class":309,"line":1164},32,[307,1166,1167],{"class":313},"  \u003C/",[307,1169,953],{"class":317},[307,1171,340],{"class":313},[307,1173,1175,1177,1179],{"class":309,"line":1174},33,[307,1176,492],{"class":313},[307,1178,509],{"class":317},[307,1180,340],{"class":313},[596,1182,1183],{"icon":598,"label":599},[1184,1185],"example-fulltext-mini-search",{},[272,1187,1189],{"id":1188},"fusejs-示例","Fuse.js 示例",[242,1191,288,1192,292],{},[246,1193,263],{"href":1194,"rel":1195},"https://fusejs.io",[256],[294,1197,1198,1676],{},[297,1199,1202],{"className":299,"code":1200,"filename":1201,"language":302,"meta":303,"style":303},"\u003Cscript setup lang=\"ts\">\nimport Fuse from 'fuse.js'\n\nconst query = ref('')\nconst { data } = await useAsyncData('search-data', () => queryCollectionSearchSections('docs'))\n\nconst fuse = new Fuse(data.value, {\n  keys: ['title', 'description']\n})\n\nconst result = computed(() => fuse.search(toValue(query)).slice(0, 10))\n\u003C/script>\n\n\u003Ctemplate>\n  \u003CUContainer class=\"p-4\">\n    \u003CUCard>\n      \u003CUInput v-model=\"query\" placeholder=\"搜索...\" class=\"w-full\" />\n      \u003Cul>\n        \u003Cli v-for=\"link of result\" :key=\"link.item.id\" class=\"mt-2\">\n          \u003CUButton variant=\"ghost\" class=\"w-full\" :to=\"link.item.id\">\n            {{ link.item.title }}\n            \u003Cspan class=\"text-gray-500 text-xs\">\n              {{ link.item.content?.slice(0, 100) }}...\n            \u003C/span>\n          \u003C/UButton>\n        \u003C/li>\n      \u003C/ul>\n    \u003C/UCard>\n  \u003C/UContainer>\n\u003C/template>\n","FusejsExample.vue",[249,1203,1204,1224,1240,1244,1260,1303,1307,1332,1359,1365,1369,1416,1424,1428,1436,1454,1462,1501,1509,1548,1589,1594,1613,1618,1627,1636,1644,1652,1660,1668],{"__ignoreMap":303},[307,1205,1206,1208,1210,1212,1214,1216,1218,1220,1222],{"class":309,"line":310},[307,1207,314],{"class":313},[307,1209,318],{"class":317},[307,1211,322],{"class":321},[307,1213,325],{"class":321},[307,1215,328],{"class":313},[307,1217,331],{"class":313},[307,1219,335],{"class":334},[307,1221,331],{"class":313},[307,1223,340],{"class":313},[307,1225,1226,1228,1231,1233,1235,1238],{"class":309,"line":343},[307,1227,644],{"class":368},[307,1229,1230],{"class":358}," Fuse ",[307,1232,650],{"class":368},[307,1234,653],{"class":313},[307,1236,1237],{"class":334},"fuse.js",[307,1239,658],{"class":313},[307,1241,1242],{"class":309,"line":411},[307,1243,465],{"emptyLinePlaceholder":464},[307,1245,1246,1248,1250,1252,1254,1256,1258],{"class":309,"line":461},[307,1247,346],{"class":321},[307,1249,669],{"class":358},[307,1251,328],{"class":313},[307,1253,478],{"class":372},[307,1255,376],{"class":358},[307,1257,483],{"class":313},[307,1259,486],{"class":358},[307,1261,1262,1264,1266,1268,1270,1272,1274,1276,1278,1280,1283,1285,1287,1289,1291,1293,1295,1297,1299,1301],{"class":309,"line":468},[307,1263,346],{"class":321},[307,1265,349],{"class":313},[307,1267,688],{"class":358},[307,1269,362],{"class":313},[307,1271,365],{"class":313},[307,1273,369],{"class":368},[307,1275,373],{"class":372},[307,1277,376],{"class":358},[307,1279,379],{"class":313},[307,1281,1282],{"class":334},"search-data",[307,1284,379],{"class":313},[307,1286,387],{"class":313},[307,1288,390],{"class":313},[307,1290,393],{"class":321},[307,1292,448],{"class":372},[307,1294,376],{"class":358},[307,1296,379],{"class":313},[307,1298,403],{"class":334},[307,1300,379],{"class":313},[307,1302,408],{"class":358},[307,1304,1305],{"class":309,"line":489},[307,1306,465],{"emptyLinePlaceholder":464},[307,1308,1309,1311,1314,1316,1318,1321,1323,1325,1328,1330],{"class":309,"line":499},[307,1310,346],{"class":321},[307,1312,1313],{"class":358}," fuse ",[307,1315,328],{"class":313},[307,1317,738],{"class":313},[307,1319,1320],{"class":372}," Fuse",[307,1322,883],{"class":358},[307,1324,872],{"class":313},[307,1326,1327],{"class":358},"value",[307,1329,387],{"class":313},[307,1331,815],{"class":313},[307,1333,1334,1337,1339,1341,1343,1345,1347,1349,1351,1354,1356],{"class":309,"line":504},[307,1335,1336],{"class":317},"  keys",[307,1338,355],{"class":313},[307,1340,756],{"class":358},[307,1342,379],{"class":313},[307,1344,761],{"class":334},[307,1346,379],{"class":313},[307,1348,387],{"class":313},[307,1350,653],{"class":313},[307,1352,1353],{"class":334},"description",[307,1355,379],{"class":313},[307,1357,1358],{"class":358},"]\n",[307,1360,1361,1363],{"class":309,"line":514},[307,1362,362],{"class":313},[307,1364,486],{"class":358},[307,1366,1367],{"class":309,"line":523},[307,1368,465],{"emptyLinePlaceholder":464},[307,1370,1371,1373,1375,1377,1379,1381,1383,1385,1388,1390,1392,1394,1396,1399,1401,1404,1406,1409,1411,1414],{"class":309,"line":539},[307,1372,346],{"class":321},[307,1374,896],{"class":358},[307,1376,328],{"class":313},[307,1378,901],{"class":372},[307,1380,376],{"class":358},[307,1382,906],{"class":313},[307,1384,393],{"class":321},[307,1386,1387],{"class":358}," fuse",[307,1389,872],{"class":313},[307,1391,437],{"class":372},[307,1393,376],{"class":358},[307,1395,880],{"class":372},[307,1397,1398],{"class":358},"(query))",[307,1400,872],{"class":313},[307,1402,1403],{"class":372},"slice",[307,1405,376],{"class":358},[307,1407,1408],{"class":838},"0",[307,1410,387],{"class":313},[307,1412,1413],{"class":838}," 10",[307,1415,408],{"class":358},[307,1417,1418,1420,1422],{"class":309,"line":553},[307,1419,492],{"class":313},[307,1421,318],{"class":317},[307,1423,340],{"class":313},[307,1425,1426],{"class":309,"line":567},[307,1427,465],{"emptyLinePlaceholder":464},[307,1429,1430,1432,1434],{"class":309,"line":582},[307,1431,314],{"class":313},[307,1433,509],{"class":317},[307,1435,340],{"class":313},[307,1437,1438,1440,1442,1444,1446,1448,1450,1452],{"class":309,"line":588},[307,1439,517],{"class":313},[307,1441,953],{"class":317},[307,1443,956],{"class":321},[307,1445,328],{"class":313},[307,1447,331],{"class":313},[307,1449,963],{"class":334},[307,1451,331],{"class":313},[307,1453,340],{"class":313},[307,1455,1456,1458,1460],{"class":309,"line":859},[307,1457,973],{"class":313},[307,1459,976],{"class":317},[307,1461,340],{"class":313},[307,1463,1464,1466,1468,1470,1472,1474,1476,1478,1480,1482,1484,1486,1488,1490,1492,1494,1497,1499],{"class":309,"line":866},[307,1465,984],{"class":313},[307,1467,987],{"class":317},[307,1469,990],{"class":321},[307,1471,328],{"class":313},[307,1473,331],{"class":313},[307,1475,997],{"class":334},[307,1477,331],{"class":313},[307,1479,1002],{"class":321},[307,1481,328],{"class":313},[307,1483,331],{"class":313},[307,1485,1009],{"class":334},[307,1487,331],{"class":313},[307,1489,956],{"class":321},[307,1491,328],{"class":313},[307,1493,331],{"class":313},[307,1495,1496],{"class":334},"w-full",[307,1498,331],{"class":313},[307,1500,1014],{"class":313},[307,1502,1503,1505,1507],{"class":309,"line":891},[307,1504,984],{"class":313},[307,1506,1022],{"class":317},[307,1508,340],{"class":313},[307,1510,1511,1513,1515,1517,1519,1521,1523,1525,1527,1529,1531,1534,1536,1538,1540,1542,1544,1546],{"class":309,"line":925},[307,1512,1030],{"class":313},[307,1514,1033],{"class":317},[307,1516,1036],{"class":321},[307,1518,328],{"class":313},[307,1520,331],{"class":313},[307,1522,1043],{"class":334},[307,1524,331],{"class":313},[307,1526,1048],{"class":321},[307,1528,328],{"class":313},[307,1530,331],{"class":313},[307,1532,1533],{"class":334},"link.item.id",[307,1535,331],{"class":313},[307,1537,956],{"class":321},[307,1539,328],{"class":313},[307,1541,331],{"class":313},[307,1543,1066],{"class":334},[307,1545,331],{"class":313},[307,1547,340],{"class":313},[307,1549,1550,1552,1555,1558,1560,1562,1565,1567,1569,1571,1573,1575,1577,1579,1581,1583,1585,1587],{"class":309,"line":934},[307,1551,1076],{"class":313},[307,1553,1554],{"class":317},"UButton",[307,1556,1557],{"class":321}," variant",[307,1559,328],{"class":313},[307,1561,331],{"class":313},[307,1563,1564],{"class":334},"ghost",[307,1566,331],{"class":313},[307,1568,956],{"class":321},[307,1570,328],{"class":313},[307,1572,331],{"class":313},[307,1574,1496],{"class":334},[307,1576,331],{"class":313},[307,1578,1082],{"class":321},[307,1580,328],{"class":313},[307,1582,331],{"class":313},[307,1584,1533],{"class":334},[307,1586,331],{"class":313},[307,1588,340],{"class":313},[307,1590,1591],{"class":309,"line":939},[307,1592,1593],{"class":358},"            {{ link.item.title }}\n",[307,1595,1596,1599,1601,1603,1605,1607,1609,1611],{"class":309,"line":948},[307,1597,1598],{"class":313},"            \u003C",[307,1600,307],{"class":317},[307,1602,956],{"class":321},[307,1604,328],{"class":313},[307,1606,331],{"class":313},[307,1608,1118],{"class":334},[307,1610,331],{"class":313},[307,1612,340],{"class":313},[307,1614,1615],{"class":309,"line":970},[307,1616,1617],{"class":358},"              {{ link.item.content?.slice(0, 100) }}...\n",[307,1619,1620,1623,1625],{"class":309,"line":981},[307,1621,1622],{"class":313},"            \u003C/",[307,1624,307],{"class":317},[307,1626,340],{"class":313},[307,1628,1629,1632,1634],{"class":309,"line":1017},[307,1630,1631],{"class":313},"          \u003C/",[307,1633,1554],{"class":317},[307,1635,340],{"class":313},[307,1637,1638,1640,1642],{"class":309,"line":1027},[307,1639,1137],{"class":313},[307,1641,1033],{"class":317},[307,1643,340],{"class":313},[307,1645,1646,1648,1650],{"class":309,"line":1073},[307,1647,1147],{"class":313},[307,1649,1022],{"class":317},[307,1651,340],{"class":313},[307,1653,1654,1656,1658],{"class":309,"line":1105},[307,1655,1157],{"class":313},[307,1657,976],{"class":317},[307,1659,340],{"class":313},[307,1661,1662,1664,1666],{"class":309,"line":1134},[307,1663,1167],{"class":313},[307,1665,953],{"class":317},[307,1667,340],{"class":313},[307,1669,1670,1672,1674],{"class":309,"line":1144},[307,1671,492],{"class":313},[307,1673,509],{"class":317},[307,1675,340],{"class":313},[596,1677,1678],{"icon":598,"label":599},[1679,1680],"example-fulltext-fusejs",{},[1682,1683,1684],"style",{},"html pre.shiki code .sMK4o, html code.shiki .sMK4o{--shiki-light:#39ADB5;--shiki-default:#89DDFF;--shiki-dark:#89DDFF}html pre.shiki code .swJcz, html code.shiki .swJcz{--shiki-light:#E53935;--shiki-default:#F07178;--shiki-dark:#F07178}html pre.shiki code .spNyl, html code.shiki .spNyl{--shiki-light:#9C3EDA;--shiki-default:#C792EA;--shiki-dark:#C792EA}html pre.shiki code .sfazB, html code.shiki .sfazB{--shiki-light:#91B859;--shiki-default:#C3E88D;--shiki-dark:#C3E88D}html pre.shiki code .sTEyZ, html code.shiki .sTEyZ{--shiki-light:#90A4AE;--shiki-default:#EEFFFF;--shiki-dark:#BABED8}html pre.shiki code .s7zQu, html code.shiki .s7zQu{--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-default:#89DDFF;--shiki-default-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic}html pre.shiki code .s2Zo4, html code.shiki .s2Zo4{--shiki-light:#6182B8;--shiki-default:#82AAFF;--shiki-dark:#82AAFF}html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .sfNiH, html code.shiki .sfNiH{--shiki-light:#FF5370;--shiki-default:#FF9CAC;--shiki-dark:#FF9CAC}html pre.shiki code .sbssI, html code.shiki .sbssI{--shiki-light:#F76D47;--shiki-default:#F78C6C;--shiki-dark:#F78C6C}html pre.shiki code .sHwdD, html code.shiki .sHwdD{--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-default:#546E7A;--shiki-default-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic}",{"title":303,"searchDepth":343,"depth":343,"links":1686},[1687,1688,1689],{"id":274,"depth":343,"text":275},{"id":605,"depth":343,"text":606},{"id":1188,"depth":343,"text":1189},"使用 Nuxt Content 实现网站全文搜索","md",null,{},{"title":179,"description":1690},"MELACNNEi6aIqfhyXqy2hVpXckJAuefqqX80QkvLlDo",[1697,1699],{"title":169,"path":170,"stem":171,"description":1698,"children":-1},"学习如何使用 Nuxt Content 和 Nuxt LLMs 模块生成适用于人工智能的内容文件。",{"title":183,"path":184,"stem":185,"description":1700,"children":-1},"访问应用中的内容原始数据",[1702,1707,1711,1716,1721,1726,1731,1736,1741,1746,1751,1756,1760,1765,1770,1775,1780,1785,1790,1795,1800,1805,1808,1813,1818,1822,1827,1832,1837,1842,1847,1852,1857,1862,1867,1872,1877,1882,1887,1892,1897,1902,1907,1912,1917,1922,1927,1932,1937,1942,1947,1952,1957,1962,1967,1972,1977,1982,1987,1992,1997,2002,2006,2011,2016,2021,2026,2029,2034,2039,2044,2049,2054,2059,2064,2069,2074,2079,2084,2089,2094,2099,2104,2109,2114,2118,2123,2128,2133,2138,2143,2148,2153,2156,2160,2165,2170,2175,2180,2185,2188,2193,2198,2203,2208,2213,2218,2221,2226,2231,2236,2241,2246,2251,2256,2261,2266,2271,2276,2281,2286,2291,2296,2301,2306,2311,2316,2321,2326,2331,2336,2339,2343,2348,2352,2356,2361,2366,2371,2376,2381,2386,2391,2396,2400,2405,2409,2414,2419,2424,2428,2433,2438,2443,2448,2453,2457,2462,2467,2472,2477,2482,2487,2492,2497,2501,2505,2509,2514,2518,2523,2527,2532,2537,2542,2546,2551,2556,2561,2564,2567,2571,2576,2581,2586,2591,2596,2601,2606,2611,2616,2620,2625,2630,2635,2640,2645,2650,2655,2660,2665,2670,2675,2678,2682,2687,2692,2695,2699,2704,2708,2711,2715,2720,2724,2728,2733,2736,2740,2744,2748,2753,2758,2763,2768,2773,2778,2783,2788,2793,2798,2803,2808,2812,2817,2820,2824,2828,2833,2836,2841,2845,2850,2855,2860,2865,2870,2875,2878,2882,2886,2889,2894,2898,2902,2905,2909,2914,2917,2922,2926,2930,2933,2938,2943,2948,2953,2956,2960,2965,2970,2974,2977,2982,2987,2992,2997,3002,3007,3012,3017,3022,3027,3032,3037,3042,3047,3052,3057,3062,3067,3072,3077,3081,3085,3089,3094,3098,3103,3108,3113,3117,3122,3127,3132,3136,3141,3146,3151,3156,3161,3164,3167,3170,3173,3176,3179,3182,3187,3192,3195,3200,3205,3210,3215,3218,3222,3227,3232,3237,3240,3244,3248,3252,3255,3259,3264,3269,3274,3278,3283,3288,3293,3297,3302,3307,3312,3316,3321,3326,3331,3334,3337,3342,3347,3352,3357,3362,3367,3372,3376,3381,3386,3391,3396,3400,3405,3409,3414,3419,3424,3428,3433,3437,3442,3447,3451,3456,3461,3466,3470,3474,3478,3482,3485,3489,3494,3499,3503,3508,3513,3517,3522,3527,3532,3537,3541,3544,3549,3554,3558,3563,3568,3573,3578,3583,3588,3593,3598,3603],{"id":1703,"title":1704,"titles":1705,"content":1706,"level":310},"/blog/docus-v3","Docus，卷土重来",[],"Nuxt 文档主题和 CLI 回归，版本 3 完全重写。 我们彻底重写了 Docus 主题。以 Nuxt 生态系统为动力、由 Nuxt UI 设计，带来一个全新且现代的基础，旨在提供最佳的文档体验。 目标很简单：汲取 Nuxt 生态系统中最优秀的部分，交付一个强大、优雅且易于维护的文档主题。",{"id":1708,"title":1709,"titles":1710,"content":303,"level":343},"/blog/docus-v3#docus-v3-有哪些新变化","Docus v3 有哪些新变化？",[1704],{"id":1712,"title":1713,"titles":1714,"content":1715,"level":411},"/blog/docus-v3#一个真正的-nuxt-应用仅有一个依赖","📦 一个真正的 Nuxt 应用，仅有一个依赖",[1704,1709],"Docus 构建于 Nuxt 3 之上（已启用 4 版本兼容模式，已为 Nuxt 4 做好准备）。这意味着你的文档是一个完整的 Nuxt 应用，能够访问 Nuxt 的全部功能：组件、模块、插件、运行时配置等。 但，最棒的是…… 你只需安装 docus 这个包。它捆绑了所有必要的官方 Nuxt 模块，让你可以在几秒钟内开始编写文档。在你的项目里，只需一个 package.json 文件和一个包含 Markdown 文件的 content/ 文件夹，立刻即可开始。 了解更多关于 Docus 中 Nuxt 层的专属章节。",{"id":1717,"title":1718,"titles":1719,"content":1720,"level":411},"/blog/docus-v3#由-nuxt-ui-pro-设计","✨ 由 Nuxt UI Pro 设计",[1704,1709],"Docus v2 由 Nuxt UI Pro 驱动，开箱即用美观、响应式且无障碍的主题。配合 Tailwind CSS v4、CSS 变量 和 Tailwind Variants API，你的文档默认美观且完全可定制。 你可以通过简单修改 app.config.ts 文件，实现全局或逐组件调整颜色、更新排版或组件样式。 了解更多关于 Docus 中 UI 主题的专属章节。 目前需要 UI Pro 许可，但我们正努力让其对所有人免费开放。此外，如果你当前正在构建开源文档，可以通过 ui-pro@nuxt.com 申请 OSS 许可。",{"id":1722,"title":1723,"titles":1724,"content":1725,"level":411},"/blog/docus-v3#️-带超能力的-markdown由-nuxt-content-支持的-mdc-语法","✍️ 带超能力的 Markdown（由 Nuxt Content 支持的 MDC 语法）",[1704,1709],"撰写文档从未如此简便。只需一个 Markdown 文件夹即可。此外，借助 Nuxt Content 和 MDC 语法，你可以在 Markdown 中嵌入交互式 Vue 组件，使用任何 Nuxt UI 组件或自定义组件。 了解更多关于 Docus 中 MDC 语法的专属章节。",{"id":1727,"title":1728,"titles":1729,"content":1730,"level":411},"/blog/docus-v3#️-准备支持-nuxt-studio","🖥️ 准备支持 Nuxt Studio",[1704,1709],"Docus 完美配合 Nuxt Studio，让你完全在浏览器中管理和编辑文档。无需终端，无需本地环境设置，是与非技术贡献者协作或团队集中管理文档的理想方式。 了解更多关于 Docus 中 Studio 编辑器的专属章节。",{"id":1732,"title":1733,"titles":1734,"content":1735,"level":411},"/blog/docus-v3#开箱即用的-seo","🔍 开箱即用的 SEO",[1704,1709],"技术 SEO 既复杂又枯燥。Docus 提供了一个稳健的默认可选设置，开箱即用，同时让你完全控制 SEO 元数据—从页面元信息到社交分享图片。 了解更多关于 Docus 中应用配置的专属章节。",{"id":1737,"title":1738,"titles":1739,"content":1740,"level":411},"/blog/docus-v3#通过组件覆盖实现完全自定义","🔧 通过组件覆盖实现完全自定义",[1704,1709],"需要替换部分布局或 UI？Docus 使用 Nuxt Layers 让你覆盖我们定义的核心组件。只需在项目的 components/ 目录中创建同名组件，Docus 会自动采用它。 了解更多关于 Docus 中组件覆盖的专属章节。",{"id":1742,"title":1743,"titles":1744,"content":1745,"level":411},"/blog/docus-v3#默认集成大型语言模型llms","🤖 默认集成大型语言模型（LLMs）",[1704,1709],"Docus 默认集成了 nuxt-llms，为大型语言模型（LLMs）准备你的内容。所有文档页面均被注入，且自动生成并预渲染 /llms.txt 文件。 了解更多关于 Docus 中 LLMs 集成的专属章节。",{"id":1747,"title":1748,"titles":1749,"content":1750,"level":411},"/blog/docus-v3#为即刻使用的文档提供智能默认","🧠 为即刻使用的文档提供智能默认",[1704,1709],"Docus 含有贴心默认设置，节省你的时间： ✅ 根据文件夹结构自动生成侧边栏导航🔍 使用 Fuse.js 支持全文搜索✨ 优化排版和布局🌙 支持开箱即用的暗黑模式🖼️ 集成 Nuxt Image，实现响应式和优化图像",{"id":1752,"title":1753,"titles":1754,"content":1755,"level":411},"/blog/docus-v3#简单迁移","🔁 简单迁移",[1704,1709],"从任何基于 Markdown 的系统迁移都非常简单：将 .md 文件放入 content/ 文件夹，立即上线。",{"id":1757,"title":1758,"titles":1759,"content":303,"level":343},"/blog/docus-v3#接下来是什么","接下来是什么？",[1704],{"id":1761,"title":1762,"titles":1763,"content":1764,"level":411},"/blog/docus-v3#今天就试试-docus","🔧 今天就试试 Docus",[1704,1758],"npx docus init docs 就这么简单 🚀 你可以编辑 content/ 文件夹开始编写文档了。 访问文档以了解 Docus 的全部内容。",{"id":1766,"title":1767,"titles":1768,"content":1769,"level":411},"/blog/docus-v3#贡献","🤝 贡献",[1704,1758],"我们已将仓库迁移到 NuxtLabs GitHub 组织，并清理了问题跟踪器，重新开始。 无论是修复 Bug、建议新功能还是编写文档，我们都非常欢迎你的帮助。欢迎反馈、贡献和关于 Docus 未来的讨论！ html pre.shiki code .sBMFI, html code.shiki .sBMFI{--shiki-light:#E2931D;--shiki-default:#FFCB6B;--shiki-dark:#FFCB6B}html pre.shiki code .sfazB, html code.shiki .sfazB{--shiki-light:#91B859;--shiki-default:#C3E88D;--shiki-dark:#C3E88D}html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"id":1771,"title":1772,"titles":1773,"content":1774,"level":310},"/blog/studio-v2","介绍 Nuxt Studio v2",[],"我们很高兴地宣布 Nuxt Studio v2 的发布，这是为您的 Nuxt Content 网站带来全新编辑体验的大版本更新 本文发表于 2025 年 1 月 6 日 Content 和 Studio 模块合并之前。因此，内容可能存在一些不一致。Studio 模块现已废弃，作为 Content 模块的可选功能提供。了解如何在此指南中启用它。 我们很高兴宣布 Nuxt Studio v2 的发布，这是一次重大更新，带来了全新界面，特别基于用户反馈为用户量身设计。 Studio 针对 Nuxt Content 项目进行了优化，但唯一真正的要求是拥有包含 Markdown 文件的 content 文件夹。这个简单配置足以开始使用该平台编辑和发布文件。",{"id":1776,"title":1777,"titles":1778,"content":1779,"level":411},"/blog/studio-v2#更加直观的界面","更加直观的界面",[1772],"版本 2 的主要改进是对界面的全面重构。我们将其设计得更直观、更易用，尤其对非技术用户更友好。我们的目标是简化用户体验，让创建和设置项目变得更轻松。新界面简洁明快，旨在优化您的工作流程。",{"id":1781,"title":1782,"titles":1783,"content":1784,"level":411},"/blog/studio-v2#谷歌认证","谷歌认证",[1772],"我们现在提供两种不同的认证方式。您可以用 GitHub 或 Google 登录。这两种方式赋予相同的编辑权限，但由于 Studio 与 GitHub 同步，部分功能专属 GitHub 用户，尤其是项目创建。 由于 Google 用户无法创建项目，需加入已有项目的团队以进行编辑。",{"id":1786,"title":1787,"titles":1788,"content":1789,"level":411},"/blog/studio-v2#最简配置即可编辑文件","最简配置即可编辑文件",[1772],"您现在无需任何配置即可编辑内容，只需导入您的仓库即可。您可以浏览文件和媒体，编辑内容并发布到 GitHub。 团队协作功能也已支持。 编辑器中的媒体在未设置实时预览前不会显示（详见下文）。",{"id":1791,"title":1792,"titles":1793,"content":1794,"level":411},"/blog/studio-v2#简化的实时预览设置","简化的实时预览设置",[1772],"由于实时预览功能需要部署的 URL，我们使设置尽可能简单。 虽然 GitHub Pages 部署依然可用且无需您配置，但自托管项目的要求已简化，移除了令牌校验。启用 Studio 模块 是唯一剩下的要求。 务必使用最新版本的 Studio 模块 以确保兼容性及访问新功能。",{"id":1796,"title":1797,"titles":1798,"content":1799,"level":411},"/blog/studio-v2#全新的文档","全新的文档",[1772],"随着全新平台上线，带来了新文档。欢迎查阅，深入了解全新的 Studio。 无论您是编辑者还是开发者，现在都有专属的文档章节。",{"id":1801,"title":1802,"titles":1803,"content":1804,"level":411},"/blog/studio-v2#studio-的新方向","Studio 的新方向",[1772],"大多数可用 CMS 解决方案要么面向开发者提供高度可定制化，要么面向内容编辑者非常友好，Studio 希望兼顾二者。 开发者提供工具，使编辑者专注内容，无需任何技术知识。 我们的类 Notion 编辑器前景广阔，期待与社区共同发展。",{"id":1806,"title":303,"titles":1807,"content":303,"level":411},"/blog/studio-v2#",[1772],{"id":1809,"title":1810,"titles":1811,"content":1812,"level":310},"/blog/ui-pro-docs-migration","迁移 Nuxt UI Pro 文档入门模板",[],"如何升级您的 Nuxt UI Pro 文档到 Content 和 UI v3",{"id":1814,"title":1815,"titles":1816,"content":1817,"level":310},"/blog/ui-pro-docs-migration#如何将您的-nuxt-文档网站升级到-content-x-ui-v3","如何将您的 Nuxt 文档网站升级到 Content x UI v3",[],"2025 年以「三」的力量开启！ 新年伊始，我们喜爱的工具迎来了重大更新。UI 团队即将发布 UI / UI Pro 库 的 3 版本（目前处于 alpha 版本），而 Content 团队已经发布了 Nuxt Content v3。 这些更新意味着所有结合了 Content 和 UI 的入门模板都需要更新以适配最新版本。为帮助您顺利完成迁移，本指南将演示如何将 Nuxt UI Pro Docs Starter 迁移到全新的 Content v3 和 Nuxt UI v3 包。 查看 UI Pro 文档入门模板仓库源码。",{"id":1819,"title":1820,"titles":1821,"content":303,"level":343},"/blog/ui-pro-docs-migration#content-迁移v2-v3","Content 迁移（v2 → v3）",[1815],{"id":1823,"title":1824,"titles":1825,"content":1826,"level":411},"/blog/ui-pro-docs-migration#_1-将包更新到-v3","1. 将包更新到 v3",[1815,1820],"pnpm add @nuxt/content@^3\nyarn add @nuxt/content@^3\nnpm install @nuxt/content@^3\nbun add @nuxt/content@^3",{"id":1828,"title":1829,"titles":1830,"content":1831,"level":411},"/blog/ui-pro-docs-migration#_2-创建-contentconfigts-文件","2. 创建 content.config.ts 文件",[1815,1820],"该配置文件定义数据结构。集合（collection）代表一组相关内容。以 docs starter 为例，包含两个不同的集合，landing 集合代表主页，另一个 docs 集合包含文档页面。 import { defineContentConfig, defineCollection, z } from '@nuxt/content'\n\nexport default defineContentConfig({\n  collections: {\n    landing: defineCollection({\n      type: 'page',\n      source: 'index.yml'\n    }),\n    docs: defineCollection({\n      type: 'page',\n      source: {\n        include: '**',\n        exclude: ['index.yml']\n      },\n      schema: z.object({\n        links: z.array(z.object({\n          label: z.string(),\n          icon: z.string(),\n          to: z.string(),\n          target: z.string().optional()\n        })).optional()\n      })\n    })\n  }\n}) 在 page 类型提供的内置字段基础上，我们为 docs 集合额外添加了 links 字段，以便在文档的 页面头部 有选择地显示它们。 type: page 表示内容文件与网站页面之间存在一一对应关系。",{"id":1833,"title":1834,"titles":1835,"content":1836,"level":411},"/blog/ui-pro-docs-migration#_3-迁移-appvue","3. 迁移 app.vue",[1815,1820],"导航抓取方法更新：从 fetchContentNavigation 迁移为 queryCollectionNavigationconst { data: navigation } = await useAsyncData('navigation', () => queryCollectionNavigation('docs'))\nconst { data: navigation } = await useAsyncData('navigation', () => fetchContentNavigation())\n内容搜索命令面板数据使用新方法 queryCollectionSearchSectionsconst { data: files } = useLazyAsyncData('search', () => queryCollectionSearchSections('docs'), {\n  server: false,\n})\nconst { data: files } = useLazyFetch\u003CParsedContent[]>('/api/search.json', {\n  default: () => [],\n  server: false\n})",{"id":1838,"title":1839,"titles":1840,"content":1841,"level":411},"/blog/ui-pro-docs-migration#_4-迁移首页","4. 迁移首页",[1815,1820],"首页数据抓取方法更新：从 queryContent 迁移为 queryCollectionconst { data: page } = await useAsyncData('index', () => queryCollection('landing').path('/').first())\nconst { data: page } = await useAsyncData('index', () => queryContent('/').findOne())\n使用 page 类型提供的 seo 字段填充 useSeoMetauseSeoMeta({\n  title: page.value.seo.title,\n  ogTitle: page.value.seo.title,\n  description: page.value.seo.description,\n  ogDescription: page.value.seo.description\n})\n请注意，当未设置时，seo 字段会被根级的 title 和 description 自动覆盖。",{"id":1843,"title":1844,"titles":1845,"content":1846,"level":411},"/blog/ui-pro-docs-migration#_5-迁移捕获全部文档页面","5. 迁移捕获全部文档页面",[1815,1820],"文档页面及其周边内容抓取更新为使用 queryCollection 和 queryCollectionItemSurroundingsconst { data } = await useAsyncData(route.path, () => Promise.all([\n  queryCollection('docs').path(route.path).first(),\n  queryCollectionItemSurroundings('docs', route.path, {\n    fields: ['title', 'description'],\n  }),\n]), {\n  transform: ([page, surround]) => ({ page, surround }),\n})\n\nconst page = computed(() => data.value?.page)\nconst surround = computed(() => data.value?.surround)\nconst { data: page } = await useAsyncData(route.path, () => queryContent(route.path).findOne())\n\nconst { data: surround } = await useAsyncData(`${route.path}-surround`, () => queryContent()\n  .where({ _extension: 'md', navigation: { $ne: false } })\n  .only(['title', 'description', '_path'])\n  .findSurround(withoutTrailingSlash(route.path))\n)\n使用 page 类型提供的 seo 字段填充 useSeoMetauseSeoMeta({\n  title: page.value.seo.title,\n  ogTitle: `${page.value.seo.title} - ${seo?.siteName}`,\n  description: page.value.seo.description,\n  ogDescription: page.value.seo.description\n})\n请注意，当未设置时，seo 字段会被根级的 title 和 description 自动覆盖。",{"id":1848,"title":1849,"titles":1850,"content":1851,"level":411},"/blog/ui-pro-docs-migration#_6-更新类型","6. 更新类型",[1815,1820],"Content v3 大幅改进了类型支持，大部分手动声明类型的需求已无，类型将由 Nuxt Content API 直接提供。 文档入门模板中唯一需要关注的是导航项类型，将 NavItem 替换为 ContentNavigationItem 。 import type { ContentNavigationItem } from '@nuxt/content'\n\nconst navigation = inject\u003CRef\u003CContentNavigationItem[]>>('navigation')",{"id":1853,"title":1854,"titles":1855,"content":1856,"level":411},"/blog/ui-pro-docs-migration#_7-替换文件夹元数据文件","7. 替换文件夹元数据文件",[1815,1820],"所有 _dir.yml 文件命名改为 .navigation.yml",{"id":1858,"title":1859,"titles":1860,"content":1861,"level":411},"/blog/ui-pro-docs-migration#_8-迁移-studio-激活方式","8. 迁移 Studio 激活方式",[1815,1820],"由于 studio 模块 已废弃，且新的通用 Preview API 已直接集成到 Nuxt Content，我们可以从依赖和 nuxt.config.ts 的模块列表中移除 @nuxthq/studio 包。 只需在 Nuxt 配置文件中启用预览模式，将 Studio API 绑定即可。 export default defineNuxtConfig({\n  content: {\n    preview: {\n      api: 'https://api.nuxt.studio'\n    }\n  },\n}) 最后，为了保持 app config 文件可由 Studio 更新，只需将 nuxt.schema.ts 文件中的辅助导入由 @nuxthq/studio/theme 更改为 @nuxt/content/preview。 到此为止，内容已使用 Content v3 驱动。接下来让我们迁移到 Nuxt UI / UI Pro 版本 3。",{"id":1863,"title":1864,"titles":1865,"content":1866,"level":343},"/blog/ui-pro-docs-migration#nuxt-ui-pro-迁移v1-v3","Nuxt UI Pro 迁移（v1 → v3）",[1815],"这是一次迁移指导，不涵盖所有破坏性变更。请检查文档中使用的每个组件，确认是否需要更新属性、插槽或样式。",{"id":1868,"title":1869,"titles":1870,"content":1871,"level":411},"/blog/ui-pro-docs-migration#_1-将包设置为-v3","1. 将包设置为 v3",[1815,1864],"为与 UI 版本统一（从 v1 直接跳至 v2），Nuxt UI Pro 跳过了版本 2，直接更新到 v3。 安装 Nuxt UI v3 alpha 版pnpm add @nuxt/ui-pro@next\nyarn add @nuxt/ui-pro@next\nnpm install @nuxt/ui-pro@next\nbun add @nuxt/ui-pro@next\n在 Nuxt 配置中添加模块无需再在模块中添加 @nuxt/ui，因为它已被 @nuxt/ui-pro 自动引入。export default defineNuxtConfig({\n  modules: ['@nuxt/ui-pro']\n})\nexport default defineNuxtConfig({\n  extends: ['@nuxt/ui-pro'],\n  modules: ['@nuxt/ui']\n})\nNuxt UI Pro V3 被视为模块，而非层（layer）。在 CSS 中引入 Tailwind CSS 和 Nuxt UI Pro@import \"tailwindcss\" theme(static);\n@import \"@nuxt/ui-pro\";\nexport default defineNuxtConfig({\n  modules: ['@nuxt/ui-pro'],\n  css: ['~/assets/css/main.css']\n})\n移除 tailwind 配置文件，使用 CSS 优先的主题定制Nuxt UI v3 使用 Tailwind CSS v4，采用 CSS 优先的配置方式。现可在 @theme 指令内使用 CSS 变量定制主题。删除 tailwind.config.ts 文件在 main.css 文件中使用 @theme 指令应用主题使用 @source 指令让 Tailwind 能检测 markdown 文件中的类名@import \"tailwindcss\" theme(static);\n@import \"@nuxt/ui-pro\";\n\n@source \"../content/**/*\";\n\n@theme {\n  --font-sans: 'DM Sans', sans-serif;\n\n  --color-green-50: #EFFDF5;\n  --color-green-100: #D9FBE8;\n  --color-green-200: #B3F5D1;\n  --color-green-300: #75EDAE;\n  --color-green-400: #00DC82;\n  --color-green-500: #00C16A;\n  --color-green-600: #00A155;\n  --color-green-700: #007F45;\n  --color-green-800: #016538;\n  --color-green-900: #0A5331;\n  --color-green-950: #052E16;\n}",{"id":1873,"title":1874,"titles":1875,"content":1876,"level":411},"/blog/ui-pro-docs-migration#_2-更新-appconfigts-中的-ui-配置","2. 更新 app.config.ts 中的 ui 配置",[1815,1864],"组件中的 ui 属性或 app.config.ts 中的 ui 键的所有重载已废弃，请参考 UI / UI Pro 文档进行核查。 export default defineAppConfig({\n  ui: {\n    colors: {\n      primary: 'green',\n      neutral: 'slate'\n    }\n  },\n  uiPro: {\n    footer: {\n      slots: {\n        root: 'border-t border-gray-200 dark:border-gray-800',\n        left: 'text-sm text-gray-500 dark:text-gray-400'\n      }\n    }\n  },\n}\nexport default defineAppConfig({\n  ui: {\n    primary: 'green',\n    gray: 'slate',\n    footer: {\n      bottom: {\n        left: 'text-sm text-gray-500 dark:text-gray-400',\n        wrapper: 'border-t border-gray-200 dark:border-gray-800'\n      }\n    }\n  },\n})",{"id":1878,"title":1879,"titles":1880,"content":1881,"level":411},"/blog/ui-pro-docs-migration#_3-迁移-errorvue-页面","3. 迁移 error.vue 页面",[1815,1864],"可以使用新的 UError 组件作为完整的页面结构。 \u003Ctemplate>\n  \u003Cdiv>\n    \u003CAppHeader />\n\n    \u003CUError :error=\"error\" />\n\n    \u003CAppFooter />\n\n    \u003CClientOnly>\n      \u003CLazyUContentSearch\n        :files=\"files\"\n        :navigation=\"navigation\"\n      />\n    \u003C/ClientOnly>\n  \u003C/div>\n\u003C/template>\n\u003Ctemplate>\n  \u003Cdiv>\n    \u003CAppHeader />\n\n    \u003CUMain>\n      \u003CUContainer>\n        \u003CUPage>\n          \u003CUPageError :error=\"error\" />\n        \u003C/UPage>\n      \u003C/UContainer>\n    \u003C/UMain>\n\n    \u003CAppFooter />\n\n    \u003CClientOnly>\n      \u003CLazyUContentSearch\n        :files=\"files\"\n        :navigation=\"navigation\"\n      />\n    \u003C/ClientOnly>\n\n    \u003CUNotifications />\n  \u003C/div>\n\u003C/template>",{"id":1883,"title":1884,"titles":1885,"content":1886,"level":411},"/blog/ui-pro-docs-migration#_4-迁移-appvue-页面","4. 迁移 app.vue 页面",[1815,1864],"Main、Footer 和 LazyUContentSearch 组件在本例中无需更新。Notification 组件可以移除，因为 Toast 由 App 组件直接管理。NavigationTree 组件可替换为 NavigationMenu 或 ContentNavigation 组件展示内容导航。 \u003Cscript>\n// 内容导航由 queryCollectionNavigation('docs') 提供\nconst navigation = inject\u003CRef\u003CContentNavigationItem[]>>('navigation')\n\u003C/script>\n\n\u003Ctemplate>\n  \u003CUHeader>\n    \u003Ctemplate #content>\n      \u003CUContentNavigation\n        highlight\n        :navigation=\"navigation\"\n      />\n     \u003C/template>\n   \u003C/UHeader>\n\u003C/template>\n\u003Cscript>\n// 内容导航由 fetchContentNavigation() 提供\nconst navigation = inject\u003CRef\u003CNavItem[]>>('navigation')\n\u003C/script>\n\n\u003Ctemplate>\n  \u003CUHeader>\n    \u003Ctemplate #panel>\n      \u003CUNavigationTree :links=\"mapContentNavigation(navigation)\" />\n     \u003C/template>\n   \u003C/UHeader>\n\u003C/template>",{"id":1888,"title":1889,"titles":1890,"content":1891,"level":411},"/blog/ui-pro-docs-migration#_5-更新首页","5. 更新首页",[1815,1864],"我们决定将首页内容从 YML 迁移到 Markdown 。 这么做是因为 Markdown 中使用的组件不再需要全局暴露（也不必创建在 components/content 文件夹中），Content v3 会自动处理这些。 更新内容配置export default defineContentConfig({\n  collections: {\n    landing: defineCollection({\n      type: 'page',\n      source: 'index.md'\n    }),\n    docs: defineCollection({\n      type: 'page',\n      source: {\n        include: '**',\n        exclude: ['index.md']\n      },\n      ...\n    })\n  }\n})\n使用 ContentRenderer 渲染 Markdown由于首页包含非 prose Vue 组件，需将 ContentRenderer 组件的 prose 属性设置为 false，以避免 Markdown 应用 prose 样式。\u003Ctemplate>\n  \u003CUContainer>\n    \u003CContentRenderer\n      v-if=\"page\"\n      :value=\"page\"\n      :prose=\"false\"\n    />\n  \u003C/UContainer>\n\u003C/template>\n\u003Ctemplate>\n  \u003Cdiv>\n    \u003CULandingHero\n      v-if=\"page.hero\"\n      v-bind=\"page.hero\"\n    >\n      \u003Ctemplate #headline>\n        \u003CUBadge\n          v-if=\"page.hero.headline\"\n          variant=\"subtle\"\n          size=\"lg\"\n          class=\"relative rounded-full font-semibold\"\n        >\n          \u003CNuxtLink\n            :to=\"page.hero.headline.to\"\n            target=\"_blank\"\n            class=\"focus:outline-none\"\n            tabindex=\"-1\"\n          >\n            \u003Cspan\n              class=\"absolute inset-0\"\n              aria-hidden=\"true\"\n            />\n          \u003C/NuxtLink>\n\n          {{ page.hero.headline.label }}\n\n          \u003CUIcon\n            v-if=\"page.hero.headline.icon\"\n            :name=\"page.hero.headline.icon\"\n            class=\"ml-1 w-4 h-4 pointer-events-none\"\n          />\n        \u003C/UBadge>\n      \u003C/template>\n\n      \u003Ctemplate #title>\n        \u003CMDC cache-key=\"head-title\" :value=\"page.hero.title\" />\n      \u003C/template>\n\n      \u003CMDC\n        :value=\"page.hero.code\"\n        cache-key=\"head-code\"\n        class=\"prose prose-primary dark:prose-invert mx-auto\"\n      />\n    \u003C/ULandingHero>\n\n    \u003CULandingSection\n      :title=\"page.features.title\"\n      :links=\"page.features.links\"\n    >\n      \u003CUPageGrid>\n        \u003CULandingCard\n          v-for=\"(item, index) of page.features.items\"\n          :key=\"index\"\n          v-bind=\"item\"\n        />\n      \u003C/UPageGrid>\n    \u003C/ULandingSection>\n  \u003C/div>\n\u003C/template>\n迁移 Vue 组件到 MDC 语法请将 index.md 中的所有组件迁移至遵循 MDC 语法 格式。首页组件已重组并标准化为通用的 Page 组件。LandingHero 改为 PageHeroLandingSection 改为 PageSectionLandingCard 改为 PageCard（但我们将使用 PageFeature）在 GitHub 上查看最终的 Markdown 文件示例。",{"id":1893,"title":1894,"titles":1895,"content":1896,"level":411},"/blog/ui-pro-docs-migration#_6-迁移文档页面","6. 迁移文档页面",[1815,1864],"布局Aside 组件已重命名为 PageAside。可使用 ContentNavigation 组件（替代旧的 NavigationTree）展示由 queryCollectionNavigation 返回的内容导航。\u003Ctemplate>\n  \u003CUContainer>\n    \u003CUPage>\n      \u003Ctemplate #left>\n        \u003CUPageAside>\n          \u003CUContentNavigation\n            highlight\n            :navigation=\"navigation\"\n          />\n        \u003C/UPageAside>\n      \u003C/template>\n\n      \u003Cslot />\n    \u003C/UPage>\n  \u003C/UContainer>\n\u003C/template>\n\u003Ctemplate>\n  \u003CUContainer>\n    \u003CUPage>\n      \u003Ctemplate #left>\n        \u003CUAside>\n          \u003CUNavigationTree :links=\"mapContentNavigation(navigation)\" />\n        \u003C/UAside>\n      \u003C/template>\n\n      \u003Cslot />\n    \u003C/UPage>\n  \u003C/UContainer>\n\u003C/template>\n捕获全部页面Divider 改名为 SeparatorfindPageHeadline 必须从 #ui-pro/utils/content 导入PageBody 组件不再存在 prose 属性 完成！文档入门模板现已完全运行于 UI 和 Content v3 🎉",{"id":1898,"title":1899,"titles":1900,"content":1901,"level":343},"/blog/ui-pro-docs-migration#在-studio-中编辑","在 Studio 中编辑",[1815],"如果您使用 Nuxt Studio 编辑文档，也需要迁移相关代码。 Studio 模块已废弃，新的通用 Preview API 已内嵌于 Nuxt Content，您可移除依赖及 nuxt.config.ts 中的 @nuxthq/studio 模块，只需在 Nuxt 配置中启用预览模式并绑定 Studio API。 export default defineNuxtConfig({\n  content: {\n    preview: {\n      api: 'https://api.nuxt.studio'\n    }\n  },\n}) 要保持 app 配置文件可由 Studio 更新，请将 nuxt.schema.ts 文件中的辅助导入由 @nuxthq/studio/theme 切换为 @nuxt/content/preview。 html pre.shiki code .s7zQu, html code.shiki .s7zQu{--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-default:#89DDFF;--shiki-default-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic}html pre.shiki code .sMK4o, html code.shiki .sMK4o{--shiki-light:#39ADB5;--shiki-default:#89DDFF;--shiki-dark:#89DDFF}html pre.shiki code .sTEyZ, html code.shiki .sTEyZ{--shiki-light:#90A4AE;--shiki-default:#EEFFFF;--shiki-dark:#BABED8}html pre.shiki code .sfazB, html code.shiki .sfazB{--shiki-light:#91B859;--shiki-default:#C3E88D;--shiki-dark:#C3E88D}html pre.shiki code .s2Zo4, html code.shiki .s2Zo4{--shiki-light:#6182B8;--shiki-default:#82AAFF;--shiki-dark:#82AAFF}html pre.shiki code .swJcz, html code.shiki .swJcz{--shiki-light:#E53935;--shiki-default:#F07178;--shiki-dark:#F07178}html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .spNyl, html code.shiki .spNyl{--shiki-light:#9C3EDA;--shiki-default:#C792EA;--shiki-dark:#C792EA}html pre.shiki code .sfNiH, html code.shiki .sfNiH{--shiki-light:#FF5370;--shiki-default:#FF9CAC;--shiki-dark:#FF9CAC}html pre.shiki code .sBMFI, html code.shiki .sBMFI{--shiki-light:#E2931D;--shiki-default:#FFCB6B;--shiki-dark:#FFCB6B}html pre.shiki code .sHdIc, html code.shiki .sHdIc{--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-default:#EEFFFF;--shiki-default-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic}html pre.shiki code .sHwdD, html code.shiki .sHwdD{--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-default:#546E7A;--shiki-default-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic}",{"id":1903,"title":1904,"titles":1905,"content":1906,"level":310},"/blog/v3","Nuxt Content v3",[],"内容版本3发布——引入基于SQL的存储、集合、预览API以提升Studio集成体验，以及大量性能改进。",{"id":1908,"title":1909,"titles":1910,"content":1911,"level":310},"/blog/v3#发布-nuxt-content-30","发布 Nuxt Content 3.0",[],"我们非常激动地宣布 Nuxt Content 3.0.0 的首个稳定版本 ✨",{"id":1913,"title":1914,"titles":1915,"content":1916,"level":343},"/blog/v3#性能提升","🚀 性能提升",[1909],"Nuxt Content v3 放弃了基于文件的存储方式，转而采用 SQL 数据库系统。使用数据库代替基于文件的存储可减少查询大规模数据集时的许多 I/O 操作。 全新的数据库系统优化了数据文件的存储和结构方式，确保更佳的性能和可扩展性。此更新完全是幕后进行，不影响您在 Content 中可使用的文件类型（yml、json 和 markdown）。 这一切对用户透明，Nuxt Content 依然支持零配置下的开发模式、服务器托管和静态生成。 此外，现在支持无服务器托管，客户端导航性能也得到提升。",{"id":1918,"title":1919,"titles":1920,"content":1921,"level":411},"/blog/v3#无服务器兼容性","无服务器兼容性",[1909,1914],"Nuxt Content v2 的一个关键挑战是为了存储所有内容文件导致捆绑包体积过大。这在部署到无服务器或边缘平台如 Netlify、NuxtHub 或 Vercel 时是个问题。 在无服务器环境中，每个用户请求都会触发 Nuxt 服务器的新实例，每次都是从零开始。此“无状态”特性意味着无法在服务器内存中存储数据，亦不能使用基于文件的数据库如 SQLite。因此，我们实现了数据库适配器，可以独立于你的服务器实例持久化数据。 我们会根据你配置中的数据库类型手动切换到对应的服务提供者（如 Vercel / Postgres，NuxtHub / D1……）。",{"id":1923,"title":1924,"titles":1925,"content":1926,"level":411},"/blog/v3#浏览器端的-wasm-sqlite","浏览器端的 WASM SQLite",[1909,1914],"对于客户端导航，模块使用类似的方法。当应用执行第一条内容查询时，会从服务器下载生成的转储文件，并在浏览器内初始化本地 SQLite 数据库。从此之后，所有查询都在本地执行，无需再调用服务器：极大提升了应用响应速度，带来无缝的用户体验。",{"id":1928,"title":1929,"titles":1930,"content":1931,"level":343},"/blog/v3#️-内容集合","🗄️ 内容集合",[1909],"集合是 Nuxt Content 项目中相关内容项的分组。它们帮助更高效地组织和管理大型数据集。",{"id":1933,"title":1934,"titles":1935,"content":1936,"level":411},"/blog/v3#定义集合","定义集合",[1909,1929],"你现在可以在 content.config.ts 文件中定义集合，以配置数据库结构、实用类型以及查找、解析和查询内容的方法。",{"id":1938,"title":1939,"titles":1940,"content":1941,"level":411},"/blog/v3#集合模式","集合模式",[1909,1929],"模式确保集合内数据的一致性，并提升 TypeScript 的类型推断，以更好地集成 Nuxt Content 工具。 import { defineCollection, z } from '@nuxt/content'\n\n// 导出集合\nexport const collections = {\n  // 使用 `defineCollection` 工具定义集合\n  posts: defineCollection({\n    // 指定此集合中的内容类型\n    type: 'page',\n    // 加载匹配此模式的所有文件\n    source: 'blog/**/*.md',\n    // 为此集合定义自定义模式\n    schema: z.object({\n      date: z.date(),\n      image: z.object({\n        src: z.string(),\n        alt: z.string()\n      }),\n      badge: z.object({\n        label: z.string(),\n        color: z.string()\n      })\n    })\n  }),\n} 在文档中了解更多关于集合的内容。",{"id":1943,"title":1944,"titles":1945,"content":1946,"level":343},"/blog/v3#简化的-vue-工具","🔧 简化的 Vue 工具",[1909],"我们简化了工具，现暴露： queryCollection 用于通过强大的查询构建器获取集合queryCollectionNavigation 用于获取特定集合生成的导航queryCollectionItemSurroundings 用于获取特定路径的相邻内容queryCollectionSearchSections 用于从集合获取可搜索的章节，增强内容发现 这四个工具允许你在 Vue 页面和组件中高效获取和查询内容： \u003Cscript setup lang=\"ts\">\nconst { data: posts } = await useAsyncData('blog', () => {\n  return queryCollection('blog').all()\n})\n\u003C/script>\n\n\u003Ctemplate>\n  \u003Cdiv>\n    \u003Ch1>博客\u003C/h1>\n    \u003Cul>\n      \u003Cli v-for=\"post in posts\" :key=\"post.id\">\n        \u003CNuxtLink :to=\"post.path\">{{ post.title }}\u003C/NuxtLink>\n      \u003C/li>\n    \u003C/ul>\n  \u003C/div>\n\u003C/template>",{"id":1948,"title":1949,"titles":1950,"content":1951,"level":343},"/blog/v3#内置组件","📦 内置组件",[1909],"我们更新了组件，只包含必要的部分： ContentRenderer 用于渲染解析后的 Markdown 为 HTML 和 Vue 组件Slot 取代了 ContentSlot，因我们现在支持用指令解包，使你的 Vue 组件能完美兼容 Vue 和 Markdown 中的使用Prose 组件 是为 MDC 语法量身打造的预设计组件，集成了样式以提升外观表现 以下是显示 Markdown 文件内容的示例： \u003Cscript lang=\"ts\" setup>\nconst { data: page } = await useAsyncData(() => {\n  return queryCollection('content').path('/about').first()\n})\n\u003C/script>\n\n\u003Ctemplate>\n  \u003CContentRenderer v-if=\"page\" :value=\"page\" />\n  \u003Cp v-else>关于页面尚未编写。\u003C/p>\n\u003C/template>",{"id":1953,"title":1954,"titles":1955,"content":1956,"level":343},"/blog/v3#typescript-集成","🔷 TypeScript 集成",[1909],"新的集合系统为所有数据自动提供 TypeScript 类型。每个工具和 API 均基于你的集合定义实现强类型，确保开发过程中的类型安全。",{"id":1958,"title":1959,"titles":1960,"content":1961,"level":343},"/blog/v3#️-从-v2-迁移","⬆️ 从 V2 迁移",[1909],"迁移尽可能简便，因此我们编写了 迁移指南。 注意，我们决定移除基于文档的驱动模式，以简化模块使用。",{"id":1963,"title":1964,"titles":1965,"content":1966,"level":343},"/blog/v3#️-studio-集成","🖼️ Studio 集成",[1909],"Nuxt Studio 是一个可视化编辑运行中 Nuxt Content 项目的平台。支持 Markdown、YAML 和 JSON 文件，编辑器确保灵活与易用。",{"id":1968,"title":1969,"titles":1970,"content":1971,"level":411},"/blog/v3#预览-api","预览 API",[1909,1964],"之前独立的模块 Studio 模块 已升级得更加通用，现直接集成在 Nuxt Content 作为一个 预览 API。 启用 Studio 的预览功能比以往更简单 —— 只需在 Nuxt Content 配置中将 Studio API 设置为你的 Preview API： export default defineNuxtConfig({\n  content: {\n    preview: {\n      api: 'https://api.nuxt.studio'\n    }\n  }\n}) 这一简化意味着不再需要额外安装模块来支持 Studio，设置更快更简便。此外，预览 API 现已泛化，支持其他服务提供提供顶级的编辑体验。",{"id":1973,"title":1974,"titles":1975,"content":1976,"level":411},"/blog/v3#统一文档","统一文档",[1909,1964],"除了集成，我们还将 Content 和 Studio 的文档与网站统一成一个全面的资源。仅 Studio 平台（用户登录后可用）保持为一个独立站点。 我们现在可以在 Studio 中利用数据结构和集合。Studio 平台支持并适配 集合 和 用户自定义模式。此改进将支持针对 YAML 和 JSON 文件及 Markdown 文件中的 front-matter 自动生成表单。 html pre.shiki code .s7zQu, html code.shiki .s7zQu{--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-default:#89DDFF;--shiki-default-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic}html pre.shiki code .sMK4o, html code.shiki .sMK4o{--shiki-light:#39ADB5;--shiki-default:#89DDFF;--shiki-dark:#89DDFF}html pre.shiki code .sTEyZ, html code.shiki .sTEyZ{--shiki-light:#90A4AE;--shiki-default:#EEFFFF;--shiki-dark:#BABED8}html pre.shiki code .sfazB, html code.shiki .sfazB{--shiki-light:#91B859;--shiki-default:#C3E88D;--shiki-dark:#C3E88D}html pre.shiki code .sHwdD, html code.shiki .sHwdD{--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-default:#546E7A;--shiki-default-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic}html pre.shiki code .spNyl, html code.shiki .spNyl{--shiki-light:#9C3EDA;--shiki-default:#C792EA;--shiki-dark:#C792EA}html pre.shiki code .swJcz, html code.shiki .swJcz{--shiki-light:#E53935;--shiki-default:#F07178;--shiki-dark:#F07178}html pre.shiki code .s2Zo4, html code.shiki .s2Zo4{--shiki-light:#6182B8;--shiki-default:#82AAFF;--shiki-dark:#82AAFF}html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"id":1978,"title":1979,"titles":1980,"content":1981,"level":310},"/blog/visual-editor","Nuxt Studio 可视化编辑器幕后揭秘",[],"探索 Nuxt Studio 可视化编辑器的内部工作原理，以及它如何解析 Markdown 语法并重新生成内容。",{"id":1983,"title":1984,"titles":1985,"content":1986,"level":343},"/blog/visual-editor#简介","简介",[1979],"Nuxt Studio 为开发者和内容撰写者提供了多功能的工作空间，允许他们在两个截然不同的编辑器之间进行选择，用于内容的创建和管理：Markdown 编辑器和可视化编辑器。 每个编辑器都有其独特的用途——有些用户习惯于 Markdown 编辑，而另一些则更喜欢非技术化的可视化方式。 最终，这两种编辑器的最终输出都是 Markdown 语法。 本文将阐述可视化编辑器背后的技术流程，探讨它如何解析 Markdown、如何转换回 Markdown，以及为何这一过程有时可能会导致与原始内容的差异。",{"id":1988,"title":1989,"titles":1990,"content":1991,"level":343},"/blog/visual-editor#markdown-编辑器","Markdown 编辑器",[1979],"Nuxt Studio 中的 Markdown 编辑器允许你完全控制内容，可以直接编写 MDC（增强型 Markdown 语法）。该语法支持直接将 Vue 组件集成到 Markdown 文件中，提供了更灵活的页面结构编排能力。 当你在 Markdown 编辑器中保存文件时，内容会完全保持你所编写的形式，保留所有特定语法与格式。对于熟悉 Markdown 并希望精确控制内容布局和结构的用户来说，这款编辑器是理想选择。",{"id":1993,"title":1994,"titles":1995,"content":1996,"level":343},"/blog/visual-editor#可视化编辑器","可视化编辑器",[1979],"可视化编辑器是一种基于 TipTap 和 ProseMirror 构建的所见即所得（WYSIWYG）工具，旨在屏蔽 Markdown 语法的复杂性，提供更直观的视觉编辑体验。对于不想直接处理原始 Markdown 代码的用户，这款编辑器尤其友好。",{"id":1998,"title":1999,"titles":2000,"content":2001,"level":411},"/blog/visual-editor#可视化编辑器如何处理文件","可视化编辑器如何处理文件",[1979,1994],"当你用可视化编辑器打开 Markdown 文件时，Nuxt Studio 首先会解析原始 Markdown 文件。借助 MDC 模块，它生成一个抽象语法树（AST）。随后，该 AST 被转换为 TipTap 兼容的格式（TipTap AST），以便编辑器能够精准地可视化渲染文档内容。 一旦可视化编辑器展示内容，用户便可通过直观的视觉方式进行更新。在幕后，编辑器持续地将 TipTap AST 转换回 MDC AST，再回转为 MDC 语法，确保内容始终保持 Markdown 格式。",{"id":2003,"title":2004,"titles":2005,"content":303,"level":411},"/blog/visual-editor#为什么未修改内容时原始-markdown-文件会发生变化","为什么未修改内容时原始 Markdown 文件会发生变化",[1979,1994],{"id":2007,"title":2008,"titles":2009,"content":2010,"level":461},"/blog/visual-editor#非关键性变化","非关键性变化",[1979,1994,2004],"当可视化编辑器将视觉格式转换回 Markdown 时，会应用一套预设的 Markdown 标准解析算法。这些标准有时可能与原内容存在细微差别。这类变化通常影响不大，仅仅是 Markdown 语法的另一种有效写法，渲染后的网站表现应保持一致。",{"id":2012,"title":2013,"titles":2014,"content":2015,"level":461},"/blog/visual-editor#关键性变化","关键性变化",[1979,1994,2004],"理想情况下，Markdown 的所有特性都能在可视化编辑器中有直接而准确的对应。我们已构建自定义 TipTap 扩展，以支持自定义 MDC 语法，例如 Vue 组件编辑或 front-matter 等。然而，在个别罕见的情况下，尤其是涉及复杂或不常见的 Markdown 元素时，可视化编辑器可能无法完全支持或正确解析这些元素。此时，编辑器可能会在解析过程中对这些元素进行近似处理、简化乃至省略。 这类差异可能导致转换回 Markdown 时出现数据丢失或回退。虽然这种情况较少发生，但有可能影响内容的展示效果或功能。 我们的主要目标是防止任何内容丢失，保持 Markdown 文件的完整性。如果你遇到从可视化编辑器切换回 Markdown 时出现不完美的情况，欢迎在我们的 Discord 服务器上反馈。你的反馈对我们改进和完善可视化编辑器极为重要，能确保满足所有用户的需求。",{"id":2017,"title":2018,"titles":2019,"content":2020,"level":343},"/blog/visual-editor#减少非预期变化的最佳实践","减少非预期变化的最佳实践",[1979],"为避免丢失重要格式或内容，请遵循以下建议： 避免使用复杂的 HTML 结构。由于 MDC 语法允许集成 Vue 组件，更推荐创建可复用组件，方便插入 Markdown 并在编辑器内编辑，而不是依赖复杂的 HTML 代码。保持编辑器的一致性。尽可能选择最适合你需求的编辑器，并在整个页面编辑过程中保持使用同一编辑器。切换编辑器后务必检查变更。切换编辑器后，务必在审核页面检查 Markdown 内容，并通过预览确保没有重要元素被修改。",{"id":2022,"title":2023,"titles":2024,"content":2025,"level":343},"/blog/visual-editor#结语","结语",[1979],"在 Nuxt Studio 中切换 Markdown 编辑器和可视化编辑器可以带来灵活的编辑体验，但需要注意背后的技术影响。 理解可视化编辑器如何处理和转换 Markdown，有助于确保你所撰写的 Markdown 内容能准确地在可视化编辑器中显示，使非技术用户能够轻松编辑所有内容，而不破坏原始 Markdown 文件。",{"id":2027,"title":303,"titles":2028,"content":303,"level":411},"/blog/visual-editor#",[1979,2023],{"id":2030,"title":2031,"titles":2032,"content":2033,"level":310},"/changelog/frontmatter-form","可视化 Front-matter 编辑",[],"现在可以通过可视化界面编辑页面元数据，而不必使用 YAML。 本文发布于 2025 年 1 月 6 日 Content 和 Studio 模块合并之前。因此，本文可能存在一些不一致之处。Studio 模块现已弃用，作为 Content 模块的可选功能提供。请参阅这份指南了解如何启用。",{"id":2035,"title":2036,"titles":2037,"content":2038,"level":343},"/changelog/frontmatter-form#可视化-front-matter-编辑","可视化 Front-Matter 编辑",[2031],"现在您无需编写 YAML 语法即可编辑 markdown front-matter。Nuxt Studio 会自动生成用户友好的表单，简化元数据编辑。",{"id":2040,"title":2041,"titles":2042,"content":2043,"level":343},"/changelog/frontmatter-form#什么是-front-matter","什么是 Front-matter？",[2031],"Front-matter 是基于 Markdown 的 CMS 中用于为页面提供元数据（如描述、标题等）的约定。在 Nuxt Content 中，front-matter 使用的是 YAML 语法。 关于 front-matter 语法的详细信息，请参阅 Nuxt Content 文档。",{"id":2045,"title":2046,"titles":2047,"content":2048,"level":343},"/changelog/frontmatter-form#我们非技术编辑器的最后一环","我们非技术编辑器的最后一环",[2031],"Nuxt Studio 从发布编辑器起就以非技术用户为设计核心。我们的目标是让每个人都能轻松编辑 markdown 和内容。 自动生成 front-matter 表单是下一步的合理进展。通过摆脱 YAML 语法的复杂性，简化了非开发者的编辑流程，提供动态输入选项，如图片选择器、日期选择器、布尔切换等。此增强使我们实现了完全可视化且用户友好的内容管理体验。",{"id":2050,"title":2051,"titles":2052,"content":2053,"level":343},"/changelog/frontmatter-form#扩展至所有-yaml-和-json-文件","扩展至所有 YAML 和 JSON 文件",[2031],"不久之后，表单生成功能将扩展至您在 Nuxt Studio 中编辑的所有 YAML 和 JSON 文件，让结构化数据的操作更为轻松便捷。",{"id":2055,"title":2056,"titles":2057,"content":2058,"level":343},"/changelog/frontmatter-form#展望-nuxt-content-v3","展望 Nuxt Content v3",[2031],"本节内容仅为 Nuxt Content v3 的预告，我们将很快发布更详尽的博文。 我们正积极开发下一重大版本 Nuxt Content，这将带来显著的性能提升和新功能，进一步提升内容管理体验。",{"id":2060,"title":2061,"titles":2062,"content":2063,"level":411},"/changelog/frontmatter-form#性能优化","性能优化",[2031,2056],"Nuxt Content v2 的一大挑战是需要较大的包体积来存储所有内容文件，这在向边缘平台（如 NuxtHub）部署时造成了问题。 为解决此问题，Nuxt Content v3 在生产环境中不再使用基于文件的存储方式，而是采用 SQL 数据库系统。此变更对用户透明。我们为开发模式、静态生成、服务器渲染及通过 NuxtHub 的边缘部署提供零配置支持。",{"id":2065,"title":2066,"titles":2067,"content":2068,"level":411},"/changelog/frontmatter-form#引入-collections集合","引入 Collections（集合）",[2031,2056],"Collections 是 Nuxt Content 项目中相关内容项的分组，帮助更高效地组织和管理大型数据集。",{"id":2070,"title":2071,"titles":2072,"content":2073,"level":461},"/changelog/frontmatter-form#定义-collections","定义 Collections",[2031,2056,2066],"您可以在 content.config.ts 文件中定义 collections，Nuxt Content 将用它配置数据库结构、类型工具及用于查找、解析和查询内容的方法。",{"id":2075,"title":2076,"titles":2077,"content":2078,"level":461},"/changelog/frontmatter-form#collections-方案schema","Collections 方案（Schema）",[2031,2056,2066],"方案可确保 collections 内部的一致性，并改善 TypeScript 类型定义，增强与 Nuxt Content 工具的集成。 import { defineCollection, z } from '@nuxt/content'\n\n// 导出 collections\nexport const collections = {\n  // 使用 `defineCollection` 工具定义 collection\n  posts: defineCollection({\n    // 指定该 collection 中内容的类型\n    type: 'page',\n    // 加载匹配此模式的所有文件\n    source: 'blog/**/*.md',\n    // 为该 collection 定义自定义 schema\n    schema: z.object({\n      date: z.date(),\n      image: z.object({\n        src: z.string(),\n        alt: z.string()\n      }),\n      badge: z.object({\n        label: z.string(),\n        color: z.string()\n      })\n    })\n  }),\n}",{"id":2080,"title":2081,"titles":2082,"content":2083,"level":411},"/changelog/frontmatter-form#针对-nuxt-studio-精心打造","针对 Nuxt Studio 精心打造",[2031,2056],"Nuxt Studio 最初与 Nuxt Content v2 同步开发，但在 v3 中，我们以 Nuxt Studio 体验为目标重构模块。我们的宗旨是打造最佳内容编辑 CMS 平台，同时提供极佳的开发者体验。 例如，collection schema 将助力我们进一步增强 Studio 中的表单生成。您甚至可以直接在 schema 中设置字段的编辑器类型。 image: z.object({\n    src: z.string().editor({ type: 'media' }),\n    alt: z.string()\n}),\nicon: z.string().editor({ type: 'icon' }) Nuxt Content v3 已正式发布。欢迎尝试并向我们反馈意见。 html pre.shiki code .s7zQu, html code.shiki .s7zQu{--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-default:#89DDFF;--shiki-default-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic}html pre.shiki code .sMK4o, html code.shiki .sMK4o{--shiki-light:#39ADB5;--shiki-default:#89DDFF;--shiki-dark:#89DDFF}html pre.shiki code .sTEyZ, html code.shiki .sTEyZ{--shiki-light:#90A4AE;--shiki-default:#EEFFFF;--shiki-dark:#BABED8}html pre.shiki code .sfazB, html code.shiki .sfazB{--shiki-light:#91B859;--shiki-default:#C3E88D;--shiki-dark:#C3E88D}html pre.shiki code .sHwdD, html code.shiki .sHwdD{--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-default:#546E7A;--shiki-default-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic}html pre.shiki code .spNyl, html code.shiki .spNyl{--shiki-light:#9C3EDA;--shiki-default:#C792EA;--shiki-dark:#C792EA}html pre.shiki code .swJcz, html code.shiki .swJcz{--shiki-light:#E53935;--shiki-default:#F07178;--shiki-dark:#F07178}html pre.shiki code .s2Zo4, html code.shiki .s2Zo4{--shiki-light:#6182B8;--shiki-default:#82AAFF;--shiki-dark:#82AAFF}html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .sBMFI, html code.shiki .sBMFI{--shiki-light:#E2931D;--shiki-default:#FFCB6B;--shiki-dark:#FFCB6B}",{"id":2085,"title":2086,"titles":2087,"content":2088,"level":310},"/changelog/studio-customisation","Studio 表单自定义",[],"Studio 表单是基于您内容配置文件中定义的集合模式动态生成的。 Studio 表单是基于您内容配置文件中定义的集合模式动态生成的。无论您是在编辑 Markdown 文件的 frontmatter，还是 JSON / YAML 文件，这种行为都是适用的。",{"id":2090,"title":2091,"titles":2092,"content":2093,"level":343},"/changelog/studio-customisation#使用-zod-模式定义您的表单","使用 zod 模式定义您的表单",[2086],"Nuxt Content 利用 zod 让您定义一种类型安全的内容模式。此模式不仅用于验证您的数据，还为 Studio 中的表单生成提供支持。",{"id":2095,"title":2096,"titles":2097,"content":2098,"level":411},"/changelog/studio-customisation#内置的-zod-辅助工具","内置的 zod 辅助工具",[2086,2091],"您可以通过向集合添加 schema 属性并使用 zod 模式来定义您的内容模式。 @nuxt/content 暴露了一个 z 对象，包含一组用于常见数据类型的 Zod 工具。 export default defineContentConfig({\n  collections: {\n    posts: defineCollection({\n      type: 'page',\n      source: 'blog/*.md',\n      schema: z.object({\n        draft: z.boolean().default(false),\n        category: z.enum(['Alps', 'Himalaya', 'Pyrenees']).optional(),\n        date: z.date(),\n        image: z.object({\n          src: z.string().editor({ input: 'media' }),\n          alt: z.string(),\n        }),\n        slug: z.string().editor({ hidden: true }),\n        icon: z.string().optional().editor({ input: 'icon' }),\n        authors: z.array(z.object({\n          slug: z.string(),\n          username: z.string(),\n          name: z.string(),\n          to: z.string(),\n          avatar: z.object({\n            src: z.string(),\n            alt: z.string(),\n          }),\n        })),\n      }),\n    }),\n  },\n})",{"id":2100,"title":2101,"titles":2102,"content":2103,"level":411},"/changelog/studio-customisation#原生输入映射","原生输入映射",[2086,2091],"原始 Zod 类型会自动映射为 Studio 中相应的表单输入： 字符串 → 文本输入框日期 → 日期选择器数字 → 数字输入（计数器）布尔值 → 开关切换枚举 → 下拉选择框字符串数组 → 徽章输入列表对象数组 → 可折叠项嵌套表单",{"id":2105,"title":2106,"titles":2107,"content":2108,"level":411},"/changelog/studio-customisation#自定义输入映射","自定义输入映射",[2086,2091],"内容不仅限于原始类型。您可以使用 editor 方法自定义表单字段，该方法通过元数据扩展 Zod 类型，以增强编辑器界面功能。 这使您能够定义自定义输入或者隐藏字段。",{"id":2110,"title":2111,"titles":2112,"content":2113,"level":461},"/changelog/studio-customisation#用法","用法",[2086,2091,2106],"mainScreen: z.string().editor({ input: 'media' })",{"id":2115,"title":2116,"titles":2117,"content":303,"level":461},"/changelog/studio-customisation#选项","选项",[2086,2091,2106],{"id":2119,"title":2120,"titles":2121,"content":2122,"level":468},"/changelog/studio-customisation#input-media-icon","input: 'media' | 'icon'",[2086,2091,2106,2116],"您可以设置编辑器输入类型。目前支持 icon 和 media，因为它们已在 Studio 编辑器中被处理。",{"id":2124,"title":2125,"titles":2126,"content":2127,"level":468},"/changelog/studio-customisation#hidden-boolean","hidden: Boolean",[2086,2091,2106,2116],"此选项可用于避免字段在 Studio 编辑器中显示。 Studio 输入完全可扩展。我们可以根据用户需求创建任意数量的输入控件。 html pre.shiki code .s7zQu, html code.shiki .s7zQu{--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-default:#89DDFF;--shiki-default-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic}html pre.shiki code .s2Zo4, html code.shiki .s2Zo4{--shiki-light:#6182B8;--shiki-default:#82AAFF;--shiki-dark:#82AAFF}html pre.shiki code .sTEyZ, html code.shiki .sTEyZ{--shiki-light:#90A4AE;--shiki-default:#EEFFFF;--shiki-dark:#BABED8}html pre.shiki code .sMK4o, html code.shiki .sMK4o{--shiki-light:#39ADB5;--shiki-default:#89DDFF;--shiki-dark:#89DDFF}html pre.shiki code .swJcz, html code.shiki .swJcz{--shiki-light:#E53935;--shiki-default:#F07178;--shiki-dark:#F07178}html pre.shiki code .sfazB, html code.shiki .sfazB{--shiki-light:#91B859;--shiki-default:#C3E88D;--shiki-dark:#C3E88D}html pre.shiki code .sfNiH, html code.shiki .sfNiH{--shiki-light:#FF5370;--shiki-default:#FF9CAC;--shiki-dark:#FF9CAC}html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .sBMFI, html code.shiki .sBMFI{--shiki-light:#E2931D;--shiki-default:#FFCB6B;--shiki-dark:#FFCB6B}",{"id":2129,"title":2130,"titles":2131,"content":2132,"level":310},"/changelog/yaml-json-form","视觉化 YAML 和 JSON 文件编辑",[],"通过自动生成的表单编辑 YAML 和 JSON 文件。 本文发表于 Content 和 Studio 模块于 2025 年 1 月 6 日合并之前。因此，文中内容可能存在一些不一致之处。Studio 模块现已废弃，并作为 Content 模块的可选功能提供。请参阅 此指南 了解如何启用。",{"id":2134,"title":2135,"titles":2136,"content":2137,"level":343},"/changelog/yaml-json-form#yaml-和-json-文件的自动生成表单","YAML 和 JSON 文件的自动生成表单",[2130],"延续我们让 Nuxt Studio 成为非技术用户编辑 Nuxt 网站内容工具的旅程，我们很高兴地宣布，现在可以通过生成的视觉表单来编辑 YAML 和 JSON 文件。这次更新免去了用户直接操作复杂文件语法（如 YAML 或 JSON）的需求。 目前数组尚未通过表单支持，但我们计划在 Nuxt Content v3 发布集合和用户定义的 schema 后进行支持。详见下文章节。",{"id":2139,"title":2140,"titles":2141,"content":2142,"level":411},"/changelog/yaml-json-form#同步导航","同步导航",[2130,2135],"此次更新同时改进了非 Markdown 格式（如 YAML 和 JSON）预览与所选文件间的同步导航。请将 Studio 模块更新至最新版本 v2.2.0 以应用此修复。",{"id":2144,"title":2145,"titles":2146,"content":2147,"level":343},"/changelog/yaml-json-form#迈向-nuxt-content-v3","迈向 Nuxt Content v3",[2130],"我们很高兴地宣布，Nuxt Content v3 的第四个 alpha 版本已发布，且 草稿文档 已开放。",{"id":2149,"title":2150,"titles":2151,"content":2152,"level":411},"/changelog/yaml-json-form#下一步","下一步？",[2130,2145],"未来几个月，我们将专注于测试和优化 Nuxt Content v3，确保其稳健且适合生产环境发布。以下是与 Nuxt Studio 相关的主要改进： 合并 Studio 模块：不久后，Studio 模块将直接集成进 Nuxt Content。Nuxt Content v3 发布后，只需在 nuxt.config.ts 文件中设置 content.editor: true 即可启用 Studio。该简化意味着无需额外模块，安装更快捷。统一文档：模块合并后，我们将把 Content 和 Studio 的文档及网站合并为一个综合资源。Studio 平台本身（用户登录后可用）将作为独立站点保留。充分利用 Studio 中的数据结构和集合：借助 Nuxt Content v3，Studio 平台将支持并适配 集合 和用户定义的 schema，实现针对 YAML、JSON 文件及 Markdown 的 front-matter 的基于 schema 的表单生成。 这些更新体现了我们为您的 Nuxt 网站提供最佳内容编辑平台的承诺。敬请期待！",{"id":6,"title":1904,"titles":2154,"content":2155,"level":310},[],"专为 Nuxt 开发者设计的强大基于 Git 的 CMS。 欢迎使用 Nuxt Content v3，这是一次重大升级，为您的 Nuxt 项目带来更高性能和创新功能。我们基于 Git 的 CMS 的最新版本针对现代应用开发进行了优化。",{"id":2157,"title":2158,"titles":2159,"content":303,"level":343},"/docs/getting-started#新功能","新功能",[1904],{"id":2161,"title":2162,"titles":2163,"content":2164,"level":411},"/docs/getting-started#内容集合","内容集合",[1904,2158],"集合用于组织项目中的相关项，帮助您更高效地管理大型数据集。主要优势包括： 结构化数据：在 content.config.ts 中配置数据库架构并定义集合类型安全查询：所有工具均支持 TypeScript 直接集成自动验证：确保 Frontmatter 字段和数据文件（json、yml 等）的一致性高级查询构建器：轻松过滤、排序和分页集合数据Studio 集成：通过 Studio 实现更好的表单生成和优化的编辑体验 了解更多关于内容集合的信息。",{"id":2166,"title":2167,"titles":2168,"content":2169,"level":411},"/docs/getting-started#性能提升","性能提升",[1904,2158],"v2 中的一个主要挑战是用于存储文件的大体积包，特别影响无服务器部署。 v3 通过在生产环境中切换到基于 SQL 的存储解决了这一问题。此转换无需任何配置，支持开发模式、静态生成、服务器托管、无服务器和边缘部署。 新的数据库系统改进了数据文件的存储和结构方式，确保更佳的性能和可扩展性。此更新全部在后台完成，不影响您在 Content 中使用的文件类型（yml、json 和 markdown）。 优势包括： 优化的查询：SQL 存储实现超高速数据检索通用兼容性：我们的基于适配器的系统可整合 SQL 数据库，支持所有部署模式（服务器、无服务器 和 静态）。我们欢迎社区贡献更多适配器。",{"id":2171,"title":2172,"titles":2173,"content":2174,"level":411},"/docs/getting-started#typescript-集成","TypeScript 集成",[1904,2158],"新的集合系统为您的所有数据自动生成 TypeScript 类型。所有工具和 API 都基于您的集合定义强类型，确保开发过程中的类型安全。",{"id":2176,"title":2177,"titles":2178,"content":2179,"level":411},"/docs/getting-started#nuxt-studio-集成-即将推出","Nuxt Studio 集成 即将推出",[1904,2158],"Nuxt Studio 与 v3 设计上完美互补。studio 模块现已直接集成到 Nuxt Content 中，打造理想环境，开发者专注编码，团队成员则通过直观界面管理内容。 我们很高兴您能探索这些新功能。深入阅读文档，了解如何集成该模块并在您的下一个项目中实践最佳方案。",{"id":2181,"title":2182,"titles":2183,"content":2184,"level":343},"/docs/getting-started#content-v2-迁移","Content V2 迁移",[1904],"了解如何从 Content v2 迁移到 v3，请参见迁移指南。",{"id":13,"title":12,"titles":2186,"content":2187,"level":310},[],"在你的 Nuxt 应用中开始使用 Nuxt Content v3。",{"id":2189,"title":2190,"titles":2191,"content":2192,"level":411},"/docs/getting-started/installation#安装包","安装包",[12],"选择你喜欢的包管理器来安装 Nuxt Content v3： pnpm add @nuxt/content\nyarn add @nuxt/content\nnpm install @nuxt/content\nbun add @nuxt/content",{"id":2194,"title":2195,"titles":2196,"content":2197,"level":411},"/docs/getting-started/installation#注册模块","注册模块",[12],"在你的 nuxt.config.ts 文件中添加 Nuxt Content 模块： export default defineNuxtConfig({\n  modules: ['@nuxt/content']\n})",{"id":2199,"title":2200,"titles":2201,"content":2202,"level":411},"/docs/getting-started/installation#自动安装","自动安装",[12],"使用 create-nuxt CLI 创建新 Nuxt 项目时，可以直接从交互式模块选择器中选择 @nuxt/content。这将自动为你安装并注册该模块。 npm create nuxt \u003Cproject-name>\nyarn create nuxt \u003Cproject-name>\npnpm create nuxt \u003Cproject-name>\nbun create nuxt \u003Cproject-name>\ndeno -A npm:create-nuxt@latest \u003Cproject-name> 当你在 Node.js 中运行项目时，Nuxt Content 会询问你使用哪个数据库连接器。\n你可以选择安装 better-sqlite3 或 sqlite3 包。如果你不想安装任何包，可以使用从 Node.js@v22.5.0 或更新版本自带的原生 SQLite。\n请查看 experimental.nativeSqlite 配置。",{"id":2204,"title":2205,"titles":2206,"content":2207,"level":411},"/docs/getting-started/installation#创建你的第一个集合","创建你的第一个集合",[12],"在项目根目录创建一个 content.config.ts 文件： import { defineContentConfig, defineCollection } from '@nuxt/content'\n\nexport default defineContentConfig({\n  collections: {\n    content: defineCollection({\n      type: 'page',\n      source: '**/*.md'\n    })\n  }\n}) 该配置创建了一个默认的 content 集合，用于处理项目 content 文件夹内的所有 Markdown 文件。你可以根据需要自定义集合配置。 type: page 表示内容文件和网站页面之间是一对一的关系。 了解更多，请查看我们的 集合指南。",{"id":2209,"title":2210,"titles":2211,"content":2212,"level":411},"/docs/getting-started/installation#创建你的第一个-markdown-页面","创建你的第一个 Markdown 页面",[12],"在项目根目录创建 content/index.md 文件： # 我的第一个页面\n\n这里是一段内容。 查看更多关于编写 Markdown 页面 的信息。",{"id":2214,"title":2215,"titles":2216,"content":2217,"level":411},"/docs/getting-started/installation#显示你的页面","显示你的页面",[12],"创建 pages/index.vue 文件并展示页面内容： \u003Cscript setup lang=\"ts\">\nconst { data: home } = await useAsyncData(() => queryCollection('content').path('/').first())\n\nuseSeoMeta({\n  title: home.value?.title,\n  description: home.value?.description\n})\n\u003C/script>\n\n\u003Ctemplate>\n  \u003CContentRenderer v-if=\"home\" :value=\"home\" />\n  \u003Cdiv v-else>首页未找到\u003C/div>\n\u003C/template> 如果你在一个新的 Nuxt 项目中安装 Nuxt Content，并且项目中没有 pages 目录，你还需要更新 app.vue 文件，通过添加 NuxtPage 组件来允许渲染页面。（如果你的项目已有页面，则无需此操作。）\u003Ctemplate>\n  \u003CNuxtLayout>\n    \u003CNuxtPage />\n  \u003C/NuxtLayout>\n\u003C/template> 就是这样！你已经创建了你的第一个 Nuxt Content 页面。 html pre.shiki code .sBMFI, html code.shiki .sBMFI{--shiki-light:#E2931D;--shiki-default:#FFCB6B;--shiki-dark:#FFCB6B}html pre.shiki code .sfazB, html code.shiki .sfazB{--shiki-light:#91B859;--shiki-default:#C3E88D;--shiki-dark:#C3E88D}html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .s7zQu, html code.shiki .s7zQu{--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-default:#89DDFF;--shiki-default-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic}html pre.shiki code .s2Zo4, html code.shiki .s2Zo4{--shiki-light:#6182B8;--shiki-default:#82AAFF;--shiki-dark:#82AAFF}html pre.shiki code .sTEyZ, html code.shiki .sTEyZ{--shiki-light:#90A4AE;--shiki-default:#EEFFFF;--shiki-dark:#BABED8}html pre.shiki code .sMK4o, html code.shiki .sMK4o{--shiki-light:#39ADB5;--shiki-default:#89DDFF;--shiki-dark:#89DDFF}html pre.shiki code .swJcz, html code.shiki .swJcz{--shiki-light:#E53935;--shiki-default:#F07178;--shiki-dark:#F07178}html pre.shiki code .spNyl, html code.shiki .spNyl{--shiki-light:#9C3EDA;--shiki-default:#C792EA;--shiki-dark:#C792EA}",{"id":17,"title":16,"titles":2219,"content":2220,"level":310},[],"Nuxt Content 采用合理的默认配置。 要配置内容模块并自定义其行为，您可以在 nuxt.config 中使用 content 属性： export default defineNuxtConfig({\n  content: {\n    // 选项\n  }\n}) 除了通过 content.markdown 配置外，您还可以使用 Markdown 组件 (MDC) 通过 mdc 属性自定义 Markdown 元素的渲染。",{"id":2222,"title":2223,"titles":2224,"content":2225,"level":343},"/docs/getting-started/configuration#build","build",[16],"Nuxt Content 会在构建时读取并解析所有可用内容。此选项允许您控制内容解析。",{"id":2227,"title":2228,"titles":2229,"content":2230,"level":411},"/docs/getting-started/configuration#markdown","markdown",[16,2223],"配置 markdown 解析器。",{"id":2232,"title":2233,"titles":2234,"content":2235,"level":461},"/docs/getting-started/configuration#toc","toc",[16,2223,2228],"toc: {\n  depth: 2,\n  searchDepth: 2\n}\ntype Toc = {\n  depth: number\n  searchDepth: number\n} 控制目录（Table of Contents）的生成行为。 取值： depth：目录中包含的最大标题深度。searchDepth：搜索标题时嵌套标签的最大深度。 export default defineNuxtConfig({\n  content: {\n    build: {\n      markdown: {\n        toc: {\n          depth: 3, // 包含 h3 标题\n        }\n      }\n    }\n  }\n})",{"id":2237,"title":2238,"titles":2239,"content":2240,"level":461},"/docs/getting-started/configuration#remarkplugins","remarkPlugins",[16,2223,2228],"remarkPlugins: {}\ntype RemarkPlugins = Record\u003Cstring, false | MarkdownPlugin> 使用的 remark 插件列表。 export default defineNuxtConfig({\n  content: {\n    build: {\n      markdown: {\n        // 对象语法可用于覆盖默认选项\n        remarkPlugins: {\n          // 覆盖 remark-emoji 选项\n          'remark-emoji': {\n            options: {\n              emoticon: true\n            }\n          },\n          // 禁用 remark-gfm\n          'remark-gfm': false,\n          // 添加 remark-oembed\n          'remark-oembed': {\n            // 选项\n          }\n        },\n      }\n    }\n  }\n})",{"id":2242,"title":2243,"titles":2244,"content":2245,"level":461},"/docs/getting-started/configuration#rehypeplugins","rehypePlugins",[16,2223,2228],"rehypePlugins: {}\ntype RehypePlugins = object 使用的 rehype 插件列表。 export default defineNuxtConfig({\n  content: {\n    build: {\n      markdown: {\n        // 对象语法可用于覆盖默认选项\n        rehypePlugins: {\n          'rehype-figure': {\n\n          }\n        },\n      }\n    }\n  }\n})",{"id":2247,"title":2248,"titles":2249,"content":2250,"level":461},"/docs/getting-started/configuration#highlight","highlight",[16,2223,2228],"highlight: false\ntype Highlight = false | object Nuxt Content 使用 Shiki 为 ProsePre 和 ProseCode 提供语法高亮。 选项类型说明themeShikiTheme 或 Record\u003Cstring, ShikiTheme>要使用的颜色主题。langsShikiLang[]可用于高亮的加载的语言。 highlight.theme 主题可以是单个字符串，也支持带多个主题的对象。 此选项兼容 Color Mode 模块。 如果您使用多个主题，建议始终指定 default 主题。 export default defineNuxtConfig({\n  content: {\n    build: {\n      markdown: {\n        highlight: {\n          // 所有配色方案中使用的主题\n          theme: 'github-light',\n          // 或者\n          theme: {\n            // 默认主题（同单一字符串）\n            default: 'github-light',\n            // `html.dark` 时使用的主题\n            dark: 'github-dark',\n            // `html.sepia` 时使用的主题\n            sepia: 'monokai'\n          }\n        }\n      }\n    }\n  }\n}) highlight.langs 默认情况下，模块加载了若干语言用于语法高亮： ['json', 'js', 'ts', 'html', 'css', 'vue', 'shell', 'mdc', 'md', 'yaml'] 如果您计划使用其他语言的代码示例，需要在该选项中定义该语言。 export default defineNuxtConfig({\n  content: {\n    build: {\n      markdown: {\n        highlight: {\n          langs: [\n            'c',\n            'cpp',\n            'java'\n          ]\n        }\n      }\n    }\n  }\n}) 如果您想为不支持的语言添加高亮，可以通过加载该语言的语法文件实现。 import { readFileSync } from 'node:fs'\n\nexport default defineNuxtConfig({\n  content: {\n    build: {\n      markdown: {\n        highlight: {\n          langs: [\n            // 更多关于 Shiki 语言请参阅：https://shiki.style/guide/load-lang\n            JSON.parse(\n              readFileSync('./shiki/languages/gdscript.tmLanguage.json', 'utf-8'),\n            ),\n          ]\n        }\n      }\n    }\n  }\n}) 更多关于添加语言信息，请参阅 Shiki 文档。",{"id":2252,"title":2253,"titles":2254,"content":2255,"level":411},"/docs/getting-started/configuration#pathmeta","pathMeta",[16,2223],"内容模块使用文件路径生成 slug、默认标题和内容排序，您可以通过 pathMeta 选项自定义此行为。",{"id":2257,"title":2258,"titles":2259,"content":2260,"level":461},"/docs/getting-started/configuration#pathmetaforceleadingslash","pathMeta.forceLeadingSlash",[16,2223,2253],"如果设置为 true，路径将强制添加前置斜杠。默认值为 true。",{"id":2262,"title":2263,"titles":2264,"content":2265,"level":461},"/docs/getting-started/configuration#pathmetaslugifyoptions","pathMeta.slugifyOptions",[16,2223,2253],"内容模块使用 slugify 生成 slug，您可以通过此选项自定义 slugify 行为。 更多信息请查看 slugify options。",{"id":2267,"title":2268,"titles":2269,"content":2270,"level":411},"/docs/getting-started/configuration#transformers","transformers",[16,2223],"Nuxt Content 为每种内容类型提供特定的转换器，用于解析原始内容并准备查询和渲染。通过此选项，您可以定义自定义转换器以支持新内容类型或增强支持的内容类型功能。 export default defineNuxtConfig({\n  content: {\n    build: {\n      transformers: [\n        '~/transformers/title-suffix',\n      ],\n    },\n  },\n})\nimport { defineTransformer } from '@nuxt/content'\n\nexport default defineTransformer({\n  name: 'title-suffix',\n  extensions: ['.md'],\n  transform(file) {\n    return {\n      ...file,\n      title: file.title + ' (suffix)',\n    }\n  },\n}) 更多关于转换器内容，请参阅 Transformers 文档。",{"id":2272,"title":2273,"titles":2274,"content":2275,"level":343},"/docs/getting-started/configuration#database","database",[16],"默认情况下，Nuxt Content 使用本地 SQLite 数据库存储和查询内容。如果您想使用其他数据库，或计划部署到 Cloudflare Workers，可修改此选项。 以下是支持的数据库适配器列表：",{"id":2277,"title":2278,"titles":2279,"content":2280,"level":411},"/docs/getting-started/configuration#sqlite","SQLite",[16,2273],"如果想更改默认数据库位置并移动到其他地方，可使用 sqlite 适配器。这是 database 选项的默认值。根据运行环境，使用不同的 sqlite 适配器（Node：better-sqlite-3，Bun：bun:sqlite）。 export default defineNuxtConfig({\n  content: {\n    database: {\n      type: 'sqlite',\n      filename: 'SQLITE_DB_LOCATION'\n    }\n  }\n})",{"id":2282,"title":2283,"titles":2284,"content":2285,"level":411},"/docs/getting-started/configuration#d1","D1",[16,2273],"如果计划将应用部署到 Cloudflare Workers，需要使用 d1 数据库适配器。在 Cloudflare 控制面板创建 d1 绑定，并填写 bindingName 字段。 export default defineNuxtConfig({\n  content: {\n    database: {\n      type: 'd1',\n      bindingName: 'CF_BINDING_NAME'\n    }\n  }\n})",{"id":2287,"title":2288,"titles":2289,"content":2290,"level":411},"/docs/getting-started/configuration#postgres","Postgres",[16,2273],"如果计划使用 PostgreSQL 数据库部署应用，需要使用 postgres 数据库适配器。 首先，确保安装 pg 包： npx npm i pg 然后，在 nuxt.config.ts 配置 postgres 适配器： export default defineNuxtConfig({\n  content: {\n    database: {\n      type: 'postgres',\n      url: process.env.POSTGRES_URL,\n      /* 其他 `pg` 选项 */\n    }\n  }\n})",{"id":2292,"title":2293,"titles":2294,"content":2295,"level":411},"/docs/getting-started/configuration#libsql","LibSQL",[16,2273],"如果计划使用 LibSQL 数据库部署应用，需要使用 libsql 数据库适配器。 首先，确保安装 @libsql/client 包： npx npm i @libsql/client 然后，在 nuxt.config.ts 配置 libsql 适配器： export default defineNuxtConfig({\n  content: {\n    database: {\n      type: 'libsql',\n      url: process.env.TURSO_DATABASE_URL,\n      authToken: process.env.TURSO_AUTH_TOKEN,\n    }\n  }\n}) 最流行的 LibSQL 托管服务是 Turso。",{"id":2297,"title":2298,"titles":2299,"content":2300,"level":343},"/docs/getting-started/configuration#renderer","renderer",[16],"配置内容渲染器。",{"id":2302,"title":2303,"titles":2304,"content":2305,"level":411},"/docs/getting-started/configuration#anchorlinks","anchorLinks",[16,2298],"{ h2: true, h3: true, h4: true }\ntype AnchorLinks = boolean | Record\u003C'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6', boolean> 控制锚点链接的生成，默认为 h2、h3 和 h4 标题生成锚点链接。 取值： false：禁用链接生成。true：为所有标题启用链接生成。",{"id":2307,"title":2308,"titles":2309,"content":2310,"level":411},"/docs/getting-started/configuration#alias","alias",[16,2298],"alias: {}\ntype Alias = Record\u003Cstring, string> 别名用于替换 markdown 组件，渲染自定义组件替代默认组件。 export default defineNuxtConfig({\n  content: {\n    renderer: {\n      alias: {\n        p: 'MyCustomParagraph'\n      }\n    }\n  }\n})",{"id":2312,"title":2313,"titles":2314,"content":2315,"level":343},"/docs/getting-started/configuration#watch","watch",[16],"watch: {\n  enabled: true,\n  port: 4000,\n  showURL: false\n} 配置开发环境中的内容热重载。 取值： enabled：启用/禁用热重载。port：WebSocket 服务器使用的端口。showURL：切换开发服务器启动消息中是否显示 URL。 Nuxt Content 使用 listhen 提供本地开发服务器。更多信息请查阅 listhen 文档。 观察器为开发特性，生产环境不会包含。 export default defineNuxtConfig({\n  content: {\n    watch: {\n      port: 4000,\n      showURL: true\n    }\n  }\n})\nexport default defineNuxtConfig({\n  content: {\n    watch: {\n      enabled: false\n    }\n  }\n})",{"id":2317,"title":2318,"titles":2319,"content":2320,"level":343},"/docs/getting-started/configuration#preview","preview",[16],"启用 预览 API 启用此项可在 Nuxt Studio 上实现实时预览。 取值： dev：在开发模式启用api：激活预览模式并设置链接的 API preview: {\n  api: 'https://api.nuxt.studio',\n}",{"id":2322,"title":2323,"titles":2324,"content":2325,"level":343},"/docs/getting-started/configuration#experimental","experimental",[16],"尚未稳定的实验性功能。",{"id":2327,"title":2328,"titles":2329,"content":2330,"level":411},"/docs/getting-started/configuration#experimentalsqliteconnector","experimental.sqliteConnector",[16,2323],"SQLite connectors have limitations in different environments. Some work in serverless environments, while others do not. Nuxt Content supports three different SQLite connectors to cover all environments: better-sqlite3: Works in all Node environments, GitHub CI, Vercel CI and production, Cloudflare CI pipelines, etc. (Does not work in WebContainers and StackBlitz)sqlite3: Works in Node environments, GitHub CI, and StackBlitz. (Does not work in Vercel or Cloudflare)native: As of Node.js v22.5.0, the node:sqlite module is available natively in Node.js. This connector works in all Node environments with Node.js version 22.5.0 or newer. export default defineNuxtConfig({\n  content: {\n    experimental: { sqliteConnector: 'native' },\n  },\n});",{"id":2332,"title":2333,"titles":2334,"content":2335,"level":411},"/docs/getting-started/configuration#experimentalnativesqlite-deprecated-use-sqliteconnector","experimental.nativeSqlite (deprecated, use sqliteConnector)",[16,2323],"从 Node.js v22.5.0 开始，Node.js 原生支持 node:sqlite 模块。\n这允许 Nuxt Content 在不依赖外部包的情况下使用 SQLite 作为数据库。 export default defineNuxtConfig({\n  content: {\n    experimental: { nativeSqlite: true },\n  },\n}); 此功能仅在 Node.js v22.5.0 及以上版本可用。在较旧版本启用此选项不会生效。 html pre.shiki code .s7zQu, html code.shiki .s7zQu{--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-default:#89DDFF;--shiki-default-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic}html pre.shiki code .s2Zo4, html code.shiki .s2Zo4{--shiki-light:#6182B8;--shiki-default:#82AAFF;--shiki-dark:#82AAFF}html pre.shiki code .sTEyZ, html code.shiki .sTEyZ{--shiki-light:#90A4AE;--shiki-default:#EEFFFF;--shiki-dark:#BABED8}html pre.shiki code .sMK4o, html code.shiki .sMK4o{--shiki-light:#39ADB5;--shiki-default:#89DDFF;--shiki-dark:#89DDFF}html pre.shiki code .swJcz, html code.shiki .swJcz{--shiki-light:#E53935;--shiki-default:#F07178;--shiki-dark:#F07178}html pre.shiki code .sHwdD, html code.shiki .sHwdD{--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-default:#546E7A;--shiki-default-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic}html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .sBMFI, html code.shiki .sBMFI{--shiki-light:#E2931D;--shiki-default:#FFCB6B;--shiki-dark:#FFCB6B}html pre.shiki code .sbssI, html code.shiki .sbssI{--shiki-light:#F76D47;--shiki-default:#F78C6C;--shiki-dark:#F78C6C}html pre.shiki code .spNyl, html code.shiki .spNyl{--shiki-light:#9C3EDA;--shiki-default:#C792EA;--shiki-dark:#C792EA}html pre.shiki code .sfNiH, html code.shiki .sfNiH{--shiki-light:#FF5370;--shiki-default:#FF9CAC;--shiki-dark:#FF9CAC}html pre.shiki code .sfazB, html code.shiki .sfazB{--shiki-light:#91B859;--shiki-default:#C3E88D;--shiki-dark:#C3E88D}html pre.shiki code .sHdIc, html code.shiki .sHdIc{--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-default:#EEFFFF;--shiki-default-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic}",{"id":21,"title":20,"titles":2337,"content":2338,"level":310},[],"如何从 v2 迁移到 v3 Nuxt Content v3 已经从头重建，带来了一个具有增强功能的新库。虽然我们设计了与 Content v2 类似的概念和组件，但破坏性变更是不可避免的。 别担心，你不需要修改你的内容文件。我们确保 Content v3 以与 Content v2 相同的方式处理内容。",{"id":2340,"title":2341,"titles":2342,"content":303,"level":343},"/docs/getting-started/migration#变更","变更",[20],{"id":2344,"title":2345,"titles":2346,"content":2347,"level":411},"/docs/getting-started/migration#vue-工具","Vue 工具",[20,2341],"queryContent() API 被新的 queryCollection() 替代 新 API 基于 SQL，内容查询发生在特定的集合中。 fetchContentNavigation() API 被新的 queryCollectionNavigation() 替代Surroundings （周边）现在有自己的独立 API：queryCollectionItemSurroundings()放弃了文档驱动模式：Markdown 文件将不再自动转换为 Nuxt 页面，你需要自己创建页面，查看此部分了解如何创建。移除 useContent() 组合函数searchContent() 被新的 queryCollectionSearchSections API 取代可以方便地使用 queryCollectionSearchSections API 实现全文搜索，查看此部分了解如何使用",{"id":2349,"title":96,"titles":2350,"content":2351,"level":411},"/docs/getting-started/migration#组件",[20,2341],"所有内容应使用 \u003CContentRenderer> 组件渲染。\u003CContentDoc>、\u003CContentList>、\u003CContentNavigation> 和 \u003CContentQuery> 组件在 v3 中被移除。\u003CContentSlot> 和 \u003CMDCSlot> 组件在 v3 中不再支持。组件可以直接使用 Vue 原生的 \u003Cslot> 组件。 \u003CContentSlot> 和 \u003CMDCSlot> 最初用于在渲染前操作内容并移除 slot 内容的包裹段落。此取消包裹行为现在通过 \u003Cslot> 组件上的 mdc-unwrap 属性支持。例如：\u003Cslot mdc-unwrap=\"p\" /> 放置在 components/content 目录下的组件不再自动注册为全局组件。如果你使用动态渲染来渲染这些组件（即在 markdown 文件外部渲染），你必须在 Nuxt 应用中手动注册它们。详细操作请查看 Nuxt - 自定义组件目录文档。",{"id":2353,"title":35,"titles":2354,"content":2355,"level":411},"/docs/getting-started/migration#类型",[20,2341],"import type { NavItem } from '@nuxt/content/dist/runtime/types' 替换为 import type { ContentNavigationItem } from '@nuxt/content'",{"id":2357,"title":2358,"titles":2359,"content":2360,"level":411},"/docs/getting-started/migration#通用","通用",[20,2341],"_dir.yml 文件重命名为 .navigation.yml模块选项中不再有 source 选项，你需要在 content.config.ts 中为你的集合定义多个源。文档中的 ._path 现在重命名为 .path，同样所有带 _ 前缀的内部字段被移除或重命名。移除 useContentHelpers()模块默认不忽略点文件，若需忽略可在集合源的 exclude 选项中添加 ignore: ['**/.*']。由于 SQL 限制，排序现在使用字母顺序而非数字顺序。更多信息请查看文件排序部分。模块选项相较 v2 有所更改，详情请查看配置页面。",{"id":2362,"title":2363,"titles":2364,"content":2365,"level":411},"/docs/getting-started/migration#nuxt-studio-集成","Nuxt Studio 集成",[20,2341],"studio 模块 已被弃用，新的通用 Preview API 已直接集成到 Nuxt Content 中，可从依赖和 nuxt.config.ts 的模块中移除 @nuxthq/studio 包。只需在 Nuxt 配置文件中启用预览模式并绑定 Studio API。 export default defineNuxtConfig({\n  content: {\n    preview: {\n      api: 'https://api.nuxt.studio'\n    }\n  },\n}) 为了让 app 配置文件能够在 Studio 中保持可更新，只需将 nuxt.schema.ts 文件中的辅助函数导入从 @nuxthq/studio/theme 更新为 @nuxt/content/preview。",{"id":2367,"title":2368,"titles":2369,"content":2370,"level":343},"/docs/getting-started/migration#在-v3-实现文档驱动模式","在 v3 实现文档驱动模式",[20],"在 Content v3 中实现文档驱动模式非常简单。你只需在 Nuxt 中创建一个通配页面，并基于路由路径获取内容。 \u003Cscript lang=\"ts\" setup>\nconst route = useRoute()\nconst { data: page } = await useAsyncData(route.path, () => {\n  return queryCollection('content').path(route.path).first()\n})\n\u003C/script>\n\n\u003Ctemplate>\n  \u003Cdiv>\n    \u003Cheader>\u003C!-- ... -->\u003C/header>\n\n    \u003CContentRenderer v-if=\"page\" :value=\"page\" />\n\n    \u003Cfooter>\u003C!-- ... -->\u003C/footer>\n  \u003C/div>\n\u003C/template>",{"id":2372,"title":2373,"titles":2374,"content":2375,"level":343},"/docs/getting-started/migration#将-querycontent-转换为-querycollections","将 queryContent 转换为 queryCollections",[20],"如上所述，queryContent 被基于新的集合的 queryCollection 取代。两者主要有两个区别： queryCollection 构建的是 SQL 数据库的查询。queryCollection 只在指定的集合内搜索。你需要知道集合的名称（配置中的键名）。 // Content v2\nconst v2Query = await queryContent(route.path).findOne()\n// Content v3 - 不要忘记在 `content.config.ts` 中创建 `content` 集合\nconst v3Query = await queryCollection('content').path(route.path).first() // Content v2\nconst v2Query = await queryContent()\n  .where({ path: /^\\/hello\\/.*/ })\n  .find()\n// Content v3 - 不要忘记在 `content.config.ts` 中创建 `content` 集合\nconst v3Query = await queryCollection('content')\n  .where('path', 'LIKE', '/hello%')\n  .first() 查看专门关于集合的章节以获取更多信息",{"id":2377,"title":2378,"titles":2379,"content":2380,"level":343},"/docs/getting-started/migration#转换-querycontentfindsurround","转换 queryContent().findSurround()",[20],"Surround 现在有了自己独立的 API。 const targetPath = '/docs'\n\n// Content v2\nconst v2Surround = await queryContent(targetPath)\n  .only(['title', 'description', 'navigation'])\n  .findSurround(withoutTrailingSlash(route.path))\n\n// Content v3 - 不要忘记在 `content.config.ts` 中创建 `content` 集合\nconst v3Surround = await queryCollectionItemSurroundings(\n  'content',\n  targetPath,\n  {\n    fields: ['title', 'description', 'navigation']\n  }\n) 查看专门章节以获取更多关于 Surround 的信息",{"id":2382,"title":2383,"titles":2384,"content":2385,"level":343},"/docs/getting-started/migration#合并-prosepreprosecode-和-prosecodeinline-组件","合并 ProsePre、ProseCode 和 ProseCodeInline 组件",[20],"许多 ProsePre 组件是 ProseCode 组件的轻量包装。我们将这三个组件整合成两个组件。现在 ProsePre 与多行代码块没有区别。 MDC 现在会将单个反引号 ` 映射并解析为 ProseCode，而非 ProseCodeInline。MDC 现在会将以三个反引号 ``` 开始的代码块映射并解析为 ProsePre 组件。 建议更改： 将现有的 ProseCode 逻辑迁移到 ProsePre将你的 ProseCodeInline 组件重命名为 ProseCode",{"id":2387,"title":2388,"titles":2389,"content":2390,"level":343},"/docs/getting-started/migration#_diryml-文件重命名为-navigationyml","_dir.yml 文件重命名为 .navigation.yml",[20],"在 Content v3 中，我们将 _dir.yml 重命名为 .navigation.yml，该新名称更好地反映了这些文件的作用。\n模块使用这些文件收集目录信息以生成导航。 请注意，为了让模块能访问这些文件，你应该以包含这些文件的方式定义你的集合源，例如使用 source: '**' 或 source: '**/*.{md|yml}' 会包含这些文件，而 source: '**/*.md' 则不会。",{"id":2392,"title":2393,"titles":2394,"content":2395,"level":343},"/docs/getting-started/migration#忽略点文件","忽略点文件",[20],"默认情况下，Content v3 不忽略点文件。如果你想忽略它们，可以在集合源的 exclude 选项中添加 ignore: ['**/.*']。 defineCollection({\n  source: {\n    include: '**',\n    exclude: ['**/.*']\n  }\n}) 注意，上述模式也会从集合中排除 .navigation.yml 文件。如果你使用 .navigation.yml 并希望保留它们，可以使用 **/.(!(navigation.yml)) 模式来排除所有点文件但保留 .navigation.yml。 defineCollection({\n  source: {\n    include: '**',\n    exclude: ['**/.!(navigation.yml)']\n  }\n}) html pre.shiki code .s7zQu, html code.shiki .s7zQu{--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-default:#89DDFF;--shiki-default-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic}html pre.shiki code .s2Zo4, html code.shiki .s2Zo4{--shiki-light:#6182B8;--shiki-default:#82AAFF;--shiki-dark:#82AAFF}html pre.shiki code .sTEyZ, html code.shiki .sTEyZ{--shiki-light:#90A4AE;--shiki-default:#EEFFFF;--shiki-dark:#BABED8}html pre.shiki code .sMK4o, html code.shiki .sMK4o{--shiki-light:#39ADB5;--shiki-default:#89DDFF;--shiki-dark:#89DDFF}html pre.shiki code .swJcz, html code.shiki .swJcz{--shiki-light:#E53935;--shiki-default:#F07178;--shiki-dark:#F07178}html pre.shiki code .sfazB, html code.shiki .sfazB{--shiki-light:#91B859;--shiki-default:#C3E88D;--shiki-dark:#C3E88D}html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .spNyl, html code.shiki .spNyl{--shiki-light:#9C3EDA;--shiki-default:#C792EA;--shiki-dark:#C792EA}html pre.shiki code .sHwdD, html code.shiki .sHwdD{--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-default:#546E7A;--shiki-default-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic}",{"id":32,"title":2397,"titles":2398,"content":2399,"level":310},"定义内容集合",[],"了解如何在 Nuxt 应用中定义和配置内容集合。 Nuxt Content 模块会自动解析位于 Nuxt 应用根目录下 content/ 文件夹中的所有内容文件。此设置允许你自由地组织文件夹结构，以满足项目需求。 为了更好地组织内容，你可以使用内容集合 (Content Collections)，它们帮助你更有效地分类和管理内容。这些集合在 content.config.ts 文件中定义。 如果没有 content.config.ts 文件，内容文件夹中的所有文件都会被默认解析和导入。但一旦添加了配置文件，只有符合集合中指定路径模式的文件才会被导入。",{"id":2401,"title":2402,"titles":2403,"content":2404,"level":343},"/docs/collections/define#什么是内容集合","什么是内容集合？",[2397],"内容集合是 Nuxt Content 项目中组织相关内容的方式。它们提供了一种结构化方法来管理内容，使查询、展示和维护网站数据更加便捷。 关键特性包括： 逻辑分组：将相似内容归为一类，如博客文章、产品页面或文档共享配置：对集合内所有条目应用通用设置和验证优化查询：高效获取和筛选相关内容项自动类型推断：在开发环境中获得类型安全和自动补全灵活结构：按内容类型、类别或任何适合你的逻辑分组组织集合",{"id":2406,"title":1934,"titles":2407,"content":2408,"level":343},"/docs/collections/define#定义集合",[2397],"在项目根目录创建一个 content.config.ts 文件。这个特殊文件用于配置你的集合数据库、工具类型和内容处理。 以下是一个基础示例： import { defineCollection, defineContentConfig } from '@nuxt/content'\n\nexport default defineContentConfig({\n  collections: {\n    docs: defineCollection({\n      // Specify the type of content in this collection\n      type: 'page',\n      // Load every file inside the `content` directory\n      source: '**',\n    })\n  }\n}) 目前，一个文档设计为仅归属一个集合。如果同一文件被多个集合引用，实时重新加载功能将无法正常工作。为避免此问题，建议使用 exclude 属性，通过合适的正则表达式显式排除文档在其他集合中出现。该话题仍在此 issue 中讨论中：nuxt/content#2966。",{"id":2410,"title":2411,"titles":2412,"content":2413,"level":411},"/docs/collections/define#集合模式-schema","集合模式 (Schema)",[2397,1934],"模式用于强制集合内数据的一致性，并作为 TypeScript 类型的唯一来源。 除内置字段外，你还可以通过为集合添加 schema 属性，利用 zod 模式定义自定义模式： import { defineCollection, defineContentConfig, z } from '@nuxt/content'\n\nexport default defineContentConfig({\n  collections: {\n    blog: defineCollection({\n      type: 'page',\n      source: 'blog/*.md',\n      // Define custom schema for docs collection\n      schema: z.object({\n        tags: z.array(z.string()),\n        image: z.string(),\n        date: z.date()\n      })\n    })\n  }\n}) @nuxt/content 暴露了一个 z 对象，包含一组用于常见数据类型的 Zod 模式。完整文档请查看 Zod 的 README，了解它的工作原理及可用特性。 你可以定义任意数量的集合，以组织不同类型的内容。",{"id":2415,"title":2416,"titles":2417,"content":2418,"level":343},"/docs/collections/define#查询集合","查询集合",[2397],"使用 queryCollection 工具从集合中获取一个或所有内容项： \u003Cscript setup lang=\"ts\">\nconst { data: posts } = await useAsyncData('blog', () => queryCollection('blog').all())\n\u003C/script>\n\n\u003Ctemplate>\n  \u003Cdiv>\n    \u003Ch1>博客\u003C/h1>\n    \u003Cul>\n      \u003Cli v-for=\"post in posts\" :key=\"post.id\">\n        \u003CNuxtLink :to=\"post.path\">{{ post.title }}\u003C/NuxtLink>\n      \u003C/li>\n    \u003C/ul>\n  \u003C/div>\n\u003C/template> 了解更多关于可用查询选项的信息，请查阅我们的 queryCollections API 文档。",{"id":2420,"title":2421,"titles":2422,"content":2423,"level":343},"/docs/collections/define#definecollection","defineCollection()",[2397],"defineCollection 函数用于在内容配置中定义一个集合。它的 TypeScript 签名如下： function defineCollection(collection: Collection): DefinedCollection\n\ntype Collection = {\n  // 决定内容如何处理\n  type: 'page' | 'data'\n  // 指定内容位置\n  source?: string | CollectionSource\n  // 用于内容验证和类型定义的 Zod 模式\n  schema?: ZodObject\u003CT>\n} 了解更多关于集合类型的内容。 type CollectionSource = {\n  // 用于匹配内容的 glob 模式\n  include: string\n  // 路径前缀（仅适用于 'page' 类型）\n  prefix?: string\n  // 排除内容的 glob 模式数组\n  exclude?: string[]\n  // 匹配内容的根目录\n  cwd?: string\n  // 远程 git 仓库地址（例如：https://github.com/nuxt/content）\n  repository?: string\n  // 私有仓库的认证令牌（例如 GitHub 个人访问令牌）\n  authToken?: string\n} 了解更多关于集合资源的信息。 该函数返回已定义的集合对象。 html pre.shiki code .s7zQu, html code.shiki .s7zQu{--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-default:#89DDFF;--shiki-default-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic}html pre.shiki code .sMK4o, html code.shiki .sMK4o{--shiki-light:#39ADB5;--shiki-default:#89DDFF;--shiki-dark:#89DDFF}html pre.shiki code .sTEyZ, html code.shiki .sTEyZ{--shiki-light:#90A4AE;--shiki-default:#EEFFFF;--shiki-dark:#BABED8}html pre.shiki code .sfazB, html code.shiki .sfazB{--shiki-light:#91B859;--shiki-default:#C3E88D;--shiki-dark:#C3E88D}html pre.shiki code .s2Zo4, html code.shiki .s2Zo4{--shiki-light:#6182B8;--shiki-default:#82AAFF;--shiki-dark:#82AAFF}html pre.shiki code .swJcz, html code.shiki .swJcz{--shiki-light:#E53935;--shiki-default:#F07178;--shiki-dark:#F07178}html pre.shiki code .sHwdD, html code.shiki .sHwdD{--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-default:#546E7A;--shiki-default-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic}html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .spNyl, html code.shiki .spNyl{--shiki-light:#9C3EDA;--shiki-default:#C792EA;--shiki-dark:#C792EA}html pre.shiki code .sHdIc, html code.shiki .sHdIc{--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-default:#EEFFFF;--shiki-default-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic}html pre.shiki code .sBMFI, html code.shiki .sBMFI{--shiki-light:#E2931D;--shiki-default:#FFCB6B;--shiki-dark:#FFCB6B}",{"id":36,"title":2425,"titles":2426,"content":2427,"level":310},"集合类型",[],"了解你可以在 Nuxt Content 中定义的两种集合类型。 在 Nuxt Content 中，你可以根据集合文件的预期用途为每个集合指定一个类型。集合可以定义为 page（页面） 或 data（数据） 类型。 对于这两种类型，都会生成内置字段。每个集合都包含以下默认字段： id: 唯一内容标识符stem: 不带扩展名的文件路径（用于排序和定位）extension: 文件扩展名meta: 不在集合模式中定义的自定义字段",{"id":2429,"title":2430,"titles":2431,"content":2432,"level":343},"/docs/collections/types#页面类型","页面类型",[2425],"defineCollection({\n  source: '**/*.md',\n  type: 'page'\n}) 如果内容文件与网站页面之间是一对一关系，请使用 page 类型。",{"id":2434,"title":2435,"titles":2436,"content":2437,"level":411},"/docs/collections/types#路径生成","路径生成",[2425,2430],"Nuxt Content 会自动为集合中的每个文件生成路径，方便创建 URL 映射。 以下是基于文件结构生成的路径示例： 文件路径content/index.md/content/about.md/aboutcontent/blog/index.md/blogcontent/blog/hello.md/blog/hellocontent/1.guide/2.installation/guide/installation 你可以使用辅助函数 queryCollection('COLLECTION').path('PATH') 按特定路径检索内容。",{"id":2439,"title":2440,"titles":2441,"content":2442,"level":411},"/docs/collections/types#模式重写","模式重写",[2425,2430],"当你使用 page 类型时，Nuxt Content 会生成几个常用于网页的标准字段。这些字段提供结构性，并且 会自动 应用于集合的模式： path: 生成的路由路径title: 页面标题description: 页面描述seo: SEO 元数据（与 Nuxt 的 useSeoMeta 组合函数配合使用）body: 解析为 AST 的页面内容navigation: 页面导航配置（用于 queryCollectionNavigation） 对应应用的模式如下： path: z.string(),\n  title: z.string(),\n  description: z.string(),\n  seo: z.intersection(\n    z.object({\n      title: z.string().optional(),\n      description: z.string().optional(),\n      meta: z.array(z.record(z.string(), z.any())).optional(),\n      link: z.array(z.record(z.string(), z.any())).optional(),\n    }),\n    z.record(z.string(), z.any()),\n  ).optional().default({}),\n  body: z.object({\n    type: z.string(),\n    children: z.any(),\n    toc: z.any(),\n  }),\n  navigation: z.union([\n    z.boolean(),\n    z.object({\n      title: z.string(),\n      description: z.string(),\n      icon: z.string(),\n    }),\n  ]).default(true), 你可以通过在集合模式中定义这些字段来覆盖它们。",{"id":2444,"title":2445,"titles":2446,"content":2447,"level":343},"/docs/collections/types#数据类型","数据类型",[2425],"defineCollection({\n  source: 'authors/**.yml',\n  type: 'data'\n}) 数据类型适用于那些不直接对应网页，而是表示你可能想在应用中查询和展示的结构化数据的内容。 对于数据集合，你可以完全控制模式，自定义结构。 集合类型和文件扩展名之间没有严格的对应关系。例如，page 集合可以使用 Markdown、YAML 或 JSON 文件，data 集合也可以使用这些格式中的任何一种。",{"id":2449,"title":2450,"titles":2451,"content":2452,"level":343},"/docs/collections/types#文件排序","文件排序",[2425],"对于这两种类型，你可能希望控制列表中的显示顺序。通过在文件和目录名称中使用数字前缀来指定顺序。Nuxt Content 会使用这些数字对内容列表进行排序。 Nuxt Content 使用字母顺序进行排序，因此如果需要使用数字顺序，单数字前请加 0 前缀。例如，不加 0 前缀时，10.foo.md 会排在 2.bar.md 前面。 content/\n  1.frameworks/\n    1.vue.md\n    2.nuxt.md\n    ...\n  2.examples/\n    01.nuxthub.md\n    02.vercel.md\n    03.netlify.md\n    04.heroku.md\n    ...\n    10.cloudflare.md\n    index.md 数字和文件名之间请使用 . 字符分隔。使用其他分隔符将无效。 html pre.shiki code .s2Zo4, html code.shiki .s2Zo4{--shiki-light:#6182B8;--shiki-default:#82AAFF;--shiki-dark:#82AAFF}html pre.shiki code .sTEyZ, html code.shiki .sTEyZ{--shiki-light:#90A4AE;--shiki-default:#EEFFFF;--shiki-dark:#BABED8}html pre.shiki code .sMK4o, html code.shiki .sMK4o{--shiki-light:#39ADB5;--shiki-default:#89DDFF;--shiki-dark:#89DDFF}html pre.shiki code .swJcz, html code.shiki .swJcz{--shiki-light:#E53935;--shiki-default:#F07178;--shiki-dark:#F07178}html pre.shiki code .sfazB, html code.shiki .sfazB{--shiki-light:#91B859;--shiki-default:#C3E88D;--shiki-dark:#C3E88D}html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .sBMFI, html code.shiki .sBMFI{--shiki-light:#E2931D;--shiki-default:#FFCB6B;--shiki-dark:#FFCB6B}html pre.shiki code .sfNiH, html code.shiki .sfNiH{--shiki-light:#FF5370;--shiki-default:#FF9CAC;--shiki-dark:#FF9CAC}",{"id":40,"title":2454,"titles":2455,"content":2456,"level":310},"集合来源",[],"了解如何在 Nuxt Content 集合中导入您的文件。 Nuxt Content 提供了多种方式将内容文件导入到您的集合中。您可以在 defineCollection 中通过 source 属性配置源： import { defineCollection, defineContentConfig } from '@nuxt/content'\n\nexport default defineContentConfig({\n  collections: {\n    docs: defineCollection({\n      source: '**',\n      type: 'page'\n    })\n  }\n})",{"id":2458,"title":2459,"titles":2460,"content":2461,"level":343},"/docs/collections/sources#source","source",[2454],"source 属性可以定义为字符串（遵循 glob 模式）或对象，便于更详细地配置目标目录以及内容文件夹内的文件。 示例： source: '**' 包括内容目录及其子目录中的所有文件。source: '**/*.md' 包括内容目录及其子目录中的所有 Markdown 文件。source: 'docs/**/*.yml' 包括 content/docs 目录及其子目录中的所有 YML 文件。source: '**/*.{json,yml}' 包括内容目录及所有子目录中的 JSON 或 YML 文件。source: '*.json' 仅包括内容目录中直接包含的 JSON 文件，不包括子目录。",{"id":2463,"title":2464,"titles":2465,"content":2466,"level":411},"/docs/collections/sources#include必填","include（必填）",[2454,2459],"目标仓库及内容文件夹中文件的 glob 模式。",{"id":2468,"title":2469,"titles":2470,"content":2471,"level":411},"/docs/collections/sources#exclude","exclude",[2454,2459],"用于排除导入内容的 glob 模式。",{"id":2473,"title":2474,"titles":2475,"content":2476,"level":411},"/docs/collections/sources#prefix","prefix",[2454,2459],"此配置仅针对 page 类型，且内容文件与页面为一对一关系时生效。 它表示网站中对应页面的路径前缀（基础 URL）。 prefix 必须以 / 开头。 默认情况下，模块会提取 source（或 source.include）的静态前缀，并将其用作内容路径的前缀。例如，如果你定义了 /en/** 作为源，模块会自动将 prefix 填充为 /en。你也可以手动提供一个前缀来覆盖此行为。通过将集合源中的 prefix 设置为 '/' 可以移除前缀。 defineCollection({\n  type: \"page\",\n  source: {\n    include: \"en/**\",\n    exclude: [\"en/index.md\"],\n    prefix: '/'\n  }\n})",{"id":2478,"title":2479,"titles":2480,"content":2481,"level":411},"/docs/collections/sources#cwd","cwd",[2454,2459],"匹配内容的根目录。 示例： 如果想要包含内容目录以外文件夹中的文件，可将该文件夹的绝对路径赋值给 cwd 属性。 source: {\n  cwd: path.resolve('packages/my-pkg/docs'),\n  include: '**/*.md',\n}",{"id":2483,"title":2484,"titles":2485,"content":2486,"level":411},"/docs/collections/sources#repository","repository",[2454,2459],"代表远程 git 仓库 URL 的外部源（例如，https://github.com/nuxt/content）。 定义外部源时必须同时定义 include 选项。include 模式对于模块识别集合需要使用的文件至关重要。 import { defineCollection, defineContentConfig } from '@nuxt/content'\n\nexport default defineContentConfig({\n  collections: {\n    docs: defineCollection({\n      type: 'page',\n      source: {\n        repository: 'https://github.com/nuxt/content',\n        include: 'docs/content/**',\n      },\n    })\n  }\n})",{"id":2488,"title":2489,"titles":2490,"content":2491,"level":411},"/docs/collections/sources#authtoken","authToken",[2454,2459],"私有仓库的认证令牌（例如，GitHub 个人访问令牌）。 切勿将认证令牌或凭据直接提交到代码库。请使用环境变量或其他安全方式在运行时提供这些值。",{"id":2493,"title":2494,"titles":2495,"content":2496,"level":411},"/docs/collections/sources#authbasic","authBasic",[2454,2459],"私有仓库的基础认证（例如，Bitbucket 用户名和密码）。 defineCollection({\n  type: 'page',\n  source: {\n    repository: 'https://bitbucket.org/username/repo',\n    authBasic: {\n      username: 'username',\n      password: 'password',\n    },\n  },\n}) html pre.shiki code .s7zQu, html code.shiki .s7zQu{--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-default:#89DDFF;--shiki-default-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic}html pre.shiki code .sMK4o, html code.shiki .sMK4o{--shiki-light:#39ADB5;--shiki-default:#89DDFF;--shiki-dark:#89DDFF}html pre.shiki code .sTEyZ, html code.shiki .sTEyZ{--shiki-light:#90A4AE;--shiki-default:#EEFFFF;--shiki-dark:#BABED8}html pre.shiki code .sfazB, html code.shiki .sfazB{--shiki-light:#91B859;--shiki-default:#C3E88D;--shiki-dark:#C3E88D}html pre.shiki code .s2Zo4, html code.shiki .s2Zo4{--shiki-light:#6182B8;--shiki-default:#82AAFF;--shiki-dark:#82AAFF}html pre.shiki code .swJcz, html code.shiki .swJcz{--shiki-light:#E53935;--shiki-default:#F07178;--shiki-dark:#F07178}html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .sBMFI, html code.shiki .sBMFI{--shiki-light:#E2931D;--shiki-default:#FFCB6B;--shiki-dark:#FFCB6B}",{"id":44,"title":2498,"titles":2499,"content":2500,"level":310},"模式验证器",[],"使用你喜欢的验证器定义集合模式，并实现完整类型安全。 Nuxt Content 支持使用多种验证器定义集合模式。开箱即用的支持包括流行库如 Zod v3 / v4 和 Valibot（示例见下文）。该系统具有可扩展性，也可以通过 JSON Schema 适配器支持其他验证器。模式用于强制数据一致性，并驱动生成的类型和 Studio 表单。",{"id":2502,"title":2503,"titles":2504,"content":303,"level":343},"/docs/collections/validators#使用-zod-v3","使用 Zod v3",[2498],{"id":2506,"title":12,"titles":2507,"content":2508,"level":411},"/docs/collections/validators#安装",[2498,2503],"pnpm add -D zod zod-to-json-schema\n# 或者\nnpm i -D zod zod-to-json-schema 建议直接从 zod 导入 z。 import { defineContentConfig, defineCollection, property } from '@nuxt/content'\nimport { z } from 'zod' // 如果你的环境暴露了此子路径，也可以用 'zod/v3'\n\nexport default defineContentConfig({\n  collections: {\n    blog: defineCollection({\n      type: 'page',\n      source: 'blog/*.md',\n      schema: z.object({\n        title: z.string(),\n        description: z.string().optional(),\n        date: z.date(),\n        draft: z.boolean().default(false),\n        tags: z.array(z.string()).optional(),\n        image: z.object({\n          src: property(z.string()).editor({ input: 'media' }),\n          alt: z.string()\n        })\n      })\n    })\n  }\n}) 日期在内部以 ISO 字符串格式序列化（JSON Schema 中 format: date-time）。 @nuxt/content 重新导出的 z 已废弃，将在未来版本中移除。请改为从 zod（或 zod/v3）导入 z。",{"id":2510,"title":2511,"titles":2512,"content":2513,"level":343},"/docs/collections/validators#使用-zod-v4","使用 Zod v4",[2498],"Zod v4 提供原生的 JSON Schema 导出，无需依赖 zod-to-json-schema。",{"id":2515,"title":12,"titles":2516,"content":2517,"level":411},"/docs/collections/validators#安装-1",[2498,2511],"pnpm add -D zod\n# 或者\nnpm i -D zod import { defineContentConfig, defineCollection, property } from '@nuxt/content'\nimport { z } from 'zod/v4'\n\nexport default defineContentConfig({\n  collections: {\n    docs: defineCollection({\n      type: 'page',\n      source: 'docs/**/*.md',\n      schema: z.object({\n        title: z.string(),\n        description: z.string().optional(),\n        updatedAt: z.date(),\n        draft: z.boolean().optional(),\n        tags: z.array(z.string()).optional(),\n        hero: z.object({\n          image: property(z.string()).editor({ input: 'media' }),\n          caption: z.string().optional()\n        })\n      })\n    })\n  }\n})",{"id":2519,"title":2520,"titles":2521,"content":2522,"level":343},"/docs/collections/validators#使用-valibot","使用 Valibot",[2498],"使用 Valibot 原语定义你的模式。",{"id":2524,"title":12,"titles":2525,"content":2526,"level":411},"/docs/collections/validators#安装-2",[2498,2520],"pnpm add -D valibot @valibot/to-json-schema\n# 或者\nnpm i -D valibot @valibot/to-json-schema import { defineContentConfig, defineCollection, property } from '@nuxt/content'\nimport { object, string, boolean, array, date, optional } from 'valibot'\n\nexport default defineContentConfig({\n  collections: {\n    docs: defineCollection({\n      type: 'page',\n      source: 'docs/**/*.md',\n      schema: object({\n        title: string(),\n        description: optional(string()),\n        updatedAt: date(),\n        draft: optional(boolean()),\n        tags: optional(array(string())),\n        hero: object({\n          image: property(string()).editor({ input: 'media' }),\n          caption: optional(string())\n        })\n      })\n    })\n  }\n})",{"id":2528,"title":2529,"titles":2530,"content":2531,"level":343},"/docs/collections/validators#如何选择验证器","如何选择验证器",[2498],"Zod v3：经过实战考验，生态丰富；通过重新导出的 z 提供优秀的开发体验。Valibot：轻量且性能优异；需自行从 valibot 导入。 只需安装并使用你需要的验证器。Nuxt Content 会自动检测已安装的支持的验证器。",{"id":2533,"title":2534,"titles":2535,"content":2536,"level":343},"/docs/collections/validators#对其他验证器的支持","对其他验证器的支持",[2498],"Nuxt Content 内部将集合模式转换为 JSON Schema Draft-07。如果你喜欢的验证器可以转换为 Draft-07（或有兼容的适配器），则可以支持。目前自动检测支持 Zod（v3 和 v4）和 Valibot。如果你希望得到对其他验证器的一级支持，可以考虑在 Nuxt Content 仓库 提交 issue 或 PR。",{"id":2538,"title":2539,"titles":2540,"content":2541,"level":343},"/docs/collections/validators#编辑器元数据可选","编辑器元数据（可选）",[2498],"你可以通过两个验证器的 property(...).editor({ ... }) 来丰富 Studio 字段。映射详情请参阅 Studio 文档。 了解编辑器元数据如何映射到 Studio 中的表单输入。 html pre.shiki code .sBMFI, html code.shiki .sBMFI{--shiki-light:#E2931D;--shiki-default:#FFCB6B;--shiki-dark:#FFCB6B}html pre.shiki code .sfazB, html code.shiki .sfazB{--shiki-light:#91B859;--shiki-default:#C3E88D;--shiki-dark:#C3E88D}html pre.shiki code .sHwdD, html code.shiki .sHwdD{--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-default:#546E7A;--shiki-default-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic}html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .s7zQu, html code.shiki .s7zQu{--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-default:#89DDFF;--shiki-default-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic}html pre.shiki code .sMK4o, html code.shiki .sMK4o{--shiki-light:#39ADB5;--shiki-default:#89DDFF;--shiki-dark:#89DDFF}html pre.shiki code .sTEyZ, html code.shiki .sTEyZ{--shiki-light:#90A4AE;--shiki-default:#EEFFFF;--shiki-dark:#BABED8}html pre.shiki code .s2Zo4, html code.shiki .s2Zo4{--shiki-light:#6182B8;--shiki-default:#82AAFF;--shiki-dark:#82AAFF}html pre.shiki code .swJcz, html code.shiki .swJcz{--shiki-light:#E53935;--shiki-default:#F07178;--shiki-dark:#F07178}html pre.shiki code .sfNiH, html code.shiki .sfNiH{--shiki-light:#FF5370;--shiki-default:#FF9CAC;--shiki-dark:#FF9CAC}",{"id":48,"title":2543,"titles":2544,"content":2545,"level":310},"从 Vue 组件继承 Schema",[],"使用 property().inherit() 将 Vue 组件的 props 复用为集合 Schema 的一部分。 你可以将 Vue 组件的 props 复用为集合 Schema 的一部分。这有助于保持内容模型与界面的一致，减少重复，并防止偏差。",{"id":2547,"title":2548,"titles":2549,"content":2550,"level":343},"/docs/collections/inherit-schema-from-component#工作原理","工作原理",[2543],"Nuxt Content 提供了一个 property() 辅助函数，用于增强你的验证器并添加以下功能： inherit(path)：用位于 path 的 Vue 组件推断出的 props JSON Schema 替换当前的对象 Schema 底层机制是，Nuxt Content 通过 nuxt-component-meta 读取组件的 props，并将其转换为 JSON Schema，然后合并到你的集合 Schema 中。",{"id":2552,"title":2553,"titles":2554,"content":2555,"level":343},"/docs/collections/inherit-schema-from-component#示例","示例",[2543],"import { defineContentConfig, defineCollection, z, property } from '@nuxt/content'\n\nexport default defineContentConfig({\n  collections: {\n    pages: defineCollection({\n      type: 'page',\n      source: '**/*.md',\n      schema: z.object({\n        // 复用本地组件的 props\n        hero: property(z.object({})).inherit('app/components/HeroSection.vue'),\n\n        // 复用依赖包中的组件 props（路径像导入一样解析）\n        button: property(z.object({})).inherit('@nuxt/ui/components/Button.vue')\n      })\n    })\n  }\n})",{"id":2557,"title":2558,"titles":2559,"content":2560,"level":343},"/docs/collections/inherit-schema-from-component#说明","说明",[2543],"inherit() 的参数会像模块路径一样解析。你可以传入相对于项目根目录的相对路径或包路径。inherit() 期望用在对象字段上（例如 property(z.object({}))）。支持嵌套使用：你可以将继承的对象放在其他对象或数组中；Nuxt Content 会递归替换 $content.inherit 标记。如果组件无法解析，Schema 会回退到原始的对象定义。 如果你需要在组件 props 基础上自定义输入框，可以将 inherit() 和 editor(...) 配合使用，从而获得更好的 Studio 表单体验。 html pre.shiki code .s7zQu, html code.shiki .s7zQu{--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-default:#89DDFF;--shiki-default-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic}html pre.shiki code .sMK4o, html code.shiki .sMK4o{--shiki-light:#39ADB5;--shiki-default:#89DDFF;--shiki-dark:#89DDFF}html pre.shiki code .sTEyZ, html code.shiki .sTEyZ{--shiki-light:#90A4AE;--shiki-default:#EEFFFF;--shiki-dark:#BABED8}html pre.shiki code .sfazB, html code.shiki .sfazB{--shiki-light:#91B859;--shiki-default:#C3E88D;--shiki-dark:#C3E88D}html pre.shiki code .s2Zo4, html code.shiki .s2Zo4{--shiki-light:#6182B8;--shiki-default:#82AAFF;--shiki-dark:#82AAFF}html pre.shiki code .swJcz, html code.shiki .swJcz{--shiki-light:#E53935;--shiki-default:#F07178;--shiki-dark:#F07178}html pre.shiki code .sHwdD, html code.shiki .sHwdD{--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-default:#546E7A;--shiki-default-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic}html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"id":59,"title":58,"titles":2562,"content":2563,"level":310},[],"在你的 Nuxt 应用中创建和查询 Markdown 文件，并使用 MDC 语法集成 Vue 组件。",{"id":2565,"title":2111,"titles":2566,"content":303,"level":343},"/docs/files/markdown#用法",[58],{"id":2568,"title":1934,"titles":2569,"content":2570,"level":411},"/docs/files/markdown#定义集合",[58,2111],"import { defineCollection, defineContentConfig, z } from '@nuxt/content'\n\nexport default defineContentConfig({\n  collections: {\n    blog: defineCollection({\n      type: 'page',\n      source: 'blog/*.md',\n      schema: z.object({\n        date: z.string()\n      })\n    })\n  }\n}) 了解更多关于 page 集合类型。",{"id":2572,"title":2573,"titles":2574,"content":2575,"level":411},"/docs/files/markdown#创建-md-文件","创建 .md 文件",[58,2111],"在 content/blog/ 目录中创建博客文章。 ---\ndate: 2020-11-11\n---\n\n# Foo\n\n这是 Foo 博客文章。\n---\ndate: 2024-12-12\n---\nHello\n我是 bar。很高兴认识你。",{"id":2577,"title":2578,"titles":2579,"content":2580,"level":411},"/docs/files/markdown#查询-markdown-文件","查询 Markdown 文件",[58,2111],"现在我们可以查询博客文章： // 获取 foo 文章\nconst fooPost = await queryCollection('blog').path('/blog/foo').first()\n\n// 查找所有文章\nconst allPosts = await queryCollection('blog').order('date', 'DESC').all()",{"id":2582,"title":2583,"titles":2584,"content":2585,"level":411},"/docs/files/markdown#显示-markdown","显示 Markdown",[58,2111],"要显示 Markdown 文件的内容，可以使用 \u003CContentRenderer> 组件。 \u003Cscript setup>\nconst slug = useRoute().params.slug\nconst { data: post } = await useAsyncData(`blog-${slug}`, () => {\n  return queryCollection('blog').path(`/blog/${slug}`).first()\n})\n\u003C/script>\n\n\u003Ctemplate>\n  \u003C!-- 以 Prose 和 Vue 组件渲染博客文章 -->\n  \u003CContentRenderer :value=\"post\" />\n\u003C/template> 阅读更多关于 \u003CContentRenderer> 组件和 Prose 组件。",{"id":2587,"title":2588,"titles":2589,"content":2590,"level":343},"/docs/files/markdown#frontmatter","Frontmatter",[58],"Frontmatter 是基于 Markdown 的 CMS 约定，用于为页面提供元数据，如描述或标题。在 Nuxt Content 中，frontmatter 使用 YAML 语法，采用 key: value 键值对形式。 这些数据在渲染内容时可用，可以存储你需要的任何信息。",{"id":2592,"title":2593,"titles":2594,"content":2595,"level":411},"/docs/files/markdown#语法","语法",[58,2588],"你可以在 content/ 目录的 Markdown 文件顶部，用 --- 标识符声明 frontmatter 块。 ---\ntitle: '页面标题'\ndescription: '页面的元描述'\n---\n\n\u003C!-- 页面内容 --> const home = await queryCollection('content').path('/').first()\n\nconsole.log(home.title)\n// => '页面标题'\nconsole.log(home.description)\n// => '页面的元描述'\nconsole.log(home.body)\n// => 页面内容的 AST 对象",{"id":2597,"title":2598,"titles":2599,"content":2600,"level":411},"/docs/files/markdown#原生参数","原生参数",[58,2588],"键类型默认值描述titlestring页面第一个 \u003Ch1>页面标题，也会被注入到元信息 (metas) 中descriptionstring页面第一个 \u003Cp>页面描述，将显示在标题下方并注入到元信息 (metas)navigationbooleantrue定义页面是否包含在 queryCollectionNavigation 的返回值中。 frontmatter 块中定义的额外参数需要在你的 schema 中定义（参见本页顶部示例中的 date 参数），才能用于查询。",{"id":2602,"title":2603,"titles":2604,"content":2605,"level":343},"/docs/files/markdown#mdc-语法","MDC 语法",[58],"我们创建了 MDC 语法来增强 Markdown，赋予你在 Markdown 中集成带有插槽和属性的 Vue 组件的能力。 安装 MDC VS Code 扩展，以获得 MDC 语法的正确语法高亮。",{"id":2607,"title":2608,"titles":2609,"content":2610,"level":411},"/docs/files/markdown#vue-组件","Vue 组件",[58,2603],"你可以在 Markdown 文件中使用任意 Vue 组件。 我们有一种特殊语法，使在 Markdown 文件中使用组件更方便。 ::component-name\n默认插槽内容\n:: 若你不使用 components/content/ 目录，Markdown 中使用的组件必须在你的 Nuxt 应用中标记为 global，详情请访问 Nuxt 3 文档。",{"id":2612,"title":2613,"titles":2614,"content":2615,"level":461},"/docs/files/markdown#块级组件","块级组件",[58,2603,2608],"块级组件是接受 Markdown 内容或其他组件作为插槽的组件。 组件必须至少包含一个 \u003Cslot /> 组件来接收格式化文本。 在 markdown 文件中，使用 :: 标识符调用组件。 ::card\n卡片的内容\n::\n\u003C!-- components/content/Card.vue -->\n\u003Ctemplate>\n  \u003Cdiv class=\"p-2 border bg-white dark:bg-black dark:border-gray-700 rounded\">\n    \u003Cslot />\n  \u003C/div>\n\u003C/template>\n卡片的内容",{"id":2617,"title":106,"titles":2618,"content":2619,"level":461},"/docs/files/markdown#插槽",[58,2603,2608],"组件的插槽可以接受内容或其他组件。 默认插槽 在块级组件内渲染顶级内容或通过 #default。具名插槽 使用 # 标识符来渲染对应内容。 ::hero\n我的页面标题\n\n#description\n这部分将在 `description` 插槽内渲染。\n::\n\u003Ctemplate>\n  \u003Csection>\n    \u003Ch1 class=\"text-4xl\">\n      \u003Cslot mdc-unwrap=\"p\" />\n    \u003C/h1>\n    \u003Cslot name=\"description\" />\n  \u003C/section>\n\u003C/template>\n我的页面标题这部分将在 description 插槽内渲染。 阅读更多关于 \u003Cslot /> 组件。 你可以在组件插槽内使用 Markdown：::my-title\n一个由组件 **渲染** 的 [富文本](/)。\n::\n\u003Ctemplate>\n  \u003Ch1 class=\"text-4xl\">\n    \u003Cslot mdc-unwrap=\"p\" />\n  \u003C/h1>\n\u003C/template>\n一个由组件 渲染 的 富文本。",{"id":2621,"title":2622,"titles":2623,"content":2624,"level":461},"/docs/files/markdown#props-属性","Props 属性",[58,2603,2608],"使用 MDC 传递 props 给组件，有两种方式。",{"id":2626,"title":2627,"titles":2628,"content":2629,"level":468},"/docs/files/markdown#行内方式","行内方式",[58,2603,2608,2622],"{} 标识符使用简洁的 key=value 语法向组件传递属性。 ::alert{type=\"warning\"}\n这是一个 **警告** 组件。\n::\n\u003Cscript setup>\nconst props = defineProps({ type: { type: String } })\n\nconst alertClass = computed(() => {\n  return {\n    warning: 'bg-orange-100 border-orange-200 dark:bg-orange-900 dark:border-orange-800',\n    info: 'bg-blue-100 border-blue-200 dark:bg-blue-900 dark:border-blue-800',\n    success: 'bg-green-100 border-green-200 dark:bg-green-900 dark:border-green-800',\n  }[props.type]\n})\n\u003C/script>\n\n\u003Ctemplate>\n  \u003Cdiv\n    class=\"text-black p-2 border dark:text-white rounded\"\n    :class=\"alertClass\"\n  >\n    \u003Cslot mdc-unwrap=\"p\" />\n  \u003C/div>\n\u003C/template>\n这是一个 警告 组件。 多个属性用空格分隔： ::alert{type=\"warning\" icon=\"exclamation-circle\"}\n出错了！\n:: v-bind 简写 : 也可用来绑定 frontmatter 中的属性值： ---\ntype: \"warning\"\n---\n\n::alert{:type=\"type\"}\n你的警告\n:: 如果要传递数组或对象作为属性给组件，可以将它们作为 JSON 字符串，属性键名前加冒号以自动解码 JSON 字符串。注意，这种情况下应使用单引号包裹字符串值，以便使用双引号传递有效的 JSON 字符串： ::dropdown{:items='[\"Nuxt\", \"Vue\", \"React\"]'}\n::\n::dropdown{:items='[1,2,3.5]'}\n::\n::chart{:options='{\"responsive\": true, \"scales\": {\"y\": {\"beginAtZero\": true}}}'}\n::",{"id":2631,"title":2632,"titles":2633,"content":2634,"level":468},"/docs/files/markdown#yaml-方式","YAML 方式",[58,2603,2608,2622],"YAML 方式用 --- 标识符声明逐行一个 prop，便于可读性。 ::icon-card\n---\nicon: IconNuxt\ndescription: 发挥 Nuxt 及其生态系统的全部力量。\ntitle: Nuxt 架构。\n---\n::\n\u003Cscript setup>\ndefineProps({\n  title: {\n    type: String,\n    default: '默认标题'\n  },\n  description: {\n    type: String,\n    default: '默认描述'\n  },\n  icon: {\n    type: String,\n    default: 'IconMarkdown'\n  }\n})\n\u003C/script>\n\n\u003Ctemplate>\n  \u003Cdiv class=\"p-6 border bg-white dark:bg-black dark:border-gray-700 rounded\">\n    \u003Ccomponent :is=\"icon\" class=\"w-20 h-20\" />\n    \u003Ch2 class=\"text-3xl font-semibold mb-2\">\n      {{ title }}\n    \u003C/h2>\n    \u003Cp>{{ description }}\u003C/p>\n  \u003C/div>\n\u003C/template>",{"id":2636,"title":2637,"titles":2638,"content":2639,"level":411},"/docs/files/markdown#属性-attributes","属性 (Attributes)",[58,2603],"属性对于高亮和修改段落部分内容很有用。语法与行内组件和 Markdown 链接语法非常相似。 可能的值包括所有命名属性、以 .class-name 形式的类名，以及以 #id-name 形式的 ID。 Hello [World]{style=\"color: green;\" .custom-class #custom-id}!\nHello World ! 除了 mdc 组件和 span，属性语法还适用于图像、链接、内联 code、*粗体* 和 _斜体_ 文本。 属性适用于：\n\n- [链接](#attributes){style=\"background-color: green;\"}, `代码`{style=\"color: cyan;\"},\n- _斜体_{style=\"background-color: yellow; color:black;\"} 和 **加粗**{style=\"background-color: lightgreen;\"} 文本。\n属性适用于：链接, 代码,斜体 和 加粗 文本。",{"id":2641,"title":2642,"titles":2643,"content":2644,"level":411},"/docs/files/markdown#绑定数据","绑定数据",[58,2603],"你可以使用 {{ $doc.variable || 'defaultValue' }} 语法在 Markdown 文档中绑定数据。这些值可以在文档顶部的 YAML frontmatter 中定义，在每个 MDC 组件内定义，或通过 \u003CContentRenderer> 组件的 data 属性注入。",{"id":2646,"title":2647,"titles":2648,"content":2649,"level":461},"/docs/files/markdown#在-yaml-中定义","在 YAML 中定义",[58,2603,2642],"---\ntitle: '页面标题'\ndescription: '页面元描述'\ncustomVariable: '自定义值'\n---\n\n# 标题是 {{ $doc.title }} ，customVariable 是 {{ $doc.customVariable || 'defaultValue' }}",{"id":2651,"title":2652,"titles":2653,"content":2654,"level":461},"/docs/files/markdown#在外部定义-contentrenderer","在外部定义 \u003CContentRenderer>",[58,2603,2642],"\u003Ctemplate>\n  \u003Cdiv>\n    \u003CContentRenderer :value=\"data\" :data=\"mdcVars\"/>\n    \u003Cbutton type=\"button\" v-on:click=\"mdcVars.name = 'Hugo'\">更改名称\u003C/button>\n  \u003C/div>\n\u003C/template>\n\n\u003Cscript setup lang=\"ts\">\nconst { data } = await useAsyncData(() => queryCollection('content').path('/test').first());\nconst mdcVars = ref({ name: 'Maxime'});\n\u003C/script> # 你好 {{ $doc.name || '世界' }}",{"id":2656,"title":2657,"titles":2658,"content":2659,"level":343},"/docs/files/markdown#prose-组件","Prose 组件",[58],"在 Nuxt Content 中，prose 表示由 Markdown 语法生成的 HTML 标签，如标题和链接。 每个 HTML 标签对应一个 Vue 组件，你可以根据需求覆盖它们，例如 \u003Cp> 对应 \u003CProseP>。 如果想定制 Prose 组件，建议的步骤如下： 查看原始的 组件源码。使用完全相同的 props。在你的 components/content/ 目录下，命名相同文件。根据需要定制 🚀。 请阅读 Prose 组件章节，获取完整的 Prose 参考。",{"id":2661,"title":2662,"titles":2663,"content":2664,"level":343},"/docs/files/markdown#代码高亮","代码高亮",[58],"Nuxt Content 使用 Shiki 实现代码高亮，主题与 VSCode 一致。 代码高亮同时适用于 ProsePre 和 ProseCode。 代码块的每一行数字存储在 line 属性中，便于单行标注与样式定制。 阅读 API 参考，了解如何配置或完全禁用语法高亮。",{"id":2666,"title":2667,"titles":2668,"content":2669,"level":343},"/docs/files/markdown#图片","图片",[58],"你可以将图片添加到你的 public 目录： content/\n  index.md\npublic/\n  image.png\nnuxt.config.ts\npackage.json 然后在 content 目录的 markdown 文件中这样使用： ![我的图片](/image.png)",{"id":2671,"title":2672,"titles":2673,"content":2674,"level":343},"/docs/files/markdown#摘要","摘要",[58],"内容摘要或概要可以通过使用 \u003C!--more--> 作为分隔符从内容中提取。 ---\ntitle: 介绍\n---\n\n学习如何使用 `@nuxt/content`。\n\n\u003C!--more-->\n\n更多分割线后的完整内容。 描述字段 (description) 会包含摘要内容，除非 frontmatter 中已定义。 如果文本中没有 \u003C!--more--> 分隔符，则摘要字段为未定义。 如果想使用摘要功能，应在集合 schema 中定义 excerpt 字段。const content = defineCollection({\n  type: 'page',\n  source: '**',\n  schema: z.object({\n    excerpt: z.object({\n      type: z.string(),\n      children: z.any(),\n    }),\n  }),\n})\n阅读关于 集合 schema 的更多内容。 示例变量会注入到文档中： {\n  \"excerpt\": Object,\n  \"body\": Object,\n  // ... 其他键\n} html pre.shiki code .s7zQu, html code.shiki .s7zQu{--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-default:#89DDFF;--shiki-default-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic}html pre.shiki code .sMK4o, html code.shiki .sMK4o{--shiki-light:#39ADB5;--shiki-default:#89DDFF;--shiki-dark:#89DDFF}html pre.shiki code .sTEyZ, html code.shiki .sTEyZ{--shiki-light:#90A4AE;--shiki-default:#EEFFFF;--shiki-dark:#BABED8}html pre.shiki code .sfazB, html code.shiki .sfazB{--shiki-light:#91B859;--shiki-default:#C3E88D;--shiki-dark:#C3E88D}html pre.shiki code .s2Zo4, html code.shiki .s2Zo4{--shiki-light:#6182B8;--shiki-default:#82AAFF;--shiki-dark:#82AAFF}html pre.shiki code .swJcz, html code.shiki .swJcz{--shiki-light:#E53935;--shiki-default:#F07178;--shiki-dark:#F07178}html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .sBMFI, html code.shiki .sBMFI{--shiki-light:#E2931D;--shiki-default:#FFCB6B;--shiki-dark:#FFCB6B}html pre.shiki code .sHwdD, html code.shiki .sHwdD{--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-default:#546E7A;--shiki-default-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic}html pre.shiki code .spNyl, html code.shiki .spNyl{--shiki-light:#9C3EDA;--shiki-default:#C792EA;--shiki-dark:#C792EA}html pre.shiki code .sHepR, html code.shiki .sHepR{--shiki-light:#39ADB5;--shiki-light-font-weight:bold;--shiki-default:#89DDFF;--shiki-default-font-weight:bold;--shiki-dark:#89DDFF;--shiki-dark-font-weight:bold}html pre.shiki code .so75L, html code.shiki .so75L{--shiki-light:#E53935;--shiki-light-font-weight:bold;--shiki-default:#F07178;--shiki-default-font-weight:bold;--shiki-dark:#F07178;--shiki-dark-font-weight:bold}html pre.shiki code .sQLHv, html code.shiki .sQLHv{--shiki-light:#90A4AE;--shiki-light-text-decoration:underline;--shiki-default:#EEFFFF;--shiki-default-text-decoration:underline;--shiki-dark:#BABED8;--shiki-dark-text-decoration:underline}html pre.shiki code .sDpXG, html code.shiki .sDpXG{--shiki-light:#E53935;--shiki-light-text-decoration:underline;--shiki-default:#F07178;--shiki-default-text-decoration:underline;--shiki-dark:#F07178;--shiki-dark-text-decoration:underline}html pre.shiki code .s5tWE, html code.shiki .s5tWE{--shiki-light:#E53935;--shiki-light-font-style:italic;--shiki-default:#F07178;--shiki-default-font-style:italic;--shiki-dark:#F07178;--shiki-dark-font-style:italic}",{"id":63,"title":62,"titles":2676,"content":2677,"level":310},[],"如何定义、编写和查询 YAML 数据。",{"id":2679,"title":1934,"titles":2680,"content":2681,"level":343},"/docs/files/yaml#定义集合",[62],"import { defineCollection, defineContentConfig, z } from '@nuxt/content'\n\nexport default defineContentConfig({\n  collections: {\n    authors: defineCollection({\n      type: 'data',\n      source: 'authors/**.yml',\n      schema: z.object({\n        name: z.string(),\n        avatar: z.string(),\n        url: z.string()\n      })\n    })\n  }\n})",{"id":2683,"title":2684,"titles":2685,"content":2686,"level":343},"/docs/files/yaml#创建-yml-文件","创建 .yml 文件",[62],"在 content/authors/ 目录下创建作者文件。 name: Ahad Birang\navatar: https://avatars.githubusercontent.com/u/2047945?v=4\nurl: https://github.com/farnabaz\nname: Baptiste Leproux\navatar: https://avatars.githubusercontent.com/u/7290030?v=4\nurl: https://github.com/larbish",{"id":2688,"title":2689,"titles":2690,"content":2691,"level":343},"/docs/files/yaml#查询数据","查询数据",[62],"现在我们可以查询作者数据了： \u003Cscript lang=\"ts\" setup>\n// 查找单个作者\nconst { data: author } = await useAsyncData('larbish', () => {\n  return queryCollection('authors')\n    .where('stem', '=', 'larbish')\n    .first()\n})\n\n// 获取所有作者\nconst { data: authors } = await useAsyncData('authors', () => {\n  return queryCollection('authors')\n    .order('name', 'DESC')\n    .all()\n})\n\u003C/script> html pre.shiki code .s7zQu, html code.shiki .s7zQu{--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-default:#89DDFF;--shiki-default-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic}html pre.shiki code .sMK4o, html code.shiki .sMK4o{--shiki-light:#39ADB5;--shiki-default:#89DDFF;--shiki-dark:#89DDFF}html pre.shiki code .sTEyZ, html code.shiki .sTEyZ{--shiki-light:#90A4AE;--shiki-default:#EEFFFF;--shiki-dark:#BABED8}html pre.shiki code .sfazB, html code.shiki .sfazB{--shiki-light:#91B859;--shiki-default:#C3E88D;--shiki-dark:#C3E88D}html pre.shiki code .s2Zo4, html code.shiki .s2Zo4{--shiki-light:#6182B8;--shiki-default:#82AAFF;--shiki-dark:#82AAFF}html pre.shiki code .swJcz, html code.shiki .swJcz{--shiki-light:#E53935;--shiki-default:#F07178;--shiki-dark:#F07178}html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .spNyl, html code.shiki .spNyl{--shiki-light:#9C3EDA;--shiki-default:#C792EA;--shiki-dark:#C792EA}html pre.shiki code .sHwdD, html code.shiki .sHwdD{--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-default:#546E7A;--shiki-default-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic}",{"id":67,"title":66,"titles":2693,"content":2694,"level":310},[],"如何定义、编写和查询 JSON 数据。",{"id":2696,"title":1934,"titles":2697,"content":2698,"level":343},"/docs/files/json#定义集合",[66],"import { defineCollection, defineContentConfig, z } from '@nuxt/content'\n\nexport default defineContentConfig({\n  collections: {\n    authors: defineCollection({\n      type: 'data',\n      source: 'authors/**.json',\n      schema: z.object({\n        name: z.string(),\n        avatar: z.string(),\n        url: z.string()\n      })\n    })\n  }\n})",{"id":2700,"title":2701,"titles":2702,"content":2703,"level":343},"/docs/files/json#创建-json-文件","创建 .json 文件",[66],"在 content/authors/ 目录下创建作者文件。 {\n  \"name\": \"Ahad Birang\",\n  \"avatar\": \"https://avatars.githubusercontent.com/u/2047945?v=4\",\n  \"url\": \"https://github.com/farnabaz\"\n}\n{\n  \"name\": \"Baptiste Leproux\",\n  \"avatar\": \"https://avatars.githubusercontent.com/u/7290030?v=4\",\n  \"url\": \"https://github.com/larbish\"\n} data 集合中的每个文件应仅包含一个对象，因此在 JSON 文件中使用顶层数组会导致查询时结果无效。",{"id":2705,"title":2689,"titles":2706,"content":2707,"level":343},"/docs/files/json#查询数据",[66],"现在我们可以查询作者： \u003Cscript lang=\"ts\" setup>\n// 查找单个作者\nconst { data: author } = await useAsyncData('larbish', () => {\n  return queryCollection('authors')\n    .where('stem', '=', 'larbish')\n    .first()\n})\n\n// 获取所有作者\nconst { data: authors } = await useAsyncData('authors', () => {\n  return queryCollection('authors')\n    .order('name', 'DESC')\n    .all()\n})\n\u003C/script> html pre.shiki code .s7zQu, html code.shiki .s7zQu{--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-default:#89DDFF;--shiki-default-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic}html pre.shiki code .sMK4o, html code.shiki .sMK4o{--shiki-light:#39ADB5;--shiki-default:#89DDFF;--shiki-dark:#89DDFF}html pre.shiki code .sTEyZ, html code.shiki .sTEyZ{--shiki-light:#90A4AE;--shiki-default:#EEFFFF;--shiki-dark:#BABED8}html pre.shiki code .sfazB, html code.shiki .sfazB{--shiki-light:#91B859;--shiki-default:#C3E88D;--shiki-dark:#C3E88D}html pre.shiki code .s2Zo4, html code.shiki .s2Zo4{--shiki-light:#6182B8;--shiki-default:#82AAFF;--shiki-dark:#82AAFF}html pre.shiki code .swJcz, html code.shiki .swJcz{--shiki-light:#E53935;--shiki-default:#F07178;--shiki-dark:#F07178}html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .spNyl, html code.shiki .spNyl{--shiki-light:#9C3EDA;--shiki-default:#C792EA;--shiki-dark:#C792EA}html pre.shiki code .sHwdD, html code.shiki .sHwdD{--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-default:#546E7A;--shiki-default-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic}",{"id":71,"title":70,"titles":2709,"content":2710,"level":310},[],"如何定义、编写和查询 CSV 数据。",{"id":2712,"title":1934,"titles":2713,"content":2714,"level":343},"/docs/files/csv#定义集合",[70],"import { defineCollection, defineContentConfig, z } from '@nuxt/content'\n\nexport default defineContentConfig({\n  collections: {\n    authors: defineCollection({\n      type: 'data',\n      source: 'authors/**.csv',\n      schema: z.object({\n        name: z.string(),\n        email: z.string(),\n        avatar: z.string()\n      })\n    })\n  }\n})",{"id":2716,"title":2717,"titles":2718,"content":2719,"level":343},"/docs/files/csv#创建-csv-文件","创建 .csv 文件",[70],"在 content/authors/ 目录下创建作者文件。 id,name,email\n1,John Doe,john@example.com\n2,Jane Smith,jane@example.com\n3,Alice Johnson,alice@example.com\nname,role,avatar\nJohn Doe,Developer,https://avatars.githubusercontent.com/u/1?v=4\nJane Smith,Designer,https://avatars.githubusercontent.com/u/2?v=4 每个 CSV 文件应包含定义列名称的表头行，解析时会将其用作对象的键名。",{"id":2721,"title":2689,"titles":2722,"content":2723,"level":343},"/docs/files/csv#查询数据",[70],"现在我们可以查询作者数据了： \u003Cscript lang=\"ts\" setup>\n// 查找单个作者\nconst { data: author } = await useAsyncData('john-doe', () => {\n  return queryCollection('authors')\n    .where('name', '=', 'John Doe')\n    .first()\n})\n\n// 获取所有作者\nconst { data: authors } = await useAsyncData('authors', () => {\n  return queryCollection('authors')\n    .order('name', 'ASC')\n    .all()\n})\n\u003C/script>\n\n\u003Ctemplate>\n  \u003Cul>\n    \u003Cli v-for=\"author in authors\" :key=\"author.id\">\n      {{ author.name }} ({{ author.email }})\n    \u003C/li>\n  \u003C/ul>\n\u003C/template>",{"id":2725,"title":16,"titles":2726,"content":2727,"level":343},"/docs/files/csv#配置",[70],"你可以在 nuxt.config.ts 中配置 CSV 文件的解析方式： export default defineNuxtConfig({\n  content: {\n    build: {\n      csv: {\n        // 将 CSV 数据转换为 JSON 对象\n        json: true,\n        // 指定自定义分隔符（默认是 ','）\n        delimiter: ','\n      }\n    }\n  }\n}) 启用配置中的 json: true 后，每一行都会被转换成一个 JavaScript 对象，表头行用作键名： [\n  {\n    \"id\": \"1\",\n    \"name\": \"John Doe\",\n    \"email\": \"john@example.com\"\n  },\n  {\n    \"id\": \"2\",\n    \"name\": \"Jane Smith\",\n    \"email\": \"jane@example.com\"\n  }\n]",{"id":2729,"title":2730,"titles":2731,"content":2732,"level":343},"/docs/files/csv#自定义分隔符","自定义分隔符",[70],"如果你的 CSV 文件使用不同的分隔符，可以在配置中指定： export default defineNuxtConfig({\n  content: {\n    build: {\n      csv: {\n        delimiter: ';' // 使用分号作为分隔符\n      }\n    }\n  }\n}) 这样会解析如下格式的 CSV 文件： id;name;email\n1;John Doe;john@example.com\n2;Jane Smith;jane@example.com 如果不需要 CSV 支持，可以通过设置 csv: false 来禁用 CSV 解析器。 html pre.shiki code .s7zQu, html code.shiki .s7zQu{--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-default:#89DDFF;--shiki-default-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic}html pre.shiki code .sMK4o, html code.shiki .sMK4o{--shiki-light:#39ADB5;--shiki-default:#89DDFF;--shiki-dark:#89DDFF}html pre.shiki code .sTEyZ, html code.shiki .sTEyZ{--shiki-light:#90A4AE;--shiki-default:#EEFFFF;--shiki-dark:#BABED8}html pre.shiki code .sfazB, html code.shiki .sfazB{--shiki-light:#91B859;--shiki-default:#C3E88D;--shiki-dark:#C3E88D}html pre.shiki code .s2Zo4, html code.shiki .s2Zo4{--shiki-light:#6182B8;--shiki-default:#82AAFF;--shiki-dark:#82AAFF}html pre.shiki code .swJcz, html code.shiki .swJcz{--shiki-light:#E53935;--shiki-default:#F07178;--shiki-dark:#F07178}html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .spNyl, html code.shiki .spNyl{--shiki-light:#9C3EDA;--shiki-default:#C792EA;--shiki-dark:#C792EA}html pre.shiki code .sHwdD, html code.shiki .sHwdD{--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-default:#546E7A;--shiki-default-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic}html pre.shiki code .sfNiH, html code.shiki .sfNiH{--shiki-light:#FF5370;--shiki-default:#FF9CAC;--shiki-dark:#FF9CAC}",{"id":81,"title":80,"titles":2734,"content":2735,"level":310},[],"queryCollection 组合函数提供用于查询和获取集合内容的方法。",{"id":2737,"title":2111,"titles":2738,"content":2739,"level":343},"/docs/utils/query-collection#用法",[80],"使用自动导入的 queryCollection 来查找集合中的内容。这里假设你已在 content.config.ts 中定义了 docs 集合。 如果你还未定义任何集合，请查看 如何定义集合。 \u003Cscript>\nconst route = useRoute()\nconst { data: page } = await useAsyncData(route.path, () => {\n  return queryCollection('docs').path(route.path).first()\n})\n\u003C/script> queryCollection 工具可在 Vue 和 Nitro 中使用。更多关于如何在服务器端使用的信息，请查看 服务器端用法。",{"id":2741,"title":2742,"titles":2743,"content":303,"level":343},"/docs/utils/query-collection#api","API",[80],{"id":2745,"title":35,"titles":2746,"content":2747,"level":411},"/docs/utils/query-collection#类型",[80,2742],"function queryCollection\u003CT extends keyof Collections>(collection: T): CollectionQueryBuilder\u003CCollections[T]>\n\ninterface CollectionQueryBuilder\u003CT> {\n  where(field: keyof T | string, operator: SQLOperator, value?: unknown): CollectionQueryBuilder\u003CT>\n  andWhere(groupFactory: QueryGroupFunction\u003CT>): CollectionQueryBuilder\u003CT>\n  orWhere(groupFactory: QueryGroupFunction\u003CT>): CollectionQueryBuilder\u003CT>\n  order(field: keyof T, direction: 'ASC' | 'DESC'): CollectionQueryBuilder\u003CT>\n  // ... 其他方法\n}",{"id":2749,"title":2750,"titles":2751,"content":2752,"level":411},"/docs/utils/query-collection#querycollectioncollection-collectionname","queryCollection(collection: CollectionName)",[80,2742],"创建用于查询指定集合的查询构建器。 参数：\ncollection：在 content.config.ts 中定义集合的键名。",{"id":2754,"title":2755,"titles":2756,"content":2757,"level":411},"/docs/utils/query-collection#pathpath-string","path(path: string)",[80,2742],"搜索具有特定 path 的内容。（path 是 page 集合中的特殊字段，基于文件系统路径生成，可作为渲染内容的路由） 参数：\npath：匹配的路径字符串。 const route = useRoute()\nconst { data } = await useAsyncData(route.path, () => {\n  return queryCollection('docs').path(route.path).first()\n})",{"id":2759,"title":2760,"titles":2761,"content":2762,"level":411},"/docs/utils/query-collection#selectfields-keyof-collection","select(...fields: keyof Collection)",[80,2742],"从集合中选择特定字段返回查询结果。 参数：\n...fields：要从集合中选择的字段名称列表。 const route = useRoute()\nconst { data } = await useAsyncData(route.path, () => {\n  return queryCollection('docs')\n    .select('path', 'title', 'description')\n    .first()\n})",{"id":2764,"title":2765,"titles":2766,"content":2767,"level":411},"/docs/utils/query-collection#wherefield-keyof-collection-string-operator-sqloperator-value-unknown","where(field: keyof Collection | string, operator: SqlOperator, value?: unknown)",[80,2742],"向查询添加条件，根据特定字段筛选结果。 参数：\nfield：要筛选的字段。operator：用于比较的 SQL 运算符。可能的值包括：\n'='：等于'>'：大于'\u003C'：小于'\u003C>'：不等于'IN'：在列表中'BETWEEN'：在两个值之间'NOT BETWEEN'：不在两个值之间'IS NULL'：为 NULL'IS NOT NULL'：不为 NULL'LIKE'：匹配模式'NOT LIKE'：不匹配模式value：用于比较的值。类型依所用运算符不同而不同。 const route = useRoute()\nconst { data } = await useAsyncData(route.path, () => {\n  return queryCollection('docs')\n    .where('date', '\u003C', '2024-04-04')\n    .where('category', '=', 'news')\n    .all()\n})\n\n// Generated SQL\n// SELECT * FROM docs WHERE date \u003C '2024-04-04' AND category = 'news'",{"id":2769,"title":2770,"titles":2771,"content":2772,"level":411},"/docs/utils/query-collection#andwheregroupfactory-querygroupfunctioncollection","andWhere(groupFactory: QueryGroupFunction\u003CCollection>)",[80,2742],"向查询添加一个 AND 条件组，允许构建更复杂的查询条件。 参数：\ngroupFactory：一个接收查询构建器的函数，可添加多个条件，这些条件将用 AND 连接组合在一起。 const { data } = await useAsyncData('recent-docs', () => {\n  return queryCollection('docs')\n    .where('published', '=', true)\n    .andWhere(query => query.where('date', '>', '2024-01-01').where('category', '=', 'news'))\n    .all()\n})\n\n// Generated SQL\n// SELECT * FROM docs WHERE published = true AND (date > '2024-01-01' AND category = 'news')",{"id":2774,"title":2775,"titles":2776,"content":2777,"level":411},"/docs/utils/query-collection#orwheregroupfactory-querygroupfunctioncollection","orWhere(groupFactory: QueryGroupFunction\u003CCollection>)",[80,2742],"向查询添加一个 OR 条件组，允许构建替代的条件。 参数：\ngroupFactory：一个接收查询构建器的函数，可添加多个条件，这些条件用 OR 连接组合在一起。 const { data } = await useAsyncData('featured-docs', () => {\n  return queryCollection('docs')\n    .where('published', '=', true)\n    .orWhere(query => query.where('featured', '=', true).where('priority', '>', 5))\n    .all()\n})\n\n// Generated SQL\n// SELECT * FROM docs WHERE published = true AND (featured = true OR priority > 5)",{"id":2779,"title":2780,"titles":2781,"content":2782,"level":411},"/docs/utils/query-collection#orderfield-keyof-collection-direction-asc-desc","order(field: keyof Collection, direction: 'ASC' | 'DESC')",[80,2742],"根据特定字段对查询结果进行排序。 参数：\nfield：排序字段。direction：排序方向，'ASC' 表示升序，'DESC' 表示降序。 const route = useRoute()\nconst { data } = await useAsyncData(route.path, () => {\n  return queryCollection('docs')\n    .order('date', 'DESC')\n    .all()\n})",{"id":2784,"title":2785,"titles":2786,"content":2787,"level":411},"/docs/utils/query-collection#limitlimit-number","limit(limit: number)",[80,2742],"限制查询返回结果的数量。 参数：\nlimit：返回结果的最大数量。 const route = useRoute()\nconst { data } = await useAsyncData(route.path, () => {\n  return queryCollection('docs')\n    .limit(10)\n    .all()\n})",{"id":2789,"title":2790,"titles":2791,"content":2792,"level":411},"/docs/utils/query-collection#skipskip-number","skip(skip: number)",[80,2742],"查询时跳过指定数量的结果。 参数：\nskip：跳过的结果数量。 const route = useRoute()\nconst { data } = await useAsyncData(route.path, () => {\n  return queryCollection('docs')\n    // 跳过前 5 条\n    .skip(5)\n    .all()\n})",{"id":2794,"title":2795,"titles":2796,"content":2797,"level":411},"/docs/utils/query-collection#all","all()",[80,2742],"执行查询并返回所有匹配结果。 返回值：返回一个 Promise，解析为所有匹配的文档数组。 const route = useRoute()\nconst { data } = await useAsyncData(route.path, () => {\n  return queryCollection('docs').all()\n})",{"id":2799,"title":2800,"titles":2801,"content":2802,"level":411},"/docs/utils/query-collection#first","first()",[80,2742],"执行查询并返回第一个匹配结果。 返回值：返回一个 Promise，解析为第一个匹配的文档，若无匹配则为 null。 const route = useRoute()\nconst { data } = await useAsyncData(route.path, () => {\n  return queryCollection('docs').first()\n})",{"id":2804,"title":2805,"titles":2806,"content":2807,"level":411},"/docs/utils/query-collection#count","count()",[80,2742],"统计基于查询条件匹配的集合条目数量。 const route = useRoute()\nconst { data } = await useAsyncData(route.path, () => {\n  return queryCollection('docs')\n    // 计数匹配条目\n    .count()\n})\n\n// 返回\n5 // 匹配数量 你也可以将 count() 与上述其他方法（如 where()）结合使用，以对集合查询应用更多条件。 const route = useRoute()\nconst { data } = await useAsyncData(route.path, () => {\n  return queryCollection('docs')\n    .where('date', '\u003C', '2024-04-04')\n    // 计数匹配条目\n    .count()\n})\n\n// 返回\n3 // 满足条件的匹配数量",{"id":2809,"title":2553,"titles":2810,"content":2811,"level":343},"/docs/utils/query-collection#示例",[80],"下面是一个完整示例，展示如何获取 docs 集合中的文档列表。 \u003Cscript setup lang=\"ts\">\nconst { data: docs } = await useAsyncData('documents-list', () => {\n  return queryCollection('docs')\n    .order('date', 'DESC')\n    .select('title', 'path', 'description')\n    .all()\n})\n\u003C/script>\n\n\u003Ctemplate>\n  \u003CNuxtLink v-for=\"doc in docs\" :key=\"doc.path\" :to=\"doc.path\">\n    \u003Ch2>{{ doc.title }}\u003C/h2>\n    \u003Cp>{{ doc.description }}\u003C/p>\n  \u003C/NuxtLink>\n\u003C/template>",{"id":2813,"title":2814,"titles":2815,"content":2816,"level":343},"/docs/utils/query-collection#服务器端用法","服务器端用法",[80],"Nuxt Content 提供了类似的工具用于在服务器端查询集合。唯一区别是你需要将 event 作为第一个参数传给 queryCollection 函数。 export default eventHandler(async (event) => {\n  const { slug } = getRouterParams(event)\n  const page = await queryCollection(event, 'docs').path(slug).first()\n  return page\n}) 确保创建 server/tsconfig.json 文件，并包含以下内容以避免类型错误：{\n  \"extends\": \"../.nuxt/tsconfig.server.json\"\n} html pre.shiki code .sMK4o, html code.shiki .sMK4o{--shiki-light:#39ADB5;--shiki-default:#89DDFF;--shiki-dark:#89DDFF}html pre.shiki code .swJcz, html code.shiki .swJcz{--shiki-light:#E53935;--shiki-default:#F07178;--shiki-dark:#F07178}html pre.shiki code .spNyl, html code.shiki .spNyl{--shiki-light:#9C3EDA;--shiki-default:#C792EA;--shiki-dark:#C792EA}html pre.shiki code .sTEyZ, html code.shiki .sTEyZ{--shiki-light:#90A4AE;--shiki-default:#EEFFFF;--shiki-dark:#BABED8}html pre.shiki code .s2Zo4, html code.shiki .s2Zo4{--shiki-light:#6182B8;--shiki-default:#82AAFF;--shiki-dark:#82AAFF}html pre.shiki code .s7zQu, html code.shiki .s7zQu{--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-default:#89DDFF;--shiki-default-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic}html pre.shiki code .sfazB, html code.shiki .sfazB{--shiki-light:#91B859;--shiki-default:#C3E88D;--shiki-dark:#C3E88D}html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .sBMFI, html code.shiki .sBMFI{--shiki-light:#E2931D;--shiki-default:#FFCB6B;--shiki-dark:#FFCB6B}html pre.shiki code .sHdIc, html code.shiki .sHdIc{--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-default:#EEFFFF;--shiki-default-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic}html pre.shiki code .sHwdD, html code.shiki .sHwdD{--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-default:#546E7A;--shiki-default-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic}html pre.shiki code .sfNiH, html code.shiki .sfNiH{--shiki-light:#FF5370;--shiki-default:#FF9CAC;--shiki-dark:#FF9CAC}html pre.shiki code .sbssI, html code.shiki .sbssI{--shiki-light:#F76D47;--shiki-default:#F78C6C;--shiki-dark:#F78C6C}",{"id":85,"title":84,"titles":2818,"content":2819,"level":310},[],"queryCollectionNavigation 组合函数生成给定集合的导航树。",{"id":2821,"title":35,"titles":2822,"content":2823,"level":343},"/docs/utils/query-collection-navigation#类型",[84],"function queryCollectionNavigation\u003CT extends keyof PageCollections>(\n  collection: T,\n  fields?: Array\u003Ckeyof PageCollections[T]>\n): ChainablePromise\u003CT, ContentNavigationItem[]>\n\ninterface ChainablePromise\u003CT extends keyof PageCollections, R> extends Promise\u003CR> {\n  where(field: keyof PageCollections[T] | string, operator: SQLOperator, value?: unknown): ChainablePromise\u003CT, R>\n  andWhere(groupFactory: QueryGroupFunction\u003CPageCollections[T]>): ChainablePromise\u003CT, R>\n  orWhere(groupFactory: QueryGroupFunction\u003CPageCollections[T]>): ChainablePromise\u003CT, R>\n  order(field: keyof PageCollections[T], direction: 'ASC' | 'DESC'): ChainablePromise\u003CT, R>\n}",{"id":2825,"title":2111,"titles":2826,"content":2827,"level":343},"/docs/utils/query-collection-navigation#用法",[84],"使用自动导入的 queryCollectionNavigation 为特定集合生成导航树。这对于基于你的内容结构创建动态导航菜单或侧边栏非常有用。 该函数返回一个可链式调用的 Promise，允许你添加额外的查询条件： \u003Cscript setup lang=\"ts\">\nconst { data } = await useAsyncData('navigation', () => {\n  return queryCollectionNavigation('docs')\n    .where('published', '=', true)\n    .order('date', 'DESC')\n})\n\u003C/script> queryCollectionNavigation 工具同时适用于 Vue 和 Nitro。详细了解在服务器端如何使用，请参阅 服务器端使用。",{"id":2829,"title":2830,"titles":2831,"content":2832,"level":411},"/docs/utils/query-collection-navigation#使用-navigationyml-添加导航元数据","使用 .navigation.yml 添加导航元数据",[84,2111],"你可以通过 .navigation.yml 文件为目录添加元数据。 title: 入门指南\nicon: i-lucide-square-play",{"id":2834,"title":2742,"titles":2835,"content":303,"level":343},"/docs/utils/query-collection-navigation#api",[84],{"id":2837,"title":2838,"titles":2839,"content":2840,"level":411},"/docs/utils/query-collection-navigation#querycollectionnavigationcollection-collectionname-extrafield-keyof-collection","queryCollectionNavigation(collection: CollectionName, extraField: keyof Collection)",[84,2742],"为指定集合生成导航树。 参数：\ncollection：在 content.config.ts 中定义集合的键名。extraFields：（可选）一个数组，包含要在导航项中额外包含的字段。（默认导航项中包含 title 和 path。）返回值：一个可链式调用的 Promise，解析为导航树结构。该 Promise 支持添加查询条件的方法：\nwhere(field, operator, value)：添加 WHERE 条件andWhere(groupFactory)：添加分组的 AND 条件orWhere(groupFactory)：添加分组的 OR 条件order(field, direction)：添加 ORDER BY 子句 导航树基于目录结构生成，排序基于文件的排序规则",{"id":2842,"title":2553,"titles":2843,"content":2844,"level":343},"/docs/utils/query-collection-navigation#示例",[84],"基础用法，无需额外查询条件： \u003Cscript setup lang=\"ts\">\nconst { data } = await useAsyncData('navigation', () => {\n  return queryCollectionNavigation('docs')\n})\n\u003C/script>\n\n\u003Ctemplate>\n  \u003Cnav>\n    \u003Cul v-if=\"data\">\n      \u003Cli v-for=\"item in data\" :key=\"item.path\">\n        \u003CNuxtLink :to=\"item.path\">{{ item.title }}\u003C/NuxtLink>\n      \u003C/li>\n    \u003C/ul>\n  \u003C/nav>\n\u003C/template> 带额外查询条件和额外字段的示例： \u003Cscript setup lang=\"ts\">\nconst { data } = await useAsyncData('navigation', () => {\n  return queryCollectionNavigation('docs', ['description', 'badge'])\n    .where('draft', '=', false)\n    .where('partial', '=', false)\n    .order('title', 'ASC')\n})\n\u003C/script>\n\n\u003Ctemplate>\n  \u003Cnav>\n    \u003Cul v-if=\"data\">\n      \u003Cli v-for=\"item in data\" :key=\"item.path\">\n        \u003CNuxtLink :to=\"item.path\">\n          {{ item.title }}\n          \u003Cspan v-if=\"item.badge\" class=\"badge\">{{ item.badge }}\u003C/span>\n        \u003C/NuxtLink>\n        \u003Cp v-if=\"item.description\">{{ item.description }}\u003C/p>\n      \u003C/li>\n    \u003C/ul>\n  \u003C/nav>\n\u003C/template>",{"id":2846,"title":2847,"titles":2848,"content":2849,"level":343},"/docs/utils/query-collection-navigation#服务器端使用","服务器端使用",[84],"Nuxt Content 在服务器端提供了类似的查询集合工具。唯一不同的是你需要把 event 作为第一个参数传递给 queryCollectionNavigation 函数。 export default eventHandler(async (event) => {\n  const navigation = await queryCollectionNavigation(event, 'docs')\n  return navigation\n}) 请确保创建 server/tsconfig.json 文件，内容如下，以避免类型错误。{\n  \"extends\": \"../.nuxt/tsconfig.server.json\"\n}",{"id":2851,"title":2852,"titles":2853,"content":2854,"level":343},"/docs/utils/query-collection-navigation#与导航相关的额外工具","与导航相关的额外工具",[84],"Content 模块提供了一些额外的工具，以简化构建面包屑导航等常见用例。",{"id":2856,"title":2857,"titles":2858,"content":2859,"level":411},"/docs/utils/query-collection-navigation#findpageheadlinenavigation-path-options","findPageHeadline(navigation, path, options?)",[84,2852],"返回导航树中给定路径的标题（父文件夹的名称）。对于显示章节标题或上下文导航标题非常有用。 navigation: 导航树（ContentNavigationItem 数组）。path: 当前页面路径。options（可选）：\nindexAsChild: 是否把索引页视为子节点。 示例： import { findPageHeadline } from '@nuxt/content/utils'\n\nconst headline = findPageHeadline(navigation, '/docs/guide/getting-started')\n// 标题是一个包含父文件夹名称的字符串。",{"id":2861,"title":2862,"titles":2863,"content":2864,"level":411},"/docs/utils/query-collection-navigation#findpagebreadcrumbnavigation-path-options","findPageBreadcrumb(navigation, path, options?)",[84,2852],"返回给定路径在导航树中的面包屑路径（导航项数组）。适合用于构建面包屑导航组件。 navigation：导航树（ContentNavigationItem 数组）。path：当前页面路径。options（可选）：\ncurrent：是否包含当前页面。indexAsChild：是否把索引页视为子节点。 示例： import { findPageBreadcrumb } from '@nuxt/content/utils'\n\nconst breadcrumb = findPageBreadcrumb(navigation, '/docs/guide/getting-started')\n// breadcrumb 是通向当前页面的导航项数组",{"id":2866,"title":2867,"titles":2868,"content":2869,"level":411},"/docs/utils/query-collection-navigation#findpagechildrennavigation-path-options","findPageChildren(navigation, path, options?)",[84,2852],"查找并返回导航树中给定路径的直接子项。 navigation：导航树（ContentNavigationItem 数组）。path：要查找子项的父路径。options（可选）：\nindexAsChild：是否把索引页视为子节点。 示例： import { findPageChildren } from '@nuxt/content/utils'\n\nconst children = findPageChildren(navigation, '/docs/guide')\n// children 是 '/docs/guide' 下的导航项数组",{"id":2871,"title":2872,"titles":2873,"content":2874,"level":411},"/docs/utils/query-collection-navigation#findpagesiblingsnavigation-path-options","findPageSiblings(navigation, path, options?)",[84,2852],"返回给定路径的兄弟导航项（即具有相同父级的其他项）。 navigation：导航树（ContentNavigationItem 数组）。path：当前页面路径。options（可选）：\nindexAsChild：是否把索引页视为子节点。 示例： import { findPageSiblings } from '@nuxt/content/utils'\n\nconst siblings = findPageSiblings(navigation, '/docs/guide/getting-started')\n// siblings 是与当前页面具有相同父级的导航项数组 html pre.shiki code .spNyl, html code.shiki .spNyl{--shiki-light:#9C3EDA;--shiki-default:#C792EA;--shiki-dark:#C792EA}html pre.shiki code .s2Zo4, html code.shiki .s2Zo4{--shiki-light:#6182B8;--shiki-default:#82AAFF;--shiki-dark:#82AAFF}html pre.shiki code .sMK4o, html code.shiki .sMK4o{--shiki-light:#39ADB5;--shiki-default:#89DDFF;--shiki-dark:#89DDFF}html pre.shiki code .sBMFI, html code.shiki .sBMFI{--shiki-light:#E2931D;--shiki-default:#FFCB6B;--shiki-dark:#FFCB6B}html pre.shiki code .sHdIc, html code.shiki .sHdIc{--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-default:#EEFFFF;--shiki-default-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic}html pre.shiki code .sTEyZ, html code.shiki .sTEyZ{--shiki-light:#90A4AE;--shiki-default:#EEFFFF;--shiki-dark:#BABED8}html pre.shiki code .swJcz, html code.shiki .swJcz{--shiki-light:#E53935;--shiki-default:#F07178;--shiki-dark:#F07178}html pre.shiki code .sfazB, html code.shiki .sfazB{--shiki-light:#91B859;--shiki-default:#C3E88D;--shiki-dark:#C3E88D}html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .s7zQu, html code.shiki .s7zQu{--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-default:#89DDFF;--shiki-default-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic}html pre.shiki code .sfNiH, html code.shiki .sfNiH{--shiki-light:#FF5370;--shiki-default:#FF9CAC;--shiki-dark:#FF9CAC}html pre.shiki code .sHwdD, html code.shiki .sHwdD{--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-default:#546E7A;--shiki-default-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic}",{"id":89,"title":88,"titles":2876,"content":2877,"level":310},[],"queryCollectionItemSurroundings 组合函数用于查找特定路径的兄弟内容项。",{"id":2879,"title":35,"titles":2880,"content":2881,"level":343},"/docs/utils/query-collection-item-surroundings#类型",[88],"function queryCollectionItemSurroundings\u003CT extends keyof PageCollections>(\n  collection: T,\n  path: string,\n  opts?: SurroundOptions\u003Ckeyof PageCollections[T]>\n): ChainablePromise\u003CT, ContentNavigationItem[]>\n\ninterface ChainablePromise\u003CT extends keyof PageCollections, R> extends Promise\u003CR> {\n  where(field: keyof PageCollections[T] | string, operator: SQLOperator, value?: unknown): ChainablePromise\u003CT, R>\n  andWhere(groupFactory: QueryGroupFunction\u003CPageCollections[T]>): ChainablePromise\u003CT, R>\n  orWhere(groupFactory: QueryGroupFunction\u003CPageCollections[T]>): ChainablePromise\u003CT, R>\n  order(field: keyof PageCollections[T], direction: 'ASC' | 'DESC'): ChainablePromise\u003CT, R>\n}",{"id":2883,"title":2111,"titles":2884,"content":2885,"level":343},"/docs/utils/query-collection-item-surroundings#用法",[88],"使用自动导入的 queryCollectionItemSurroundings 可以查找集合中特定内容项的前后兄弟项目。这对于创建相关内容页面间的导航非常有用。 该函数返回一个可链式调用的 Promise，允许你添加额外的查询条件： \u003Cscript setup lang=\"ts\">\nconst { data } = await useAsyncData('surround', () => {\n  return queryCollectionItemSurroundings('docs', '/foo')\n    .where('published', '=', true)\n    .order('date', 'DESC')\n})\n\u003C/script> queryCollectionItemSurroundings 工具可以在 Vue 和 Nitro 中使用。详情请查看 服务器端使用 章节，了解如何在服务器端使用。",{"id":2887,"title":2742,"titles":2888,"content":303,"level":343},"/docs/utils/query-collection-item-surroundings#api",[88],{"id":2890,"title":2891,"titles":2892,"content":2893,"level":411},"/docs/utils/query-collection-item-surroundings#querycollectionitemsurroundingscollection-collectionname-path-string-opts-surroundoptions","queryCollectionItemSurroundings(collection: CollectionName, path: string, opts?: SurroundOptions)",[88,2742],"查找集合中特定内容项的相邻项（前一项和后一项）。 参数：\ncollection：在 content.config.ts 中定义的集合的键名。path：当前内容项的路径。opts：（可选）包含以下属性的对象：\nbefore：（可选）当前项之前要获取的项目数，默认值为 1。after：（可选）当前项之后要获取的项目数，默认值为 1。fields：（可选）附加要包含在相邻项中的字段数组。返回值：一个可链式调用的 Promise，解析为包含相邻项目的数组。该 Promise 包含用于添加查询条件的方法：\nwhere(field, operator, value)：添加 WHERE 条件andWhere(groupFactory)：添加分组的 AND 条件orWhere(groupFactory)：添加分组的 OR 条件order(field, direction)：添加 ORDER BY 子句 最终结果将是一个数组，结构如下： 使用默认选项时为 [previousItem, nextItem]使用自定义 before 和 after 值时为 [...previousItems, ...nextItems] 数组中的每个项均为 ContentNavigationItem 类型，若该位置无项目则为 null。",{"id":2895,"title":2553,"titles":2896,"content":2897,"level":343},"/docs/utils/query-collection-item-surroundings#示例",[88],"基础用法，无额外查询条件： \u003Cscript setup lang=\"ts\">\nconst { data } = await useAsyncData('surround', () => {\n  return queryCollectionItemSurroundings('docs', '/foo')\n})\n\u003C/script>\n\n\u003Ctemplate>\n  \u003Cdiv class=\"flex justify-between\">\n    \u003CNuxtLink v-if=\"data?.[0]\" :to=\"data[0].path\">\n      ← {{ data[0].title }}\n    \u003C/NuxtLink>\n    \u003CNuxtLink v-if=\"data?.[1]\" :to=\"data[1].path\">\n      {{ data[1].title }} →\n    \u003C/NuxtLink>\n  \u003C/div>\n\u003C/template> 带有额外查询条件的示例： \u003Cscript setup lang=\"ts\">\nconst { data } = await useAsyncData('surround', () => {\n  return queryCollectionItemSurroundings('docs', '/foo', {\n    before: 1,\n    after: 1,\n    fields: ['badge', 'description']\n  })\n    .where('_draft', '=', false)\n    .where('_partial', '=', false)\n    .order('date', 'DESC')\n})\n\u003C/script>",{"id":2899,"title":2847,"titles":2900,"content":2901,"level":343},"/docs/utils/query-collection-item-surroundings#服务器端使用",[88],"Nuxt Content 提供了类似的工具用于服务器端查询集合。唯一不同的是你需要将 event 作为第一个参数传递给 queryCollectionItemSurroundings 函数。 export default eventHandler(async (event) => {\n  const surroundings = await queryCollectionItemSurroundings(event, 'docs', '/foo')\n  return surroundings\n}) 请确保创建 server/tsconfig.json 文件，内容如下，以避免类型错误。{\n  \"extends\": \"../.nuxt/tsconfig.server.json\"\n} html pre.shiki code .spNyl, html code.shiki .spNyl{--shiki-light:#9C3EDA;--shiki-default:#C792EA;--shiki-dark:#C792EA}html pre.shiki code .s2Zo4, html code.shiki .s2Zo4{--shiki-light:#6182B8;--shiki-default:#82AAFF;--shiki-dark:#82AAFF}html pre.shiki code .sMK4o, html code.shiki .sMK4o{--shiki-light:#39ADB5;--shiki-default:#89DDFF;--shiki-dark:#89DDFF}html pre.shiki code .sBMFI, html code.shiki .sBMFI{--shiki-light:#E2931D;--shiki-default:#FFCB6B;--shiki-dark:#FFCB6B}html pre.shiki code .sHdIc, html code.shiki .sHdIc{--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-default:#EEFFFF;--shiki-default-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic}html pre.shiki code .sTEyZ, html code.shiki .sTEyZ{--shiki-light:#90A4AE;--shiki-default:#EEFFFF;--shiki-dark:#BABED8}html pre.shiki code .swJcz, html code.shiki .swJcz{--shiki-light:#E53935;--shiki-default:#F07178;--shiki-dark:#F07178}html pre.shiki code .sfazB, html code.shiki .sfazB{--shiki-light:#91B859;--shiki-default:#C3E88D;--shiki-dark:#C3E88D}html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .s7zQu, html code.shiki .s7zQu{--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-default:#89DDFF;--shiki-default-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic}html pre.shiki code .sfNiH, html code.shiki .sfNiH{--shiki-light:#FF5370;--shiki-default:#FF9CAC;--shiki-dark:#FF9CAC}html pre.shiki code .sbssI, html code.shiki .sbssI{--shiki-light:#F76D47;--shiki-default:#F78C6C;--shiki-dark:#F78C6C}",{"id":93,"title":92,"titles":2903,"content":2904,"level":310},[],"queryCollectionSearchSections 可组合函数用于从集合中生成可搜索的区块，以增强内容发现体验。",{"id":2906,"title":35,"titles":2907,"content":2908,"level":343},"/docs/utils/query-collection-search-sections#类型",[92],"function queryCollectionSearchSections(collection: keyof Collections, opts?: { ignoredTags: string[] }): ChainablePromise\u003CT, Section[]>\n\ninterface ChainablePromise\u003CT extends keyof PageCollections, R> extends Promise\u003CR> {\n  where(field: keyof PageCollections[T] | string, operator: SQLOperator, value?: unknown): ChainablePromise\u003CT, R>\n  andWhere(groupFactory: QueryGroupFunction\u003CPageCollections[T]>): ChainablePromise\u003CT, R>\n  orWhere(groupFactory: QueryGroupFunction\u003CPageCollections[T]>): ChainablePromise\u003CT, R>\n  order(field: keyof PageCollections[T], direction: 'ASC' | 'DESC'): ChainablePromise\u003CT, R>\n}",{"id":2910,"title":2911,"titles":2912,"content":2913,"level":343},"/docs/utils/query-collection-search-sections#使用方法","使用方法",[92],"使用自动导入的 queryCollectionSearchSections 函数从指定集合生成可搜索的区块。这对于在应用中创建高级搜索功能或内容发现功能非常有用。 \u003Cscript>\nconst { data: sections } = await useAsyncData('search-sections', () => {\n  return queryCollectionSearchSections('docs')\n})\n\u003C/script> queryCollectionSearchSections 工具同时支持 Vue 和 Nitro。更多关于如何在服务器端使用的详细信息，请查看 Server Usage。",{"id":2915,"title":2742,"titles":2916,"content":303,"level":343},"/docs/utils/query-collection-search-sections#api",[92],{"id":2918,"title":2919,"titles":2920,"content":2921,"level":411},"/docs/utils/query-collection-search-sections#querycollectionsearchsectionscollection-collectionname-options-searchsectionsoptions","queryCollectionSearchSections(collection: CollectionName, options?: SearchSectionsOptions)",[92,2742],"从指定集合生成可搜索的区块。 参数：\ncollection：在 content.config.ts 中定义的集合键名。options：（可选）一个包含以下属性的对象：\nignoredTags：一个要在生成区块时忽略的标签名称数组。默认是空数组。返回值：返回一个 Promise，解析为包含可搜索区块的数组。每个区块是一个对象，包含以下属性：\nid：区块的唯一标识符。title：区块标题（通常是标题文本）。titles：父级区块标题组成的数组，表示层级结构。content：区块的文本内容。level：区块的标题层级（1-6），1 表示最高层级。",{"id":2923,"title":2553,"titles":2924,"content":2925,"level":343},"/docs/utils/query-collection-search-sections#示例",[92],"下面示例演示如何使用 queryCollectionSearchSections 从 'docs' 集合创建可搜索的区块： \u003Cscript>\nconst { data: surround } = await useAsyncData('foo-surround', () => {\n  return queryCollectionSearchSections('docs', {\n    ignoredTags: ['code']\n  })\n})\n\u003C/script>",{"id":2927,"title":2847,"titles":2928,"content":2929,"level":343},"/docs/utils/query-collection-search-sections#服务器端使用",[92],"Nuxt Content 提供了类似的工具来在服务器端查询集合。唯一的区别是你需要将 event 作为 queryCollectionSearchSections 函数的第一个参数传入。 export default eventHandler(async (event) => {\n  const sections = await queryCollectionSearchSections(event, 'docs')\n  return sections\n}) 请确保创建 server/tsconfig.json 文件，并填写以下内容以避免类型错误。{\n  \"extends\": \"../.nuxt/tsconfig.server.json\"\n} html pre.shiki code .spNyl, html code.shiki .spNyl{--shiki-light:#9C3EDA;--shiki-default:#C792EA;--shiki-dark:#C792EA}html pre.shiki code .s2Zo4, html code.shiki .s2Zo4{--shiki-light:#6182B8;--shiki-default:#82AAFF;--shiki-dark:#82AAFF}html pre.shiki code .sMK4o, html code.shiki .sMK4o{--shiki-light:#39ADB5;--shiki-default:#89DDFF;--shiki-dark:#89DDFF}html pre.shiki code .sHdIc, html code.shiki .sHdIc{--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-default:#EEFFFF;--shiki-default-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic}html pre.shiki code .sBMFI, html code.shiki .sBMFI{--shiki-light:#E2931D;--shiki-default:#FFCB6B;--shiki-dark:#FFCB6B}html pre.shiki code .swJcz, html code.shiki .swJcz{--shiki-light:#E53935;--shiki-default:#F07178;--shiki-dark:#F07178}html pre.shiki code .sTEyZ, html code.shiki .sTEyZ{--shiki-light:#90A4AE;--shiki-default:#EEFFFF;--shiki-dark:#BABED8}html pre.shiki code .sfazB, html code.shiki .sfazB{--shiki-light:#91B859;--shiki-default:#C3E88D;--shiki-dark:#C3E88D}html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .s7zQu, html code.shiki .s7zQu{--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-default:#89DDFF;--shiki-default-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic}",{"id":103,"title":102,"titles":2931,"content":2932,"level":310},[],"将您的组件从 AST 转换为美妙的模板。 \u003CContentRenderer> 组件用于渲染通过 queryCollection() 查询获得的文档。 此组件 仅支持 Markdown 文件。",{"id":2934,"title":2935,"titles":2936,"content":2937,"level":343},"/docs/components/content-renderer#属性","属性",[102],"属性默认值类型描述value{}ParsedContent要渲染的文档。tag'div'string渲染器元素使用的标签名（如果有使用）。excerptfalseboolean是否仅渲染摘要而不渲染其余内容。components{}object用于渲染的自定义组件映射。此属性将传递给 Markdown 渲染器，不影响其他文件类型。data{}object （必需）将注入到 Markdown 内容中的变量映射，用于后续绑定变量。proseundefinedboolean是否渲染 Prose 组件而非 HTML 标签。classundefinedstring 或 object用于渲染的根标签的类名。unwrapfalseboolean 或 string需要去除包装的标签，多个标签用空格分隔。例如：'ul li'。",{"id":2939,"title":2940,"titles":2941,"content":2942,"level":343},"/docs/components/content-renderer#例子","例子",[102],"\u003Cscript lang=\"ts\" setup>\nconst route = useRoute()\nconst { data: page } = await useAsyncData(route.path, () => {\n  return queryCollection('docs').path(route.path).first()\n})\n\u003C/script>\n\n\u003Ctemplate>\n  \u003CContentRenderer v-if=\"page\" :value=\"page\" />\n\u003C/template>",{"id":2944,"title":2945,"titles":2946,"content":2947,"level":343},"/docs/components/content-renderer#处理缺失页面","处理缺失页面",[102],"如果查询的内容缺失，您可以显示自定义的备用提示信息。 \u003Cscript lang=\"ts\" setup>\nconst route = useRoute()\nconst { data: page } = await useAsyncData(route.path, () => {\n  return queryCollection('docs').path(route.path).first()\n})\n\u003C/script>\n\n\u003Ctemplate>\n  \u003Ctemplate v-if=\"page\">\n    \u003CContentRenderer :value=\"page\" />\n  \u003C/template>\n  \u003Ctemplate v-else>\n    \u003Cdiv class=\"empty-page\">\n      \u003Ch1>页面未找到\u003C/h1>\n      \u003Cp>抱歉！您查找的内容不存在。\u003C/p>\n      \u003CNuxtLink to=\"/\">返回首页\u003C/NuxtLink>\n    \u003C/div>\n  \u003C/template>\n\u003C/template>",{"id":2949,"title":2950,"titles":2951,"content":2952,"level":343},"/docs/components/content-renderer#处理空页面","处理空页面",[102],"如果查询的内容为空，您可以显示自定义的备用提示信息。 html pre.shiki code .sMK4o, html code.shiki .sMK4o{--shiki-light:#39ADB5;--shiki-default:#89DDFF;--shiki-dark:#89DDFF}html pre.shiki code .swJcz, html code.shiki .swJcz{--shiki-light:#E53935;--shiki-default:#F07178;--shiki-dark:#F07178}html pre.shiki code .spNyl, html code.shiki .spNyl{--shiki-light:#9C3EDA;--shiki-default:#C792EA;--shiki-dark:#C792EA}html pre.shiki code .sfazB, html code.shiki .sfazB{--shiki-light:#91B859;--shiki-default:#C3E88D;--shiki-dark:#C3E88D}html pre.shiki code .sTEyZ, html code.shiki .sTEyZ{--shiki-light:#90A4AE;--shiki-default:#EEFFFF;--shiki-dark:#BABED8}html pre.shiki code .s2Zo4, html code.shiki .s2Zo4{--shiki-light:#6182B8;--shiki-default:#82AAFF;--shiki-dark:#82AAFF}html pre.shiki code .s7zQu, html code.shiki .s7zQu{--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-default:#89DDFF;--shiki-default-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic}html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"id":107,"title":106,"titles":2954,"content":2955,"level":310},[],"将 Markdown 注入 Vue 组件的最快方法。 当你在组件内使用 MDC 语法编写内容和段落时，可以使用 Vue 的 \u003Cslot> 组件来渲染内容。",{"id":2957,"title":2111,"titles":2958,"content":2959,"level":343},"/docs/components/slot#用法",[106],"如果你不想修改渲染的内容，只需使用 Vue 的 \u003Cslot> 组件。 \u003Ctemplate>\n  \u003Cdiv class=\"callout\">\n    \u003Cslot />\n  \u003C/div>\n\u003C/template> 现在我们在 Markdown 中使用它： ::callout\n这是一个呼出框。\n:: 渲染后的 HTML 将会是： \u003Cdiv class=\"callout\">\n  \u003Cp>这是一个呼出框。\u003C/p>\n\u003C/div> 这种用法类似于使用原生的 \u003Cslot> 组件。",{"id":2961,"title":2962,"titles":2963,"content":2964,"level":411},"/docs/components/slot#解除包裹","解除包裹",[106,2111],"mdc-unwrap 属性允许你从渲染的内容中移除一个或多个包裹元素。当你想提取嵌套在原生 Markdown 语法中的内容时，这非常有用。指定的每个标签都会从 AST 中被移除。 让我们从上面的示例中解除 \u003Cp> 元素的包裹： \u003Ctemplate>\n  \u003Cdiv class=\"callout\">\n    \u003Cslot mdc-unwrap=\"p\" />\n  \u003C/div>\n\u003C/template> 现在渲染的 HTML 将会是： \u003Cdiv class=\"callout\">\n  这是一个呼出框。\n\u003C/div>",{"id":2966,"title":2967,"titles":2968,"content":2969,"level":411},"/docs/components/slot#命名插槽","命名插槽",[106,2111],"name 属性允许你通过名称绑定一个插槽。当你想渲染非默认插槽时，这非常有用。 让我们改进 Callout 组件，增加一个 title 插槽： \u003Ctemplate>\n  \u003Cdiv class=\"callout\">\n    \u003Ch2 v-if=\"$slots.title\">\n      \u003Cslot name=\"title\" mdc-unwrap=\"p\" />\n    \u003C/h2>\n    \u003Cslot />\n  \u003C/div>\n\u003C/template> 现在我们在 Markdown 中使用它： ::callout\n#title\n请小心！\n#default\n使用 MDC & Vue 组件会上瘾。\n:: 这将生成： \u003Cdiv class=\"callout\">\n  \u003Ch2>请小心！\u003C/h2>\n  \u003Cp>使用 MDC & Vue 组件会上瘾。\u003C/p>\n\u003C/div> 当不使用 title 插槽时，h2 元素将不会被渲染。",{"id":2971,"title":2935,"titles":2972,"content":2973,"level":343},"/docs/components/slot#属性",[106],"mdc-unwrap：是否解除内容的包裹。当你想提取嵌套在原生 Markdown 语法中的内容时，这非常有用。指定的每个标签都会从 AST 中被移除。\n类型： boolean 或 string默认值： false示例： 'p' 或 'ul li' html pre.shiki code .sMK4o, html code.shiki .sMK4o{--shiki-light:#39ADB5;--shiki-default:#89DDFF;--shiki-dark:#89DDFF}html pre.shiki code .swJcz, html code.shiki .swJcz{--shiki-light:#E53935;--shiki-default:#F07178;--shiki-dark:#F07178}html pre.shiki code .spNyl, html code.shiki .spNyl{--shiki-light:#9C3EDA;--shiki-default:#C792EA;--shiki-dark:#C792EA}html pre.shiki code .sfazB, html code.shiki .sfazB{--shiki-light:#91B859;--shiki-default:#C3E88D;--shiki-dark:#C3E88D}html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .sTEyZ, html code.shiki .sTEyZ{--shiki-light:#90A4AE;--shiki-default:#EEFFFF;--shiki-dark:#BABED8}",{"id":111,"title":110,"titles":2975,"content":2976,"level":310},[],"一份文章组件列表。 文章组件是 HTML 排版标签的替代品。文章组件提供了一种简便的方式来自定义内容界面。 要覆盖文章组件，请在项目的 components/content/ 目录下创建同名组件（例如：components/content/ProseA.vue）。 文章组件最初是 @nuxtjs/mdc 的一部分。",{"id":2978,"title":2979,"titles":2980,"content":2981,"level":343},"/docs/components/prose#prosea","ProseA",[110],"[Link](/docs/components/prose)\nLink",{"id":2983,"title":2984,"titles":2985,"content":2986,"level":343},"/docs/components/prose#proseblockquote","ProseBlockquote",[110],"> 块引用\n块引用",{"id":2988,"title":2989,"titles":2990,"content":2991,"level":343},"/docs/components/prose#prosepre","ProsePre",[110],"```js [file.js]{2} meta-info=val\n  export default () => {\n    console.log('代码块')\n  }\n  ```\nexport default () => {\n  console.log('代码块')\n} 组件属性示例如下： {\n  code: \"export default () => {\\n    console.log('代码块')\\n}\"\n  language: \"js\"\n  filename: \"file.js\"\n  highlights: [2]\n  meta: \"meta-info=val\"\n} 有关语法高亮的更多内容，请查看高亮选项。 如果你想在文件名中使用 ]，需要用两个反斜杠进行转义：\\\\]。这是必须的，因为 JS 会自动转义字符串中的反斜杠，导致 \\] 变成 ]，从而破坏正则表达式。",{"id":2993,"title":2994,"titles":2995,"content":2996,"level":343},"/docs/components/prose#prosecode","ProseCode",[110],"`code`\n\n`const code: string = 'highlighted code inline'`{lang=\"ts\"}\ncodeconst code: string = 'highlighted code inline'",{"id":2998,"title":2999,"titles":3000,"content":3001,"level":343},"/docs/components/prose#proseh1","ProseH1",[110],"# H1 标题\nH1 标题",{"id":3003,"title":3004,"titles":3005,"content":3006,"level":343},"/docs/components/prose#proseh2","ProseH2",[110],"## H2 标题\nH2 标题",{"id":3008,"title":3009,"titles":3010,"content":3011,"level":343},"/docs/components/prose#proseh3","ProseH3",[110],"### H3 标题\nH3 标题",{"id":3013,"title":3014,"titles":3015,"content":3016,"level":343},"/docs/components/prose#proseh4","ProseH4",[110],"#### H4 标题\nH4 标题",{"id":3018,"title":3019,"titles":3020,"content":3021,"level":343},"/docs/components/prose#proseh5","ProseH5",[110],"##### H5 标题\nH5 标题",{"id":3023,"title":3024,"titles":3025,"content":3026,"level":343},"/docs/components/prose#proseh6","ProseH6",[110],"###### H6 标题\nH6 标题",{"id":3028,"title":3029,"titles":3030,"content":3031,"level":343},"/docs/components/prose#prosehr","ProseHr",[110],"下方分隔线。\n\n---\n\n上方分隔线。\n下方分隔线。上方分隔线。",{"id":3033,"title":3034,"titles":3035,"content":3036,"level":343},"/docs/components/prose#proseimg","ProseImg",[110],"![酷炫图片](https://nuxt.com/assets/design-kit/icon-green.png)",{"id":3038,"title":3039,"titles":3040,"content":3041,"level":343},"/docs/components/prose#proseul","ProseUl",[110],"- 只是\n- 一个\n- 无序\n- 列表\n只是一个无序列表",{"id":3043,"title":3044,"titles":3045,"content":3046,"level":343},"/docs/components/prose#proseli","ProseLi",[110],"- 列表项\n列表项",{"id":3048,"title":3049,"titles":3050,"content":3051,"level":343},"/docs/components/prose#proseol","ProseOl",[110],"1. Foo\n2. Bar\n3. Baz\nFooBarBaz",{"id":3053,"title":3054,"titles":3055,"content":3056,"level":343},"/docs/components/prose#prosep","ProseP",[110],"仅仅是一段文字。\n仅仅是一段文字。",{"id":3058,"title":3059,"titles":3060,"content":3061,"level":343},"/docs/components/prose#prosestrong","ProseStrong",[110],"**仅仅是一段加粗文字。**\n仅仅是一段加粗文字。",{"id":3063,"title":3064,"titles":3065,"content":3066,"level":343},"/docs/components/prose#proseem","ProseEm",[110],"_仅仅是一段斜体文字。_\n仅仅是一段斜体文字。",{"id":3068,"title":3069,"titles":3070,"content":3071,"level":343},"/docs/components/prose#prosetable","ProseTable",[110],"| 键  | 类型      | 描述       |\n| --- | --------- | --------- |\n| 1   | 极好      | 表格       |\n| 2   | 极好      | 数据       |\n| 3   | 极好      | 网站       |\n键类型描述1极好表格2极好数据3极好网站",{"id":3073,"title":3074,"titles":3075,"content":3076,"level":343},"/docs/components/prose#prosetbody","ProseTbody",[110],"包含在 ProseTable 示例中。",{"id":3078,"title":3079,"titles":3080,"content":3076,"level":343},"/docs/components/prose#prosetd","ProseTd",[110],{"id":3082,"title":3083,"titles":3084,"content":3076,"level":343},"/docs/components/prose#proseth","ProseTh",[110],{"id":3086,"title":3087,"titles":3088,"content":3076,"level":343},"/docs/components/prose#prosethead","ProseThead",[110],{"id":3090,"title":3091,"titles":3092,"content":3093,"level":343},"/docs/components/prose#prosetr","ProseTr",[110],"包含在 ProseTable 示例中。 查看这些组件的源代码请访问 GitHub。 html pre.shiki code .sMK4o, html code.shiki .sMK4o{--shiki-light:#39ADB5;--shiki-default:#89DDFF;--shiki-dark:#89DDFF}html pre.shiki code .sfazB, html code.shiki .sfazB{--shiki-light:#91B859;--shiki-default:#C3E88D;--shiki-dark:#C3E88D}html pre.shiki code .sDpXG, html code.shiki .sDpXG{--shiki-light:#E53935;--shiki-light-text-decoration:underline;--shiki-default:#F07178;--shiki-default-text-decoration:underline;--shiki-dark:#F07178;--shiki-dark-text-decoration:underline}html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .sCNwf, html code.shiki .sCNwf{--shiki-light:#FF5370;--shiki-light-font-style:italic;--shiki-default:#FF9CAC;--shiki-default-font-style:italic;--shiki-dark:#FF9CAC;--shiki-dark-font-style:italic}html pre.shiki code .s7zQu, html code.shiki .s7zQu{--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-default:#89DDFF;--shiki-default-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic}html pre.shiki code .sJsPd, html code.shiki .sJsPd{--shiki-light:#90A4AE90;--shiki-default:#EEFFFF90;--shiki-dark:#BABED890}html pre.shiki code .spNyl, html code.shiki .spNyl{--shiki-light:#9C3EDA;--shiki-default:#C792EA;--shiki-dark:#C792EA}html pre.shiki code .sTEyZ, html code.shiki .sTEyZ{--shiki-light:#90A4AE;--shiki-default:#EEFFFF;--shiki-dark:#BABED8}html pre.shiki code .s2Zo4, html code.shiki .s2Zo4{--shiki-light:#6182B8;--shiki-default:#82AAFF;--shiki-dark:#82AAFF}html pre.shiki code .swJcz, html code.shiki .swJcz{--shiki-light:#E53935;--shiki-default:#F07178;--shiki-dark:#F07178}html pre.shiki code .sbssI, html code.shiki .sbssI{--shiki-light:#F76D47;--shiki-default:#F78C6C;--shiki-dark:#F78C6C}html pre.shiki code .sBMFI, html code.shiki .sBMFI{--shiki-light:#E2931D;--shiki-default:#FFCB6B;--shiki-dark:#FFCB6B}html pre.shiki code .sQLHv, html code.shiki .sQLHv{--shiki-light:#90A4AE;--shiki-light-text-decoration:underline;--shiki-default:#EEFFFF;--shiki-default-text-decoration:underline;--shiki-dark:#BABED8;--shiki-dark-text-decoration:underline}html pre.shiki code .sHepR, html code.shiki .sHepR{--shiki-light:#39ADB5;--shiki-light-font-weight:bold;--shiki-default:#89DDFF;--shiki-default-font-weight:bold;--shiki-dark:#89DDFF;--shiki-dark-font-weight:bold}html pre.shiki code .so75L, html code.shiki .so75L{--shiki-light:#E53935;--shiki-light-font-weight:bold;--shiki-default:#F07178;--shiki-default-font-weight:bold;--shiki-dark:#F07178;--shiki-dark-font-weight:bold}html pre.shiki code .s5tWE, html code.shiki .s5tWE{--shiki-light:#E53935;--shiki-light-font-style:italic;--shiki-default:#F07178;--shiki-default-font-style:italic;--shiki-dark:#F07178;--shiki-dark-font-style:italic}",{"id":121,"title":3095,"titles":3096,"content":3097,"level":310},"服务器托管",[],"Node 预设是 Nuxt 和 Nuxt Content 的默认预设。它用于在 Node.js 上构建和运行 Nuxt 应用程序。",{"id":3099,"title":3100,"titles":3101,"content":3102,"level":343},"/docs/deploy/server#什么是-nodejs-预设","什么是 Node.js 预设？",[3095],"Node 预设是 Nuxt 的默认预设，构建项目时，Nuxt 会输出一个 Node.js 服务器，你可以通过 node .output/server/index.mjs 来运行它。",{"id":3104,"title":3105,"titles":3106,"content":3107,"level":343},"/docs/deploy/server#环境要求","环境要求",[3095],"如果你使用默认的 better-sqlite3 模块来操作 sqlite 数据库，则必须部署在 Glibc 版本高于 2.29 的操作系统上，例如 Debian 11、Ubuntu 20.04。 你可以使用 ldd --version 检查 Glibc 版本。更多信息请参见 issue #3248。",{"id":3109,"title":3110,"titles":3111,"content":3112,"level":343},"/docs/deploy/server#使用-nodejs-预设构建","使用 Node.js 预设构建",[3095],"使用 Nuxt 构建命令构建项目： nuxi build 使用 Node 服务器预设运行 nuxi build 后，结果将是一个启动可运行 Node 服务器的入口点。 $ node .output/server/index.mjs\nListening on http://localhost:3000 SQLite 数据库将在服务器启动时在服务器端加载，同时在浏览器中用于客户端导航或操作。 html pre.shiki code .sBMFI, html code.shiki .sBMFI{--shiki-light:#E2931D;--shiki-default:#FFCB6B;--shiki-dark:#FFCB6B}html pre.shiki code .sfazB, html code.shiki .sfazB{--shiki-light:#91B859;--shiki-default:#C3E88D;--shiki-dark:#C3E88D}html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"id":125,"title":3114,"titles":3115,"content":3116,"level":310},"静态托管",[],"如何使用静态站点生成将 Nuxt Content 部署到静态托管。",{"id":3118,"title":3119,"titles":3120,"content":3121,"level":343},"/docs/deploy/static#什么是静态托管","什么是静态托管？",[3114],"静态托管是一种托管类型，您的网站被构建并作为静态文件（HTML、CSS、JS）进行服务，任何静态文件服务器都可以提供这些文件。 Nuxt Content 可以使用 Nuxt 预渲染部署到静态托管。",{"id":3123,"title":3124,"titles":3125,"content":3126,"level":343},"/docs/deploy/static#使用-ssg-构建","使用 SSG 构建",[3114],"要使用静态站点生成构建您的应用，请运行以下命令： npx nuxi generate 此命令将创建一个包含您的静态站点的 dist/ 目录。您可以将其上传到任何静态托管服务。 Nuxt 将使用内部爬虫自动预渲染所有页面，您可以通过 nitro.prerender 选项自定义其行为。 了解更多关于 Nuxt 预渲染的信息。",{"id":3128,"title":3129,"titles":3130,"content":3131,"level":343},"/docs/deploy/static#数据库怎么办","数据库怎么办？",[3114],"Nuxt Content 将使用 WASM SQLite 在浏览器中加载数据库，这样，内容查询发生在客户端导航或操作时时，会在浏览器中运行。 html pre.shiki code .sBMFI, html code.shiki .sBMFI{--shiki-light:#E2931D;--shiki-default:#FFCB6B;--shiki-dark:#FFCB6B}html pre.shiki code .sfazB, html code.shiki .sfazB{--shiki-light:#91B859;--shiki-default:#C3E88D;--shiki-dark:#C3E88D}html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"id":129,"title":3133,"titles":3134,"content":3135,"level":310},"无服务器托管",[],"如何在各种无服务器平台上部署 Nuxt Content。",{"id":3137,"title":3138,"titles":3139,"content":3140,"level":343},"/docs/deploy/serverless#什么是无服务器托管","什么是无服务器托管？",[3133],"无服务器托管让你无需直接管理服务器即可运行代码和应用 —— 你只需上传代码，云服务提供商会自动处理所有基础设施、扩展和维护，只按你实际使用的计算资源收费。 在无服务器环境中，每个用户请求都会触发一个新的 Nuxt 服务器实例，这意味着每次都是从头开始启动。 这种“无状态”特性意味着你不能将数据存储在服务器内存中，也不能使用基于文件的数据库如 SQLite。因此，我们需要使用外部数据库服务（如 D1、Turso 或 PostgreSQL）来持久化数据，独立于你的服务器实例。",{"id":3142,"title":3143,"titles":3144,"content":3145,"level":343},"/docs/deploy/serverless#使用无服务器部署","使用无服务器部署",[3133],"该模块内置支持多个知名无服务器平台，你可以轻松将项目部署到它们上。查看各个平台的指南： NuxtHubCloudflare PagesVercel 如果你想部署到其他平台，可以按照下面的步骤进行。",{"id":3147,"title":3148,"titles":3149,"content":3150,"level":411},"/docs/deploy/serverless#_1-选择数据库服务","1. 选择数据库服务",[3133,3143],"在部署项目之前，你需要选择一个数据库服务： // 1. 创建一个 PostgreSQL 数据库\n// 2. 将 `POSTGRES_URL` 添加到环境变量中\nexport default defineNuxtConfig({\n  content: {\n    database: {\n      type: 'postgres',\n      url: process.env.POSTGRES_URL\n    }\n  }\n})\n// 1. 在你的 Cloudflare 账户中创建一个 D1 数据库\n// 2. 使用相同的绑定名将其链接到你的项目\nexport default defineNuxtConfig({\n  content: {\n    database: {\n      type: 'd1',\n      bindingName: '\u003CYOUR_BINDING_NAME>'\n    }\n  }\n})\n// 1. 在 Turso.tech 上创建一个 LibSQL 数据库\n// 2. 并添加 `TURSO_DATABASE_URL` 和 `TURSO_AUTH_TOKEN` 环境变量\nexport default defineNuxtConfig({\n  modules: ['@nuxt/content'],\n  content: {\n    database: {\n      type: 'libsql',\n      url: process.env.TURSO_DATABASE_URL,\n      authToken: process.env.TURSO_AUTH_TOKEN,\n    }\n  }\n})\n// 安装 NuxtHub 模块（参见 hub.nuxt.com）\nexport default defineNuxtConfig({\n  modules: ['@nuxt/content', '@nuxthub/core'],\n  content: {\n    database: {\n      type: 'd1',\n      binding: 'DB'\n    }\n  },\n  hub: {\n    database: true\n  }\n})",{"id":3152,"title":3153,"titles":3154,"content":3155,"level":411},"/docs/deploy/serverless#_2-部署你的项目","2. 部署你的项目",[3133,3143],"Nuxt Content 使用 Nuxt 部署预设来调整不同托管平台的构建流程。 以下无服务器平台支持零配置： CloudflareNuxtHubVercelNetlify 你只需将构建命令设置为： nuxi build 生成的输出将兼容所选平台。 链接的数据库将在服务器启动时于服务器端加载。浏览器端将加载一个 WASM SQLite 数据库，用于客户端导航和操作。 如果你想部署到 AWS Lambda 或 Azure Static Web Apps，你需要确保你的 sqlite 文件在 /tmp 目录下，因为这是唯一可写的文件夹。export default defineNuxtConfig({\n  modules: ['@nuxt/content'],\n  content: {\n    database: {\n      type: 'sqlite',\n      filename: '/tmp/contents.sqlite'\n    }\n  }\n})",{"id":3157,"title":3158,"titles":3159,"content":3160,"level":411},"/docs/deploy/serverless#_3-通过预渲染优化","3. 通过预渲染优化",[3133,3143],"由于每个请求都会触发一个新的 Nuxt 服务器实例，如果不预渲染部分页面，将影响你的无服务器应用性能。 为了优化你的无服务器应用，你可以使用 routeRules 选项预渲染页面： export default defineNuxtConfig({\n  routeRules: {\n    '/': { prerender: true }\n  }\n}) 我们推荐查看 NuxtHub 的预渲染指南，了解更多优化无服务器应用的不同策略，该指南适用于所有无服务器平台。 html pre.shiki code .sHwdD, html code.shiki .sHwdD{--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-default:#546E7A;--shiki-default-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic}html pre.shiki code .s7zQu, html code.shiki .s7zQu{--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-default:#89DDFF;--shiki-default-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic}html pre.shiki code .s2Zo4, html code.shiki .s2Zo4{--shiki-light:#6182B8;--shiki-default:#82AAFF;--shiki-dark:#82AAFF}html pre.shiki code .sTEyZ, html code.shiki .sTEyZ{--shiki-light:#90A4AE;--shiki-default:#EEFFFF;--shiki-dark:#BABED8}html pre.shiki code .sMK4o, html code.shiki .sMK4o{--shiki-light:#39ADB5;--shiki-default:#89DDFF;--shiki-dark:#89DDFF}html pre.shiki code .swJcz, html code.shiki .swJcz{--shiki-light:#E53935;--shiki-default:#F07178;--shiki-dark:#F07178}html pre.shiki code .sfazB, html code.shiki .sfazB{--shiki-light:#91B859;--shiki-default:#C3E88D;--shiki-dark:#C3E88D}html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .sfNiH, html code.shiki .sfNiH{--shiki-light:#FF5370;--shiki-default:#FF9CAC;--shiki-dark:#FF9CAC}html pre.shiki code .sBMFI, html code.shiki .sBMFI{--shiki-light:#E2931D;--shiki-default:#FFCB6B;--shiki-dark:#FFCB6B}",{"id":133,"title":132,"titles":3162,"content":3163,"level":310},[],"将您的内容应用部署到 NuxtHub 快速设置安装 @nuxthub/core 模块 nuxi module add hub使用 npx nuxthub deploy 将您的内容部署到 NuxtHub Nuxt Content 模块内置了与 NuxtHub 的集成，用于部署您的内容。 要启用 NuxtHub 集成，您需要安装 @nuxthub/core 模块并在 nuxt.config.ts 中注册。更高效的做法是使用 nuxi module 命令一次完成这两个操作。 npx nuxi module add hub 仅此而已 🎉 现在您可以使用 npx nuxthub deploy 命令将内容部署到 NuxtHub。 npx nuxthub deploy Nuxt Content 模块会自动启用 NuxtHub 数据库，并更新数据库配置以使用带有 DB 绑定名的 Cloudflare D1。（这是 NuxtHub 数据库的默认配置。）您也可以通过在 nuxt.config.ts 中提供自定义数据库配置来覆盖默认配置。 请查看 NuxtHub 文档 获取更多信息。 html pre.shiki code .sBMFI, html code.shiki .sBMFI{--shiki-light:#E2931D;--shiki-default:#FFCB6B;--shiki-dark:#FFCB6B}html pre.shiki code .sfazB, html code.shiki .sfazB{--shiki-light:#91B859;--shiki-default:#C3E88D;--shiki-dark:#C3E88D}html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"id":137,"title":136,"titles":3165,"content":3166,"level":310},[],"将您的内容应用部署到 Cloudflare Pages 快速设置使用 nuxi build --preset=cloudflare_pages 构建您的应用在 Cloudflare 控制面板中创建 D1 数据库并连接到项目，绑定名称为 DB部署/重新部署您的应用 Nuxt Content 模块内置与 Cloudflare Pages 的集成以部署您的内容。 模块将自动检测构建目标并准备 Cloudflare Pages 所需的配置。 您可以在 nuxi build 命令中使用 --preset=cloudflare_pages 选项，或者在 nuxt.config.ts 中配置该预设。 export default defineNuxtConfig({\n  nitro: {\n    preset: 'cloudflare_pages',\n  },\n}); 该模块需要连接一个 D1 数据库才能工作。默认情况下会使用 DB 作为绑定名称。您可以通过在 nuxt.config.ts 中提供自定义的数据库配置来覆盖该设置。 在创建新的 Cloudflare Pages 项目后，您需要创建一个新的 D1 数据库并将其连接到项目。请确保使用与模块相同的绑定名称。（默认是 DB） 就是这么简单 🎉 请查看： Nuxt 部署文档Cloudflare D1 文档Cloudflare Pages 文档 html pre.shiki code .s7zQu, html code.shiki .s7zQu{--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-default:#89DDFF;--shiki-default-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic}html pre.shiki code .s2Zo4, html code.shiki .s2Zo4{--shiki-light:#6182B8;--shiki-default:#82AAFF;--shiki-dark:#82AAFF}html pre.shiki code .sTEyZ, html code.shiki .sTEyZ{--shiki-light:#90A4AE;--shiki-default:#EEFFFF;--shiki-dark:#BABED8}html pre.shiki code .sMK4o, html code.shiki .sMK4o{--shiki-light:#39ADB5;--shiki-default:#89DDFF;--shiki-dark:#89DDFF}html pre.shiki code .swJcz, html code.shiki .swJcz{--shiki-light:#E53935;--shiki-default:#F07178;--shiki-dark:#F07178}html pre.shiki code .sfazB, html code.shiki .sfazB{--shiki-light:#91B859;--shiki-default:#C3E88D;--shiki-dark:#C3E88D}html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"id":141,"title":140,"titles":3168,"content":3169,"level":310},[],"将您的内容应用部署到 Cloudflare Workers 快速设置使用 cloudflare_module 预设和 2024-09-19 或更晚的兼容日期。在 Cloudflare 控制面板中创建一个 D1 数据库，并在项目中以 DB 绑定名称连接该数据库，同时在 nuxt.config.ts 文件中配置数据库。构建并部署您的应用 Nuxt Content 模块内置对 Cloudflare Workers 的集成，用于部署您的内容。 该模块会自动检测构建目标，并为 Cloudflare Workers 准备所需的配置。 您只需创建一个 Cloudflare D1 数据库并连接到您的项目即可。创建 D1 数据库后，应该在 nuxt.config.ts 文件中通过 nitro.cloudflare.wrangler.d1_databases 选项定义数据库配置。 默认情况下，模块会使用 DB 绑定名称。您可以通过在 nuxt.config.ts 中提供自定义的数据库配置来覆盖默认配置。 export default defineNuxtConfig({\n  compatibilityDate: \"2025-05-15\",\n  nitro: {\n    preset: 'cloudflare_module',\n    cloudflare: {\n      deployConfig: true,\n      wrangler: {\n        d1_databases: [\n          {\n            binding: 'DB',\n            database_name: 'database-name',\n            database_id: '*********-***-****-****-*********'\n          }\n        ]\n      },\n    },\n  }\n}) 如果您想使用不同的绑定名称，可以通过在 nuxt.config.ts 中提供自定义数据库配置进行覆盖。详见 数据库配置 要将 Nuxt 项目部署到 Cloudflare Workers，您需要使用 2024-09-19 或更晚的兼容日期。 使用 nuxi build 命令构建项目，然后可以用 wrangler deploy 命令部署项目。 npx wrangler deploy 完成！ 🎉 查看： Nuxt 部署文档Cloudflare D1 文档Cloudflare Workers 文档 html pre.shiki code .s7zQu, html code.shiki .s7zQu{--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-default:#89DDFF;--shiki-default-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic}html pre.shiki code .s2Zo4, html code.shiki .s2Zo4{--shiki-light:#6182B8;--shiki-default:#82AAFF;--shiki-dark:#82AAFF}html pre.shiki code .sTEyZ, html code.shiki .sTEyZ{--shiki-light:#90A4AE;--shiki-default:#EEFFFF;--shiki-dark:#BABED8}html pre.shiki code .sMK4o, html code.shiki .sMK4o{--shiki-light:#39ADB5;--shiki-default:#89DDFF;--shiki-dark:#89DDFF}html pre.shiki code .swJcz, html code.shiki .swJcz{--shiki-light:#E53935;--shiki-default:#F07178;--shiki-dark:#F07178}html pre.shiki code .sfazB, html code.shiki .sfazB{--shiki-light:#91B859;--shiki-default:#C3E88D;--shiki-dark:#C3E88D}html pre.shiki code .sfNiH, html code.shiki .sfNiH{--shiki-light:#FF5370;--shiki-default:#FF9CAC;--shiki-dark:#FF9CAC}html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .sBMFI, html code.shiki .sBMFI{--shiki-light:#E2931D;--shiki-default:#FFCB6B;--shiki-dark:#FFCB6B}",{"id":145,"title":144,"titles":3171,"content":3172,"level":310},[],"将您的内容应用部署到 Vercel 快速设置执行 npx vercel deploy 命令，或前往 Vercel 仪表盘并使用 Git 仓库创建一个新项目。 Nuxt Content 项目可以零配置部署到 Vercel。该模块会自动检测 Vercel 环境，并准备部署所需的配置。 您只需执行 npx vercel deploy 命令，或前往 Vercel 仪表盘并使用 Git 仓库创建新项目。 就是这么简单 🎉 默认情况下，模块将在 Vercel 的 /tmp 目录使用 SQLite 数据库。您可以通过提供自己的数据库配置来覆盖默认配置。Vercel 支持多种数据库服务商。您可以通过在 nuxt.config.ts 中提供正确的连接字符串来使用其中任何一个。 参考链接： Nuxt 部署文档Vercel 文档",{"id":149,"title":148,"titles":3174,"content":3175,"level":310},[],"将您的内容应用部署到 Netlify 快速设置进入 Netlify 仪表盘，使用 git 仓库创建一个新项目。在 依赖管理 下的 站点配置 中，将 Node 版本更改为 20.x 或更高。进入 部署，重试上一次部署。 Nuxt Content 项目可以无需配置即可部署到 Netlify。该模块会自动检测 Netlify 环境并为 Netlify 准备所需的配置。 您只需进入 Netlify 仪表盘，使用 git 仓库创建一个新项目即可。 默认情况下，Netlify 使用 Node.js 18.x 版本，但该版本不受模块支持。您需要在 依赖管理 下的 站点配置 中更改 Node.js 版本。 就是这么简单 🎉 参考资料： Nuxt 部署文档Netlify 文档",{"id":153,"title":152,"titles":3177,"content":3178,"level":310},[],"将您的 Content 应用部署到 AWS Amplify 快速设置在您的项目中安装 sqlite3 包。访问 AWS Amplify 控制台，使用 Git 仓库创建一个新项目并部署应用。 Nuxt Content 项目可以零配置部署到 AWS Amplify。\n该模块会自动检测 AWS Amplify 环境，并准备好部署所需的配置。 您只需在项目中安装 sqlite3 包，然后访问 AWS Amplify 控制台，使用 Git 仓库创建一个新项目即可。 就是这么简单 🎉 默认情况下，模块会使用位于 /tmp 目录下的 SQLite 数据库。您也可以通过提供自定义数据库配置来覆盖默认配置。 参考链接： Nuxt 部署文档",{"id":157,"title":156,"titles":3180,"content":3181,"level":310},[],"使用 Docker 部署您的内容应用 Docker 是一个流行的容器化平台，它允许您将应用程序及其所有依赖项打包到一个单独的容器中。这样可以轻松地在任何支持 Docker 的平台上部署您的内容应用。",{"id":3183,"title":3184,"titles":3185,"content":3186,"level":343},"/docs/deploy/docker#使用-nodejs-镜像","使用 Node.js 镜像",[156],"使用 Docker 的 Node.js 镜像，您可以部署您的内容应用。您只需要创建一个 Dockerfile 并构建镜像。以下是一个示例 Dockerfile： # 构建阶段 1\n\nFROM node:22-alpine AS build\nWORKDIR /app\n\nRUN corepack enable\n\n# 复制 package.json 和您的锁文件，这里添加 pnpm-lock.yaml 作为示例\nCOPY package.json pnpm-lock.yaml .npmrc ./\n\n# 安装依赖\nRUN pnpm i\n\n# 复制整个项目\nCOPY . ./\n\n# 构建项目\nRUN pnpm run build\n\n# 构建阶段 2\n\nFROM node:22-alpine\nWORKDIR /app\n\n# 只需要从构建阶段复制 `.output` 文件夹\nCOPY --from=build /app/.output/ ./\n\n# 修改端口和主机\nENV PORT=80\nENV HOST=0.0.0.0\n\nEXPOSE 80\n\nCMD [\"node\", \"/app/server/index.mjs\"]",{"id":3188,"title":3189,"titles":3190,"content":3191,"level":343},"/docs/deploy/docker#使用-bun-镜像","使用 Bun 镜像",[156],"如果您喜欢使用 Bun，可以使用官方的 Bun 镜像。以下是一个示例 Dockerfile： # 使用官方 Bun 镜像\n# 所有版本见 https://hub.docker.com/r/oven/bun/tags\nFROM oven/bun:1 AS build\nWORKDIR /app\n\nCOPY package.json bun.lockb ./\n\n# 使用 ignore-scripts 避免构建某些 node 模块，如 better-sqlite3\nRUN bun install --frozen-lockfile --ignore-scripts\n\n# 复制整个项目\nCOPY . .\n\nRUN bun --bun run build\n\n# 将生产依赖和源码复制到最终镜像\nFROM oven/bun:1 AS production\nWORKDIR /app\n\n# 只需要从构建阶段复制 `.output` 文件夹\nCOPY --from=build /app/.output /app\n\n# 运行应用\nEXPOSE 3000/tcp\nENTRYPOINT [ \"bun\", \"--bun\", \"run\", \"/app/server/index.mjs\" ] html pre.shiki code .sHwdD, html code.shiki .sHwdD{--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-default:#546E7A;--shiki-default-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic}html pre.shiki code .sbssI, html code.shiki .sbssI{--shiki-light:#F76D47;--shiki-default:#F78C6C;--shiki-dark:#F78C6C}html pre.shiki code .sTEyZ, html code.shiki .sTEyZ{--shiki-light:#90A4AE;--shiki-default:#EEFFFF;--shiki-dark:#BABED8}html pre.shiki code .sfazB, html code.shiki .sfazB{--shiki-light:#91B859;--shiki-default:#C3E88D;--shiki-dark:#C3E88D}html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"id":166,"title":165,"titles":3193,"content":3194,"level":310},[],"Learn how to create multi-language websites using Nuxt Content with the @nuxtjs/i18n module. Nuxt Content integrates with @nuxtjs/i18n to create multi-language websites. When both modules are configured together, you can organize content by language and automatically serve the correct content based on the user's locale.",{"id":3196,"title":3197,"titles":3198,"content":3199,"level":343},"/docs/integrations/i18n#setup","Setup",[165],"Install the required modulenpm install @nuxtjs/i18n\nConfigure your nuxt.config.tsexport default defineNuxtConfig({\n  modules: ['@nuxt/content', '@nuxtjs/i18n'],\n  i18n: {\n    locales: [\n      { code: 'en', name: 'English', language: 'en-US', dir: 'ltr' },\n      { code: 'fr', name: 'French', language: 'fr-FR' },\n      { code: 'fa', name: 'Farsi', language: 'fa-IR', dir: 'rtl' },\n    ],\n    strategy: 'prefix_except_default',\n    defaultLocale: 'en',\n  }\n})\nDefine collections for each languageCreate separate collections for each language in your content.config.ts:const commonSchema = ...;\n\nexport default defineContentConfig({\n  collections: {\n    // English content collection\n    content_en: defineCollection({\n      type: 'page',\n      source: {\n        include: 'en/**',\n        prefix: '',\n      },\n      schema: commonSchema,\n    }),\n    // French content collection\n    content_fr: defineCollection({\n      type: 'page',\n      source: {\n        include: 'fr/**',\n        prefix: '',\n      },\n      schema: commonSchema,\n    }),\n    // Farsi content collection\n    content_fa: defineCollection({\n      type: 'page',\n      source: {\n        include: 'fa/**',\n        prefix: '',\n      },\n      schema: commonSchema,\n    }),\n  },\n})\nCreate dynamic pagesCreate a catch-all page that fetches content based on the current locale:\u003Cscript setup lang=\"ts\">\nimport { withLeadingSlash } from 'ufo'\nimport type { Collections } from '@nuxt/content'\n\nconst route = useRoute()\nconst { locale } = useI18n()\nconst slug = computed(() => withLeadingSlash(String(route.params.slug)))\n\nconst { data: page } = await useAsyncData('page-' + slug.value, async () => {\n  // Build collection name based on current locale\n  const collection = ('content_' + locale.value) as keyof Collections\n  const content = await queryCollection(collection).path(slug.value).first()\n\n  // Optional: fallback to default locale if content is missing\n  if (!content && locale.value !== 'en') {\n    return await queryCollection('content_en').path(slug.value).first()\n  }\n\n  return content\n}, {\n  watch: [locale], // Refetch when locale changes\n})\n\u003C/script>\n\n\u003Ctemplate>\n  \u003CContentRenderer v-if=\"page\" :value=\"page\" />\n  \u003Cdiv v-else>\n    \u003Ch1>Page not found\u003C/h1>\n    \u003Cp>This page doesn't exist in {{ locale }} language.\u003C/p>\n  \u003C/div>\n\u003C/template> That's it! 🚀 Your multi-language content site is ready.",{"id":3201,"title":3202,"titles":3203,"content":3204,"level":343},"/docs/integrations/i18n#content-structure","Content Structure",[165],"Organize your content files in language-specific folders to match your collections: content/\n  en/\n    index.md\n    about.md\n    blog/\n      post-1.md\n  fr/\n    index.md\n    about.md\n    blog/\n      post-1.md\n  fa/\n    index.md\n    about.md Each language folder should contain the same structure to ensure content parity across locales.",{"id":3206,"title":3207,"titles":3208,"content":3209,"level":343},"/docs/integrations/i18n#fallback-strategy","Fallback Strategy",[165],"You can implement a fallback strategy to show content from the default locale when content is missing in the current locale: const { data: page } = await useAsyncData('page-' + slug.value, async () => {\n  const collection = ('content_' + locale.value) as keyof Collections\n  let content = await queryCollection(collection).path(slug.value).first()\n\n  // Fallback to default locale if content is missing\n  if (!content && locale.value !== 'en') {\n    content = await queryCollection('content_en').path(slug.value).first()\n  }\n\n  return content\n}) Make sure to handle missing content gracefully and provide clear feedback to users when content is not available in their preferred language.",{"id":3211,"title":3212,"titles":3213,"content":3214,"level":343},"/docs/integrations/i18n#complete-examples","Complete Examples",[165],"You can see a complete working example: Source: https://github.com/nuxt/content/tree/main/examples/i18nLive Demo: https://content3-i18n.nuxt.dev/ html pre.shiki code .sBMFI, html code.shiki .sBMFI{--shiki-light:#E2931D;--shiki-default:#FFCB6B;--shiki-dark:#FFCB6B}html pre.shiki code .sfazB, html code.shiki .sfazB{--shiki-light:#91B859;--shiki-default:#C3E88D;--shiki-dark:#C3E88D}html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .s7zQu, html code.shiki .s7zQu{--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-default:#89DDFF;--shiki-default-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic}html pre.shiki code .s2Zo4, html code.shiki .s2Zo4{--shiki-light:#6182B8;--shiki-default:#82AAFF;--shiki-dark:#82AAFF}html pre.shiki code .sTEyZ, html code.shiki .sTEyZ{--shiki-light:#90A4AE;--shiki-default:#EEFFFF;--shiki-dark:#BABED8}html pre.shiki code .sMK4o, html code.shiki .sMK4o{--shiki-light:#39ADB5;--shiki-default:#89DDFF;--shiki-dark:#89DDFF}html pre.shiki code .swJcz, html code.shiki .swJcz{--shiki-light:#E53935;--shiki-default:#F07178;--shiki-dark:#F07178}html pre.shiki code .spNyl, html code.shiki .spNyl{--shiki-light:#9C3EDA;--shiki-default:#C792EA;--shiki-dark:#C792EA}html pre.shiki code .sHwdD, html code.shiki .sHwdD{--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-default:#546E7A;--shiki-default-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic}",{"id":170,"title":169,"titles":3216,"content":3217,"level":310},[],"学习如何使用 Nuxt Content 和 Nuxt LLMs 模块生成适用于人工智能的内容文件。 Nuxt Content 模块集成了 nuxt-llms，用于为大型语言模型 (LLMs) 准备内容。当检测到 nuxt-llms 时，Content 模块会自动扩展 LLMs 模块，并将类型为 page 的集合注入到 LLMs 模块中。🚀",{"id":3219,"title":213,"titles":3220,"content":3221,"level":343},"/docs/integrations/llms#设置",[169],"安装所需模块npm install nuxt-llms\n配置你的 nuxt.config.tsexport default defineNuxtConfig({\n  modules: ['@nuxt/content', 'nuxt-llms'],\n  llms: {\n    domain: 'https://your-site.com',\n    title: '你的站点名称',\n    description: '你站点的简要描述',\n  },\n}) 就是这么简单 🚀 /llms.txt 文件会被自动生成并预渲染。",{"id":3223,"title":3224,"titles":3225,"content":3226,"level":343},"/docs/integrations/llms#分区","分区",[169],"在生成内容时，你可以创建自定义分区，将内容处理为适合 LLM 使用的格式。 你可以向 llms.sections 数组中添加自定义分区，并为每个分区定义 contentCollection 和 contentFilters 选项。 如果在 contentCollection 选项中未定义分区，模块将仅把 page 集合添加到 LLMs 模块。",{"id":3228,"title":3229,"titles":3230,"content":3231,"level":411},"/docs/integrations/llms#contentcollection","contentCollection",[169,3224],"此选项指定要使用哪个内容集合作为来源。 export default defineNuxtConfig({\n  llms: {\n    sections: [\n      {\n        title: '文档',\n        description: '技术文档和指南',\n        contentCollection: 'docs',\n       },\n    ],\n  },\n})",{"id":3233,"title":3234,"titles":3235,"content":3236,"level":411},"/docs/integrations/llms#contentfilters","contentFilters",[169,3224],"此选项定义用于选择集合中特定内容的过滤器。 你可以精确控制包含哪些内容。每个过滤器包含： field：要检查的内容属性operator：比较运算符（=、\u003C>、>、\u003C、LIKE、IN、NOT IN、IS NULL、IS NOT NULL 等）value：比较的值 export default defineNuxtConfig({\n  llms: {\n    sections: [\n      {\n        title: '文档',\n        description: '技术文档和指南',\n        contentCollection: 'docs',\n        contentFilters: [\n            // 只包含 Markdown 文件\n            { field: 'extension', operator: '=', value: 'md' },\n            // 只包含已发布的内容\n            { field: 'draft', operator: '\u003C>', value: true },\n            // 按目录过滤\n            { field: 'path', operator: 'LIKE', value: '/guide%' },\n        ]\n      },\n    ],\n  },\n}) 查看 nuxt-llms 文档以获取有关该模块的更多信息。 html pre.shiki code .sBMFI, html code.shiki .sBMFI{--shiki-light:#E2931D;--shiki-default:#FFCB6B;--shiki-dark:#FFCB6B}html pre.shiki code .sfazB, html code.shiki .sfazB{--shiki-light:#91B859;--shiki-default:#C3E88D;--shiki-dark:#C3E88D}html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .s7zQu, html code.shiki .s7zQu{--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-default:#89DDFF;--shiki-default-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic}html pre.shiki code .s2Zo4, html code.shiki .s2Zo4{--shiki-light:#6182B8;--shiki-default:#82AAFF;--shiki-dark:#82AAFF}html pre.shiki code .sTEyZ, html code.shiki .sTEyZ{--shiki-light:#90A4AE;--shiki-default:#EEFFFF;--shiki-dark:#BABED8}html pre.shiki code .sMK4o, html code.shiki .sMK4o{--shiki-light:#39ADB5;--shiki-default:#89DDFF;--shiki-dark:#89DDFF}html pre.shiki code .swJcz, html code.shiki .swJcz{--shiki-light:#E53935;--shiki-default:#F07178;--shiki-dark:#F07178}html pre.shiki code .sHwdD, html code.shiki .sHwdD{--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-default:#546E7A;--shiki-default-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic}html pre.shiki code .sfNiH, html code.shiki .sfNiH{--shiki-light:#FF5370;--shiki-default:#FF9CAC;--shiki-dark:#FF9CAC}",{"id":180,"title":179,"titles":3238,"content":3239,"level":310},[],"使用 Nuxt Content 实现网站全文搜索 Content 模块提供了一个便捷的工具 queryCollectionSearchSections，用于将内容文件拆分成可搜索的章节。这对于在网站中实现全文搜索非常有用。你可以将该工具的结果与 Nuxt UI Content Search 或其他搜索库如 Fuse.js、minisearch 等结合使用。",{"id":3241,"title":275,"titles":3242,"content":3243,"level":343},"/docs/advanced/fulltext-search#nuxt-ui-pro",[179],"Nuxt UI Pro 提供了一个现成的全文搜索组件。你可以将 queryCollectionSearchSections 的结果传递给该组件的 files 属性来使用。 详细阅读 Nuxt UI Content Search。 \u003Cscript setup lang=\"ts\">\nconst { data: navigation } = await useAsyncData('navigation', () => queryCollectionNavigation('docs'))\nconst { data: files } = await useAsyncData('search', () => queryCollectionSearchSections('docs'))\n\nconst searchTerm = ref('')\n\u003C/script>\n\n\u003Ctemplate>\n  \u003CUContentSearch\n    v-model:search-term=\"searchTerm\"\n    :files=\"files\"\n    :navigation=\"navigation\"\n    :fuse=\"{ resultLimit: 42 }\"\n  />\n\u003C/template>",{"id":3245,"title":606,"titles":3246,"content":3247,"level":343},"/docs/advanced/fulltext-search#minisearch-示例",[179],"详细阅读 minisearch。 \u003Cscript setup lang=\"ts\">\nimport MiniSearch from 'minisearch'\n\nconst query = ref('')\nconst { data } = await useAsyncData('search', () => queryCollectionSearchSections('docs'))\n\nconst miniSearch = new MiniSearch({\n  fields: ['title', 'content'],\n  storeFields: ['title', 'content'],\n  searchOptions: {\n    prefix: true,\n    fuzzy: 0.2,\n  },\n})\n\n// 将数据添加到 MiniSearch 实例中\nminiSearch.addAll(toValue(data.value))\nconst result = computed(() => miniSearch.search(toValue(query)))\n\u003C/script>\n\n\u003Ctemplate>\n  \u003CUContainer class=\"p-4\">\n    \u003CUCard>\n      \u003CUInput v-model=\"query\" placeholder=\"搜索...\" />\n      \u003Cul>\n        \u003Cli v-for=\"link of result\" :key=\"link.id\" class=\"mt-2\">\n          \u003CNuxtLink :to=\"link.id\">{{ link.title }}\u003C/NuxtLink>\n          \u003Cp class=\"text-gray-500 text-xs\">{{ link.content }}\u003C/p>\n        \u003C/li>\n      \u003C/ul>\n    \u003C/UCard>\n  \u003C/UContainer>\n\u003C/template>",{"id":3249,"title":1189,"titles":3250,"content":3251,"level":343},"/docs/advanced/fulltext-search#fusejs-示例",[179],"详细阅读 Fuse.js。 \u003Cscript setup lang=\"ts\">\nimport Fuse from 'fuse.js'\n\nconst query = ref('')\nconst { data } = await useAsyncData('search-data', () => queryCollectionSearchSections('docs'))\n\nconst fuse = new Fuse(data.value, {\n  keys: ['title', 'description']\n})\n\nconst result = computed(() => fuse.search(toValue(query)).slice(0, 10))\n\u003C/script>\n\n\u003Ctemplate>\n  \u003CUContainer class=\"p-4\">\n    \u003CUCard>\n      \u003CUInput v-model=\"query\" placeholder=\"搜索...\" class=\"w-full\" />\n      \u003Cul>\n        \u003Cli v-for=\"link of result\" :key=\"link.item.id\" class=\"mt-2\">\n          \u003CUButton variant=\"ghost\" class=\"w-full\" :to=\"link.item.id\">\n            {{ link.item.title }}\n            \u003Cspan class=\"text-gray-500 text-xs\">\n              {{ link.item.content?.slice(0, 100) }}...\n            \u003C/span>\n          \u003C/UButton>\n        \u003C/li>\n      \u003C/ul>\n    \u003C/UCard>\n  \u003C/UContainer>\n\u003C/template> html pre.shiki code .sMK4o, html code.shiki .sMK4o{--shiki-light:#39ADB5;--shiki-default:#89DDFF;--shiki-dark:#89DDFF}html pre.shiki code .swJcz, html code.shiki .swJcz{--shiki-light:#E53935;--shiki-default:#F07178;--shiki-dark:#F07178}html pre.shiki code .spNyl, html code.shiki .spNyl{--shiki-light:#9C3EDA;--shiki-default:#C792EA;--shiki-dark:#C792EA}html pre.shiki code .sfazB, html code.shiki .sfazB{--shiki-light:#91B859;--shiki-default:#C3E88D;--shiki-dark:#C3E88D}html pre.shiki code .sTEyZ, html code.shiki .sTEyZ{--shiki-light:#90A4AE;--shiki-default:#EEFFFF;--shiki-dark:#BABED8}html pre.shiki code .s7zQu, html code.shiki .s7zQu{--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-default:#89DDFF;--shiki-default-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic}html pre.shiki code .s2Zo4, html code.shiki .s2Zo4{--shiki-light:#6182B8;--shiki-default:#82AAFF;--shiki-dark:#82AAFF}html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .sfNiH, html code.shiki .sfNiH{--shiki-light:#FF5370;--shiki-default:#FF9CAC;--shiki-dark:#FF9CAC}html pre.shiki code .sbssI, html code.shiki .sbssI{--shiki-light:#F76D47;--shiki-default:#F78C6C;--shiki-dark:#F78C6C}html pre.shiki code .sHwdD, html code.shiki .sHwdD{--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-default:#546E7A;--shiki-default-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic}",{"id":184,"title":183,"titles":3253,"content":3254,"level":310},[],"访问应用中的内容原始数据 在内容版本 2 中，有很多关于在生产环境访问内容原始数据的请求。在内容版本 3 中，可以将内容原始数据传递到生产环境。 为了将原始内容传递到生产环境，您需要在集合的 schema 中定义 rawbody 字段。就是这么简单。 Nuxt Content 会检测到 schema 中这个神奇的字段，并用原始内容填充它。 import { defineCollection, defineContentConfig, z } from '@nuxt/content'\n\nexport default defineContentConfig({\n  collections: {\n    docs: defineCollection({\n      source: '**',\n      type: 'page',\n      schema: z.object({\n        rawbody: z.string()\n      })\n    })\n  }\n}) 您可以使用 queryCollection() 来获取原始内容。 \u003Cscript setup lang=\"ts\">\nconst route = useRoute()\nconst { data } = useAsyncData('page-' + route.path, () => queryCollection('docs').path(route.path).first())\n\u003C/script>\n\n\u003Ctemplate>\n  \u003Cpre>{{ data.rawbody }}\u003C/pre>\n\u003C/template> 如果您不想传递某个文件的原始内容，可以在该文件的 frontmatter 中添加 rawbody: ''。rawbody 的自动填充值就像一个默认值，当您在 frontmatter 中定义了 rawbody 时，会覆盖自动填写的值。 ---\ntitle: 我的页面\nrawbody: ''\n--- 重要的是要确保 frontmatter 字段的数据类型与集合 schema 中定义的类型相同。在本例中，rawbody 是字符串类型，您应考虑传递空字符串。请勿使用布尔值或其他类型的值。 html pre.shiki code .s7zQu, html code.shiki .s7zQu{--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-default:#89DDFF;--shiki-default-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic}html pre.shiki code .sMK4o, html code.shiki .sMK4o{--shiki-light:#39ADB5;--shiki-default:#89DDFF;--shiki-dark:#89DDFF}html pre.shiki code .sTEyZ, html code.shiki .sTEyZ{--shiki-light:#90A4AE;--shiki-default:#EEFFFF;--shiki-dark:#BABED8}html pre.shiki code .sfazB, html code.shiki .sfazB{--shiki-light:#91B859;--shiki-default:#C3E88D;--shiki-dark:#C3E88D}html pre.shiki code .s2Zo4, html code.shiki .s2Zo4{--shiki-light:#6182B8;--shiki-default:#82AAFF;--shiki-dark:#82AAFF}html pre.shiki code .swJcz, html code.shiki .swJcz{--shiki-light:#E53935;--shiki-default:#F07178;--shiki-dark:#F07178}html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .spNyl, html code.shiki .spNyl{--shiki-light:#9C3EDA;--shiki-default:#C792EA;--shiki-dark:#C792EA}",{"id":188,"title":3256,"titles":3257,"content":3258,"level":310},"数据库",[],"Nuxt Content 如何存储和检索内容 在 Content v3 中，我们引入了基于 SQLite 的强大存储层，提供了一种强大且高效的内容管理方法。这相比之前基于文件的存储系统是一个显著的提升，后者在性能和可扩展性方面存在局限。 在 Content v2 中，系统在 Nitro 运行时读取并解析内容，为每个内容文件创建缓存文件以存储解析数据。这种方法给网站运行时带来了相当大的开销。生产环境中的 I/O 时间较长，因为模块必须加载所有缓存文件来搜索内容。此外，由于内容缺乏优化和压缩，导致包体积较大，特别在边缘环境中表现尤为明显。 Content v3 的内容管理包含三个关键步骤，旨在简化流程并提升性能。",{"id":3260,"title":3261,"titles":3262,"content":3263,"level":343},"/docs/advanced/database#生成数据库转储文件","生成数据库转储文件",[3256],"对于项目中的每个集合，模块从定义的源读取内容并解析成抽象语法树（AST）。基于集合的模式为每个集合创建特定的表。然后将解析后的内容插入对应的表中，确保数据结构与定义的模式一致，以实现最佳查询效果。所有内容最终保存到转储文件中。",{"id":3265,"title":3266,"titles":3267,"content":3268,"level":343},"/docs/advanced/database#冷启动时还原转储文件","冷启动时还原转储文件",[3256],"在运行时，当应用执行首次内容查询时，模块会读取前一步生成的转储文件，并将其还原到目标数据库中。该过程快速且针对不同部署模式和平台进行了优化。 模块采用了特殊的完整性检查机制，确保数据库内容更新到最新状态。该完整性检查机制还能防止重复导入，保持数据存储的完整性和准确性。",{"id":3270,"title":3271,"titles":3272,"content":3273,"level":343},"/docs/advanced/database#浏览器中的-wasm-sqlite","浏览器中的 WASM SQLite",[3256],"针对客户端导航，模块采用类似的方法。当应用执行首次内容查询时，会从服务器下载生成的转储文件，并在浏览器中初始化本地 SQLite 数据库。从此之后，所有查询均在本地执行，无需调用服务器，大大提升了应用响应速度并提供无缝用户体验。 这一架构不仅提升了性能，还支持离线功能，使用户即使在无网络连接时也能访问内容。服务器端与客户端的结合确保 Nuxt Content v3 功能强大且灵活，适用于广泛的用例和环境。",{"id":192,"title":3275,"titles":3276,"content":3277,"level":310},"工具",[],"调试工具 Nuxt Content 使用 SQLite 数据库 (contents.sqlite) 来高效地存储和查询内容。如果你遇到 内容丢失、查询缓慢或数据库问题，调试你的 SQLite 数据库将会有帮助！ 一个简单的检查方法？使用 SQLite VS Code 扩展！",{"id":3279,"title":3280,"titles":3281,"content":3282,"level":343},"/docs/advanced/tools#安装-sqlite-vs-code-扩展","安装 SQLite VS Code 扩展",[3275],"打开 Visual Studio Code。进入 扩展 面板（Windows/Linux：Ctrl+Shift+X，Mac：Cmd+Shift+X）。搜索 \"SQLite\"（由 alexcvzz 发布）并安装。打开你的 Nuxt Content 数据库 (.data/content/contents.sqlite)。 如果你看不到 contents.sqlite，请先启动你的 Nuxt 应用：npx nuxi dev",{"id":3284,"title":3285,"titles":3286,"content":3287,"level":343},"/docs/advanced/tools#找到你的-sqlite-数据库","找到你的 SQLite 数据库",[3275],"Nuxt Content 将数据库存储在： .data/content/contents.sqlite 该文件会在你启动 Nuxt 应用时自动生成。无需手动创建！",{"id":3289,"title":3290,"titles":3291,"content":3292,"level":343},"/docs/advanced/tools#打开并浏览数据库","打开并浏览数据库",[3275],"在 VS Code 中 右键点击 contents.sqlite。选择 “打开数据库”。展开 数据库资源管理器 面板查看表和数据。",{"id":3294,"title":3295,"titles":3296,"content":303,"level":343},"/docs/advanced/tools#解决常见问题","解决常见问题",[3275],{"id":3298,"title":3299,"titles":3300,"content":3301,"level":411},"/docs/advanced/tools#内容没有显示","内容没有显示？",[3275,3295],"检查数据库是否存在（.data/content/contents.sqlite）。执行清理并重启 Nuxt：\nnpx nuxi cleanup && npx nuxi dev\n检查数据库内是否有内容（执行 SQL 查询）。",{"id":3303,"title":3304,"titles":3305,"content":3306,"level":411},"/docs/advanced/tools#手动重置数据库","手动重置数据库",[3275,3295],"如果问题非常严重，可以尝试重置数据库： 删除数据库文件：\nrm -rf .data/content/contents.sqlite\n运行清理以移除旧缓存：\nnpx nuxi cleanup\n重启 Nuxt 以生成全新的数据库：\nnpx nuxi dev 清理操作会删除缓存数据，别担心——它会自动重新生成！",{"id":3308,"title":3309,"titles":3310,"content":3311,"level":343},"/docs/advanced/tools#更多调试工具","更多调试工具",[3275],"如果 VS Code 不够用，可以尝试： 🖥️ DB Browser for SQLite – 一个用于检查和修改数据库的可视化工具。🛠️ SQLite 命令行 – 在终端使用 sqlite3 contents.sqlite 执行 SQL 查询。 html pre.shiki code .sBMFI, html code.shiki .sBMFI{--shiki-light:#E2931D;--shiki-default:#FFCB6B;--shiki-dark:#FFCB6B}html pre.shiki code .sfazB, html code.shiki .sfazB{--shiki-light:#91B859;--shiki-default:#C3E88D;--shiki-dark:#C3E88D}html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .sMK4o, html code.shiki .sMK4o{--shiki-light:#39ADB5;--shiki-default:#89DDFF;--shiki-dark:#89DDFF}",{"id":196,"title":3313,"titles":3314,"content":3315,"level":310},"Hooks",[],"使用 Nuxt 构建时钩子修改内容",{"id":3317,"title":3318,"titles":3319,"content":3320,"level":343},"/docs/advanced/hooks#contentfilebeforeparse","content:file:beforeParse",[3313],"此钩子在内容解析之前调用。 它可用于修改来自 file 的原始内容，或修改转换选项。 export default defineNuxtConfig({\n  hooks: {\n    'content:file:beforeParse'(ctx) {\n      // ...\n    }\n  }\n})",{"id":3322,"title":3323,"titles":3324,"content":3325,"level":343},"/docs/advanced/hooks#contentfileafterparse","content:file:afterParse",[3313],"此钩子在内容解析之后且保存到数据库之前调用。 export default defineNuxtConfig({\n  hooks: {\n    'content:file:afterParse'(ctx) {\n      // ...\n    }\n  }\n})",{"id":3327,"title":3328,"titles":3329,"content":3330,"level":343},"/docs/advanced/hooks#示例用法","示例用法",[3313],"export default defineNuxtConfig({\n  // ...\n  hooks: {\n    'content:file:beforeParse'(ctx) {\n      const { file } = ctx;\n\n      if (file.id.endsWith(\".md\")) {\n        file.body = file.body.replace(/react/gi, \"Vue\");\n      }\n    },\n    'content:file:afterParse'(ctx) {\n      const { file, content } = ctx;\n\n      const wordsPerMinute = 180;\n      const text = typeof file.body === 'string' ? file.body : '';\n      const wordCount = text.split(/\\s+/).length;\n\n      content.readingTime = Math.ceil(wordCount / wordsPerMinute);\n    }\n  }\n}) 在 content:file:afterParse 钩子中，我们向内容对象添加了一个自定义属性。为了能在页面中通过 queryCollection() 访问该属性，我们首先需要在内容模式中定义它。export default defineContentConfig({\n  collections: {\n    content: defineCollection({\n      type: 'page',\n      source: '**/*.md',\n      schema: z.object({\n        readingTime: z.number().optional()\n      })\n    })\n  }\n}); html pre.shiki code .sBMFI, html code.shiki .sBMFI{--shiki-light:#E2931D;--shiki-default:#FFCB6B;--shiki-dark:#FFCB6B}html pre.shiki code .sMK4o, html code.shiki .sMK4o{--shiki-light:#39ADB5;--shiki-default:#89DDFF;--shiki-dark:#89DDFF}html pre.shiki code .sTEyZ, html code.shiki .sTEyZ{--shiki-light:#90A4AE;--shiki-default:#EEFFFF;--shiki-dark:#BABED8}html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .s7zQu, html code.shiki .s7zQu{--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-default:#89DDFF;--shiki-default-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic}html pre.shiki code .s2Zo4, html code.shiki .s2Zo4{--shiki-light:#6182B8;--shiki-default:#82AAFF;--shiki-dark:#82AAFF}html pre.shiki code .swJcz, html code.shiki .swJcz{--shiki-light:#E53935;--shiki-default:#F07178;--shiki-dark:#F07178}html pre.shiki code .sfazB, html code.shiki .sfazB{--shiki-light:#91B859;--shiki-default:#C3E88D;--shiki-dark:#C3E88D}html pre.shiki code .sHdIc, html code.shiki .sHdIc{--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-default:#EEFFFF;--shiki-default-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic}html pre.shiki code .sHwdD, html code.shiki .sHwdD{--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-default:#546E7A;--shiki-default-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic}html pre.shiki code .spNyl, html code.shiki .spNyl{--shiki-light:#9C3EDA;--shiki-default:#C792EA;--shiki-dark:#C792EA}html pre.shiki code .sbssI, html code.shiki .sbssI{--shiki-light:#F76D47;--shiki-default:#F78C6C;--shiki-dark:#F78C6C}",{"id":200,"title":199,"titles":3332,"content":3333,"level":310},[],"定义一个自定义来源以获取数据。 默认情况下，Nuxt Content 提供了一些内置的来源，例如本地文件来源和远程 Github 来源。但是，对于某些情况来说，这些还不够，例如，你想从远程 API 获取数据。这种情况下，你可以定义一个自定义来源来获取数据并在你的集合中使用它。 使用 defineCollectionSource，你可以定义一个自定义来源。 import { defineCollectionSource } from '@nuxt/content'\n\nconst hackernewsSource = defineCollectionSource({\n  getKeys: () => {\n    return fetch('https://hacker-news.firebaseio.com/v0/topstories.json')\n      .then(res => res.json())\n      .then(data => data.map((key: string) => `${key}.json`))\n  },\n  getItem: (key: string) => {\n    const id = key.split('.')[0]\n    return fetch(`https://hacker-news.firebaseio.com/v0/item/${id}.json`)\n      .then(res => res.json())\n  },\n}) 然后你可以在你的集合中使用这个来源。 import { defineContentConfig, defineCollectionSource, defineCollection, z } from '@nuxt/content'\n\nconst hackernewsSource = defineCollectionSource({\n  getKeys: () => {\n    return fetch('https://hacker-news.firebaseio.com/v0/topstories.json')\n      .then(res => res.json())\n      .then(data => data.map((key: string) => `${key}.json`))\n  },\n  getItem: (key: string) => {\n    const id = key.split('.')[0]\n    return fetch(`https://hacker-news.firebaseio.com/v0/item/${id}.json`)\n      .then(res => res.json())\n  },\n})\n\nconst hackernews = defineCollection({\n  type: 'data',\n  source: hackernewsSource,\n  schema: z.object({\n    title: z.string(),\n    date: z.date(),\n    type: z.string(),\n    score: z.number(),\n    url: z.string(),\n    by: z.string(),\n  }),\n})\n\nexport default defineContentConfig({\n  collections: {\n    hackernews,\n  },\n}) html pre.shiki code .s7zQu, html code.shiki .s7zQu{--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-default:#89DDFF;--shiki-default-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic}html pre.shiki code .sMK4o, html code.shiki .sMK4o{--shiki-light:#39ADB5;--shiki-default:#89DDFF;--shiki-dark:#89DDFF}html pre.shiki code .sTEyZ, html code.shiki .sTEyZ{--shiki-light:#90A4AE;--shiki-default:#EEFFFF;--shiki-dark:#BABED8}html pre.shiki code .sfazB, html code.shiki .sfazB{--shiki-light:#91B859;--shiki-default:#C3E88D;--shiki-dark:#C3E88D}html pre.shiki code .spNyl, html code.shiki .spNyl{--shiki-light:#9C3EDA;--shiki-default:#C792EA;--shiki-dark:#C792EA}html pre.shiki code .s2Zo4, html code.shiki .s2Zo4{--shiki-light:#6182B8;--shiki-default:#82AAFF;--shiki-dark:#82AAFF}html pre.shiki code .swJcz, html code.shiki .swJcz{--shiki-light:#E53935;--shiki-default:#F07178;--shiki-dark:#F07178}html pre.shiki code .sHdIc, html code.shiki .sHdIc{--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-default:#EEFFFF;--shiki-default-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic}html pre.shiki code .sBMFI, html code.shiki .sBMFI{--shiki-light:#E2931D;--shiki-default:#FFCB6B;--shiki-dark:#FFCB6B}html pre.shiki code .sbssI, html code.shiki .sbssI{--shiki-light:#F76D47;--shiki-default:#F78C6C;--shiki-dark:#F78C6C}html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"id":204,"title":203,"titles":3335,"content":3336,"level":310},[],"Nuxt Content 中的 Transformers 允许你在内容文件处理过程中以编程方式解析、修改或分析你的内容文件。 Nuxt Content 中的 Transformers 允许你在内容文件处理过程中以编程方式解析、修改或分析你的内容文件。它们特别适用于： 添加或修改字段（例如，给标题追加内容、生成 slug）提取元数据（例如，列出使用的组件）用计算数据丰富内容支持新的内容类型",{"id":3338,"title":3339,"titles":3340,"content":3341,"level":343},"/docs/advanced/transformers#定义-transformer","定义 Transformer",[203],"你可以使用来自 @nuxt/content 的 defineTransformer 辅助函数定义一个 transformer： import { defineTransformer } from '@nuxt/content'\n\nexport default defineTransformer({\n  name: 'title-suffix',\n  extensions: ['.md'], // 要应用此 transformer 的文件扩展名\n  transform(file) {\n    // 根据需要修改文件对象\n    return {\n      ...file,\n      title: file.title + ' (suffix)',\n    }\n  },\n})",{"id":3343,"title":3344,"titles":3345,"content":3346,"level":411},"/docs/advanced/transformers#transformer-选项","Transformer 选项",[203,3339],"name（字符串）：你的 transformer 的唯一名称。extensions（字符串数组）：此 transformer 应应用的文件扩展名（例如 ['.md']）。transform（函数）：接收文件对象并返回修改后文件的函数。",{"id":3348,"title":3349,"titles":3350,"content":3351,"level":343},"/docs/advanced/transformers#注册-transformers","注册 Transformers",[203],"在你的 nuxt.config.ts 中注册 transformers： export default defineNuxtConfig({\n  content: {\n    build: {\n      transformers: [\n        '~~/transformers/title-suffix',\n        '~~/transformers/my-custom-transformer',\n      ],\n    },\n  },\n})",{"id":3353,"title":3354,"titles":3355,"content":3356,"level":343},"/docs/advanced/transformers#示例添加元数据","示例：添加元数据",[203],"Transformers 可以向文件添加一个 __metadata 字段。该字段不会存储到数据库中，但可用于运行时逻辑。 import { defineTransformer } from '@nuxt/content'\n\nexport default defineTransformer({\n  name: 'component-metadata',\n  extensions: ['.md'],\n  transform(file) {\n    // 示例：检测是否使用了自定义组件\n    const usesMyComponent = file.body?.includes('\u003CMyCustomComponent>')\n    return {\n      ...file,\n      __metadata: {\n        components: usesMyComponent ? ['MyCustomComponent'] : [],\n      },\n    }\n  },\n}) 注意： __metadata 字段仅在运行时可用，不会持久化到内容数据库中。",{"id":3358,"title":3359,"titles":3360,"content":3361,"level":343},"/docs/advanced/transformers#api-参考","API 参考",[203],"interface Transformer {\n  name: string\n  extensions: string[]\n  transform: (file: ContentFile) => ContentFile\n} ContentFile 是表示已解析内容文件的对象，包括 frontmatter、主体及其他字段。",{"id":3363,"title":3364,"titles":3365,"content":3366,"level":343},"/docs/advanced/transformers#使用-transformers-支持新的文件格式","使用 Transformers 支持新的文件格式",[203],"Transformers 不仅限于修改现有内容——它们还可以用于为 Nuxt Content 添加对新文件格式的支持。通过定义带有自定义 parse 方法的 transformer，你可以指示 Nuxt Content 如何读取和处理带有新扩展名的文件，如 YAML。",{"id":3368,"title":3369,"titles":3370,"content":3371,"level":411},"/docs/advanced/transformers#示例yaml-文件支持","示例：YAML 文件支持",[203,3364],"假设你想在内容目录中支持 .yml 和 .yaml 文件。你可以创建一个 transformer，解析 YAML frontmatter 和正文，并为这些扩展名注册它： import { defineTransformer } from '@nuxt/content'\n\nexport default defineTransformer({\n  name: 'Yaml',\n  extensions: ['.yml', '.yaml'],\n  parse: (file) => {\n    const { id, body } = file\n    \n    // 使用你喜欢的 YAML 解析器解析正文\n    const parsed = parseYaml(body)\n\n    return {\n      ...parsed,\n      id,\n    }\n  },\n}) 像注册其他 transformer 一样在 Nuxt 配置中注册你的 YAML transformer： export default defineNuxtConfig({\n  content: {\n    build: {\n      transformers: [\n        '~~/transformers/yaml',\n        // ...其他 transformers\n      ],\n    },\n  },\n}) 此方法允许你扩展 Nuxt Content，以处理你需要的任意自定义文件格式。 html pre.shiki code .s7zQu, html code.shiki .s7zQu{--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-default:#89DDFF;--shiki-default-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic}html pre.shiki code .sMK4o, html code.shiki .sMK4o{--shiki-light:#39ADB5;--shiki-default:#89DDFF;--shiki-dark:#89DDFF}html pre.shiki code .sTEyZ, html code.shiki .sTEyZ{--shiki-light:#90A4AE;--shiki-default:#EEFFFF;--shiki-dark:#BABED8}html pre.shiki code .sfazB, html code.shiki .sfazB{--shiki-light:#91B859;--shiki-default:#C3E88D;--shiki-dark:#C3E88D}html pre.shiki code .s2Zo4, html code.shiki .s2Zo4{--shiki-light:#6182B8;--shiki-default:#82AAFF;--shiki-dark:#82AAFF}html pre.shiki code .swJcz, html code.shiki .swJcz{--shiki-light:#E53935;--shiki-default:#F07178;--shiki-dark:#F07178}html pre.shiki code .sHwdD, html code.shiki .sHwdD{--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-default:#546E7A;--shiki-default-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic}html pre.shiki code .sHdIc, html code.shiki .sHdIc{--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-default:#EEFFFF;--shiki-default-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic}html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .spNyl, html code.shiki .spNyl{--shiki-light:#9C3EDA;--shiki-default:#C792EA;--shiki-dark:#C792EA}html pre.shiki code .sBMFI, html code.shiki .sBMFI{--shiki-light:#E2931D;--shiki-default:#FFCB6B;--shiki-dark:#FFCB6B}",{"id":214,"title":3373,"titles":3374,"content":3375,"level":310},"设置 Nuxt Studio",[],"Studio 是用于编辑 Nuxt Content 网站的直观 CMS 界面。编辑你的 Markdown、YAML 和 JSON 文件，并将更改发布到 GitHub。 Studio 是一个直观的 CMS 界面，用于编辑你的 Nuxt Content 网站。 它利用 Nuxt Content 内置的 Preview API，为内容文件提供最佳编辑体验。编辑者可以通过用户友好的界面编辑他们的 Markdown、YAML 或 JSON 文件。 开发者可以自定义编辑体验并为编辑者提供工具，使编辑者能够专注于内容，无需任何技术专长。",{"id":3377,"title":3378,"titles":3379,"content":3380,"level":343},"/docs/studio/setup#认证","认证",[3373],"Studio 管理后台位于 nuxt.studio。你可以通过 GitHub 或 Google 登录。两种方式会赋予相同的编辑权限，但由于 Studio 与 GitHub 同步，仓库导入必须由 GitHub 用户操作。 Google 认证适用于非技术用户。Google 用户必须加入已有项目的团队才能进行编辑。",{"id":3382,"title":3383,"titles":3384,"content":3385,"level":343},"/docs/studio/setup#连接你的-nuxt-content-仓库","连接你的 Nuxt Content 仓库",[3373],"登录管理后台后，你可以直接从界面导入你的 Nuxt Content 仓库。 有两种选择，你可以导入一个已有的仓库，或使用我们的 模板。 唯一的要求是你的仓库必须托管在 GitHub 上。通过界面连接我们的 GitHub 应用，然后即可将 GitHub 仓库链接到你的 Studio 项目中。 项目创建成功后，你就可以使用 Studio 的编辑器开始编辑文件，并发布你的更改。",{"id":3387,"title":3388,"titles":3389,"content":3390,"level":343},"/docs/studio/setup#启用完整编辑体验","启用完整编辑体验",[3373],"要解锁 Studio 的全部功能，请确保你的项目 URL 在部署部分正确配置。 这将启用所有 Studio 功能，包括： 网站实时预览： 在编辑时立即在网站上看到更改效果。动态表单生成： 根据你的 Nuxt Content 集合自动生成编辑表单。增强的 Markdown 编辑器： 提供更好的编辑体验，包括列出和集成你已暴露的 Vue 组件。自动应用配置： 根据你定义的 schema 生成 应用配置。 我们提供了 GitHub Pages 部署方案，使用它可以帮你处理所有要求。如果你想使用自己选择的部署平台，请参照以下简单指南。 要在 Studio 中设置你的 URL，只需在 nuxt.config.ts 文件的内容配置中设置 Preview API。 export default defineNuxtConfig({\n  content: {\n    preview: {\n      api: 'https://api.nuxt.studio'\n    }\n  }\n}) 部署完成后，可通过访问网站的 /__preview.json 页面确认 Preview API 是否已生效。该元数据页面由 Content 模块自动生成，且必须可访问，才能在 Studio 的自托管部分连接你的 URL。",{"id":3392,"title":3393,"titles":3394,"content":3395,"level":411},"/docs/studio/setup#故障排查","故障排查",[3373,3388],"如果已生成 __preview.json 文件，但在自托管部分设置 URL 时遇到 Forbidden error: invalid property check 错误，请按以下步骤操作： 确保 __preview.json 文件中的 gitInfo 字段已设置且准确无误\"gitInfo\": {\n  \"name\": \"content\",\n  \"owner\": \"nuxt\",\n  \"url\": \"https://github.com/nuxt/content\"\n},\n此信息通常会自动填充。我们支持大多数流行的提供商（NuxtHub、Vercel、Netlify 等），但如果你使用的是不支持或自定义的提供商，可能无法正确获取。在你的 nuxt.config.ts 中覆盖 gitInfoexport default defineNuxtConfig({\n  content: {\n    preview: {\n      api: 'https://api.nuxt.studio',\n      gitInfo: {\n        name: '你的仓库名',\n        owner: '你的仓库拥有者/组织',\n        url: '你的 GitHub 仓库 URL'\n      }\n    }\n  }\n})\n确保 __preview.json 中字段设置正确Forbidden error 应该被修复，你也应当能在 Nuxt Studio 设置你的 URL。如果问题仍未解决，请通过我们的 Discord 服务器 联系我们。 html pre.shiki code .s7zQu, html code.shiki .s7zQu{--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-default:#89DDFF;--shiki-default-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic}html pre.shiki code .s2Zo4, html code.shiki .s2Zo4{--shiki-light:#6182B8;--shiki-default:#82AAFF;--shiki-dark:#82AAFF}html pre.shiki code .sTEyZ, html code.shiki .sTEyZ{--shiki-light:#90A4AE;--shiki-default:#EEFFFF;--shiki-dark:#BABED8}html pre.shiki code .sMK4o, html code.shiki .sMK4o{--shiki-light:#39ADB5;--shiki-default:#89DDFF;--shiki-dark:#89DDFF}html pre.shiki code .swJcz, html code.shiki .swJcz{--shiki-light:#E53935;--shiki-default:#F07178;--shiki-dark:#F07178}html pre.shiki code .sfazB, html code.shiki .sfazB{--shiki-light:#91B859;--shiki-default:#C3E88D;--shiki-dark:#C3E88D}html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .spNyl, html code.shiki .spNyl{--shiki-light:#9C3EDA;--shiki-default:#C792EA;--shiki-dark:#C792EA}",{"id":218,"title":3397,"titles":3398,"content":3399,"level":310},"Studio 与 GitHub 之间的实时同步",[],"Nuxt Studio 与 GitHub 原生同步。安装 Nuxt Studio GitHub 应用，并直接从 Studio 启用内容发布到 GitHub。 本节解释了 Studio 与 GitHub 之间的同步行为。此过程直接由平台处理，无需任何外部操作。本页面的目的是提供纯粹的信息。",{"id":3401,"title":3402,"titles":3403,"content":3404,"level":343},"/docs/studio/github#概述","概述",[3397],"Nuxt Studio 集成了 GitHub API，实现 Studio 与您的 GitHub 仓库之间的顺畅同步。这一顶级集成是通过利用 GitHub 应用 实现的。",{"id":3406,"title":12,"titles":3407,"content":3408,"level":343},"/docs/studio/github#安装",[3397],"在创建 Studio 项目时，您需要在您的个人账户或您管理的组织中安装 Nuxt Studio GitHub 应用。安装 GitHub 应用需要组织所有权或仓库中的管理员权限。如果您没有必要的权限，仓库所有者需要批准该请求。 您可以通过点击应用内的任意位置的 使用 GitHub 安装 访问安装页面。",{"id":3410,"title":3411,"titles":3412,"content":3413,"level":411},"/docs/studio/github#权限","权限",[3397,12],"安装我们的 GitHub 应用时，系统会提示您授予某些权限： 对 actions、metadata、members 和 plan 的读取权限对 secrets、administration、contents、pages、pull requests 和 workflows 的读写权限 我们需要对 actions 的读取权限，以便在拉取请求或仓库默认分支的工作流运行失败时发送通知。metadata 是必需的，用于获取仓库数据，members 用于导入您的组织成员和仓库协作者，plan 用于根据您的 GitHub 账户计划推荐功能。 Nuxt Studio 代表您创建仓库、分支、拉取请求，并执行提交和合并。我们还提供一键部署到 GitHub Pages，支持工作流和环境变量密钥的即时预览和管理。为实现此目的，我们需要对 administration、contents、pages、pull requests、workflows 和 secrets 的读写权限。",{"id":3415,"title":3416,"titles":3417,"content":3418,"level":411},"/docs/studio/github#仓库安装","仓库安装",[3397,12],"安装我们的 GitHub 应用时，系统会提示您选择所有仓库或其中的子集。此选择可随时通过访问 GitHub 应用设置 进行更改。 点击 Install 后，Nuxt Studio 会安装您所选的每个仓库，使您能够执行上述所有操作。",{"id":3420,"title":3421,"titles":3422,"content":3423,"level":343},"/docs/studio/github#卸载","卸载",[3397],"所有从 GitHub 导入的数据都直接关联到您的 GitHub 应用安装。如果您卸载该 GitHub 应用，所有相关数据将被删除。 如果您删除 GitHub 仓库，关联的 Nuxt Studio 项目也将自动移除。但是，如果该项目订阅了团队计划，订阅不会自动取消。您需要通过 Lemon Squeezy 手动结束订阅，或联系我们 寻求帮助。",{"id":222,"title":3425,"titles":3426,"content":3427,"level":310},"编辑您的内容",[],"发现并选择您喜欢的内容管理方式，视觉编辑器或代码编辑器。 Nuxt Studio 为开发者和内容编辑者提供了一个多功能的工作空间，让他们可以自由选择以下不同的编辑器： 用于 Markdown 文件的 类 Notion 编辑器用于 YAML 和 JSON 文件的 表单编辑器用于任何类型文件的 代码编辑器（仅限技术用户） 您可以在项目的设置页面选择您喜欢的编辑器。 每种编辑器都有其专用的用途。有些用户习惯代码编辑，而有些则喜欢非技术性的视觉方式。最终，两种编辑器的最终输出都是代码语法。",{"id":3429,"title":3430,"titles":3431,"content":3432,"level":343},"/docs/studio/content#类-notion-编辑器markdown-文件","类 Notion 编辑器（Markdown 文件）",[3425],"此编辑器深受 Notion 启发，Notion 以其直观的设计和灵活性闻名。类似于标准文本编辑器，该编辑器的设计使其易于熟悉和使用。但它凭借改善写作体验的额外功能脱颖而出。 您想了解我们是如何构建此编辑器以及其幕后工作机制吗？请查阅此博客文章。",{"id":3434,"title":2588,"titles":3435,"content":3436,"level":411},"/docs/studio/content#frontmatter",[3425,3430],"Frontmatter 是基于 Markdown 的 CMS 的一种约定，用于为页面提供元数据，比如描述、标题或任何其他您想以 key: value 形式存储的数据。 基于用户提供的 集合和模式，系统会自动生成一个表单，供编辑器编辑这些元数据。 查看此部分以了解基于模式生成表单的更多信息。",{"id":3438,"title":3439,"titles":3440,"content":3441,"level":411},"/docs/studio/content#工具栏","工具栏",[3425,3430],"高亮选中文本即会显示工具栏，您可以使用所有标准文本编辑功能（标题格式、加粗、斜体、删除线、代码、链接、类、无序列表、有序列表等）。",{"id":3443,"title":3444,"titles":3445,"content":3446,"level":411},"/docs/studio/content#媒体","媒体",[3425,3430],"用户可以直接将图片拖放到编辑器中。上传模态框会打开，让您选择目标文件夹。 通过键入 / 并搜索 Image 或 Video，可以快速插入媒体。模态框会打开，您可以从媒体库（即 Nuxt 应用的 public 文件夹）中选择想要插入的媒体。 在媒体模态框中，您可以为 SEO 和无障碍目的设置alt 属性。",{"id":3448,"title":2608,"titles":3449,"content":3450,"level":411},"/docs/studio/content#vue-组件",[3425,3430],"此编辑器的卓越功能之一是能够直接在编辑器中集成和自定义任何复杂的 Vue 组件。",{"id":3452,"title":3453,"titles":3454,"content":3455,"level":461},"/docs/studio/content#创建并集成您自己的组件","创建并集成您自己的组件",[3425,3430,2608],"开发者可以创建任何视觉复杂的组件，编辑者能够使用它们并专注于内容。编辑者还可以调整组件属性、样式及行为以满足具体需求，只要开发者使其可定制即可。 创建您的组件您可以创建 Vue 组件并将它们集成到 Markdown 中。只需将组件放置在 /components/content 文件夹中即可使用。\u003Ctemplate>\n  \u003Cdiv class=\"flex items-start gap-3\">\n    \u003Cdiv class=\"flex items-center justify-center border rounded-lg p-1.5\">\n      \u003CUIcon :name=\"icon\" />\n    \u003C/div>\n    \u003Cdiv class=\"flex flex-col\">\n      \u003Ch3 class=\"font-semibold\">\n        \u003Cslot name=\"title\" />\n      \u003C/h3>\n      \u003Cspan>\n        \u003Cslot name=\"description\" />\n      \u003C/span>\n    \u003C/div>\n  \u003C/div>\n\u003C/template>\n\n\u003Cscript setup lang=\"ts\">\ndefineProps({\n  icon: {\n    type: String,\n    default: 'i-ph-cursor-click',\n  },\n})\n\u003C/script>\n使用 MDC 语法 轻松将这些组件集成到任何 Markdown 文件中::home-feature\n  ---\n  icon: i-mdi-vuejs\n  ---\n  #title\n  嵌入式 Vue 组件\n  #description\n  在类 Notion 编辑器中编辑插槽和属性。\n::\n使用我们的 Studio 编辑器进行编辑视觉编辑器简化了组件编辑，允许您直接在视觉编辑器中集成和编辑组件。非技术用户无需任何技术知识即可操作插槽和属性。/components/content 文件夹中的所有组件在编辑器中可用。Studio 用户可以在编辑时随时输入 / 来访问可用组件的列表。查看此部分以验证您在本地开发中编辑器中的 Vue 组件集成。",{"id":3457,"title":3458,"titles":3459,"content":3460,"level":461},"/docs/studio/content#从外部库集成内置组件","从外部库集成内置组件",[3425,3430,2608],"默认情况下，您可以在 Markdown 文件中集成任何组件，它应该可以正常工作并在 Studio 中进行编辑，但外部组件 不会在 Studio 的组件列表中显示，也无法通过 Studio 编辑器手动集成。 要在 Studio 中列出此组件并获取其所有元数据，您需要在 Nuxt 配置文件中将其设置为全局。 以下是从 Nuxt UI 库中集成 Button 和 Icon 组件的示例： export default defineNuxtConfig({\n  hooks: {\n    'components:extend': (components) => {\n      const globals = components.filter(c => ['UButton', 'UIcon'].includes(c.pascalName))\n\n      globals.forEach(c => c.global = true)\n    }\n  },\n})",{"id":3462,"title":3463,"titles":3464,"content":3465,"level":343},"/docs/studio/content#表单编辑器","表单编辑器",[3425],"此编辑器适用于编辑 Markdown 文件的 frontmatter 或编辑 JSON / YAML 文件。 它避免您直接操作复杂的文件语法，而是根据用户提供的集合模式自动生成表单。",{"id":3467,"title":2091,"titles":3468,"content":3469,"level":411},"/docs/studio/content#使用-zod-模式定义您的表单",[3425,3463],"在专门章节了解更多关于集合模式定义内容。 一旦在集合中定义了 schema 属性，Studio 界面会自动生成对应的表单。 export default defineContentConfig({\n  collections: {\n    posts: defineCollection({\n      type: 'page',\n      source: 'blog/*.md',\n      schema: z.object({\n        draft: z.boolean().default(false),\n        category: z.enum(['Alps', 'Himalaya', 'Pyrenees']).optional(),\n        date: z.date(),\n        image: z.object({\n          src: z.string().editor({ input: 'media' }),\n          alt: z.string(),\n        }),\n        slug: z.string().editor({ hidden: true }),\n        icon: z.string().optional().editor({ input: 'icon' }),\n        authors: z.array(z.object({\n          slug: z.string(),\n          username: z.string(),\n          name: z.string(),\n          to: z.string(),\n          avatar: z.object({\n            src: z.string(),\n            alt: z.string(),\n          }),\n        })),\n      }),\n    }),\n  },\n})",{"id":3471,"title":2101,"titles":3472,"content":3473,"level":411},"/docs/studio/content#原生输入映射",[3425,3463],"Zod 的基础类型自动映射为对应的表单输入： 字符串 → 文本输入框日期 → 日期选择器数字 → 数字输入框（计数器）布尔 → 切换开关枚举 → 下拉选择框字符串数组 → 徽章列表输入对象数组 → 折叠面板中嵌入表单的项目列表",{"id":3475,"title":2106,"titles":3476,"content":3477,"level":411},"/docs/studio/content#自定义输入映射",[3425,3463],"Studio 超越基础类型。您可以使用 editor 方法自定义表单字段，它用元数据扩展 Zod 类型以增强编辑器界面。 这允许您定义自定义输入或隐藏字段。",{"id":3479,"title":2111,"titles":3480,"content":3481,"level":461},"/docs/studio/content#用法",[3425,3463,2106],"// Icon\nicon: z.string().editor({ input: 'icon', iconLibraries: ['lucide', 'simple-icons'] })\n\n// Media\nimage: z.string().editor({ input: 'media' })",{"id":3483,"title":2116,"titles":3484,"content":303,"level":461},"/docs/studio/content#选项",[3425,3463,2106],{"id":3486,"title":2120,"titles":3487,"content":3488,"level":468},"/docs/studio/content#input-media-icon",[3425,3463,2106,2116],"您可以设置编辑器输入类型。目前可用的类型有icon和media。",{"id":3490,"title":3491,"titles":3492,"content":3493,"level":468},"/docs/studio/content#iconlibraries-arraystring","iconLibraries: Array\u003Cstring>",[3425,3463,2106,2116],"指定要显示哪些 Iconify 库。使用此选项来过滤和限制可用的图标集。 hidden: Boolean 此选项用来阻止字段在 Studio 编辑器中显示。 Studio 输入完全可扩展。我们可以根据用户需求创建任意数量的输入类型。",{"id":3495,"title":3496,"titles":3497,"content":3498,"level":343},"/docs/studio/content#代码编辑器","代码编辑器",[3425],"尽管前面两个编辑器针对特定文件扩展名（md 或 yaml/json），代码编辑器可用于任何类型的文件。 它提供对内容的完全控制，允许您直接编写原始内容： Markdown 文件的 MDC 语法JSON 或 YAML 语法 当您使用代码编辑器保存文件时，内容会精准保存，保持所有特定的语法和格式。此编辑器适合熟悉代码语法（Markdown、YAML 或 JSON）且希望精确控制内容结构的用户。 html pre.shiki code .sMK4o, html code.shiki .sMK4o{--shiki-light:#39ADB5;--shiki-default:#89DDFF;--shiki-dark:#89DDFF}html pre.shiki code .swJcz, html code.shiki .swJcz{--shiki-light:#E53935;--shiki-default:#F07178;--shiki-dark:#F07178}html pre.shiki code .spNyl, html code.shiki .spNyl{--shiki-light:#9C3EDA;--shiki-default:#C792EA;--shiki-dark:#C792EA}html pre.shiki code .sfazB, html code.shiki .sfazB{--shiki-light:#91B859;--shiki-default:#C3E88D;--shiki-dark:#C3E88D}html pre.shiki code .s2Zo4, html code.shiki .s2Zo4{--shiki-light:#6182B8;--shiki-default:#82AAFF;--shiki-dark:#82AAFF}html pre.shiki code .sTEyZ, html code.shiki .sTEyZ{--shiki-light:#90A4AE;--shiki-default:#EEFFFF;--shiki-dark:#BABED8}html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .s7zQu, html code.shiki .s7zQu{--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-default:#89DDFF;--shiki-default-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic}html pre.shiki code .sHdIc, html code.shiki .sHdIc{--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-default:#EEFFFF;--shiki-default-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic}html pre.shiki code .sfNiH, html code.shiki .sfNiH{--shiki-light:#FF5370;--shiki-default:#FF9CAC;--shiki-dark:#FF9CAC}html pre.shiki code .sHwdD, html code.shiki .sHwdD{--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-default:#546E7A;--shiki-default-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic}html pre.shiki code .sBMFI, html code.shiki .sBMFI{--shiki-light:#E2931D;--shiki-default:#FFCB6B;--shiki-dark:#FFCB6B}",{"id":226,"title":3500,"titles":3501,"content":3502,"level":310},"在 Nuxt Content Studio CMS 中管理和整合媒体",[],"探索如何浏览和管理媒体文件，并利用 Nuxt Content Studio CMS 的功能将它们整合到您的项目中。",{"id":3504,"title":3505,"titles":3506,"content":3507,"level":343},"/docs/studio/medias#浏览您的媒体","浏览您的媒体",[3500],"所有位于 /public 目录下的媒体都可以在 Studio 平台的 媒体 标签页中访问。 这是一个为非技术用户设计的直观界面，用于管理他们的 /public 目录。 用户可以轻松浏览文件夹，在任意层级上传新媒体，并通过拖放操作将媒体移动到其他文件夹，从而简化媒体的组织工作。 该界面旨在为非技术用户提供直观体验，可视为一种用户友好的集成开发环境（IDE）。",{"id":3509,"title":3510,"titles":3511,"content":3512,"level":343},"/docs/studio/medias#在类似-notion-的编辑器中使用","在类似 Notion 的编辑器中使用",[3500],"用户可以直接将图片拖放到编辑器中。上传模态窗口会打开，让您选择目标文件夹。 通过输入 / 并搜索 Image，用户可以快速插入媒体。一个模态窗口会打开，让他们选择想要插入的媒体。 在媒体模态窗口中，您可以设置用于 SEO 和无障碍访问的 alt 属性。",{"id":230,"title":3514,"titles":3515,"content":3516,"level":310},"自定义应用配置编辑",[],"了解如何通过提供 schema 在 Studio 中定制应用配置编辑。确保顺畅且结构化的内容管理体验。 进入编辑器的 Config 选项卡时，您可以浏览配置以定制您的网站。这些配置代表您在 app.config.ts 文件中定义的设置。",{"id":3518,"title":3519,"titles":3520,"content":3521,"level":343},"/docs/studio/config#appconfigts","app.config.ts",[3514],"app.config.ts 文件是 Nuxt 3 引入的配置文件。它是一个 TypeScript 文件，允许您配置应用的各个方面。开发者可以轻松地使用此文件将任何网站转换为可配置的体验。",{"id":3523,"title":3524,"titles":3525,"content":3526,"level":343},"/docs/studio/config#自定义编辑","自定义编辑",[3514],"确保您的应用中至少有一个空的配置文件。export default defineAppConfig({}) 要在 Studio 中为您的 app.config.ts 创建定制的编辑体验，需要在项目中创建一个 nuxt.schema.ts 文件。该 schema 用于表示您的 app.config.ts。",{"id":3528,"title":3529,"titles":3530,"content":3531,"level":411},"/docs/studio/config#辅助方法","辅助方法",[3514,3524],"这些辅助方法由 Nuxt Content 的 Preview API 提供。 group 方法用于定制父对象。field 方法用于定制输入（即叶子节点）。 import { field, group } from '@nuxt/content/preview'\n\nexport default defineNuxtSchema({\n  appConfig: {\n    parent: group({\n      title: '父级标题',\n      description: '父级描述。',\n      icon: 'i-icon-to-display',\n      fields: {\n        leaf: field({\n          type: '用于编辑该字段的组件类型',\n          title: '字段标题',\n          description: '字段描述',\n          icon: 'i-icon-to-display',\n          default: '默认值'\n        })\n      }\n    })\n  }\n}) 无需必须包含所有的应用配置键；只需添加那些您希望在 Studio 界面展示的字段即可。",{"id":3533,"title":3534,"titles":3535,"content":3536,"level":461},"/docs/studio/config#输入类型","输入类型",[3514,3524,3529],"field() 方法第一个参数中的 type 可接受多种值： stringnumberbooleanarrayobjecticonmedia 基于这些类型，Studio UI 会适配显示相应的输入类型。例如，icon 类型会显示图标选择器， media 类型会展示媒体库。 如果您在 field() 方法中提供 required 字段，文本输入可以显示为下拉选择而非传统输入框： import { field, group } from '@nuxt/content/preview'\n\nexport default defineNuxtSchema({\n  appConfig: {\n    parent: group({\n      title: 'UI',\n      description: 'UI 配置',\n      icon: 'i-ph-palette-fill',\n      fields: {\n        primary: field({\n          type: 'string',\n          title: '主色',\n          description: '您的 UI 主色。',\n          icon: 'i-ph-palette',\n          default: 'sky',\n          required: ['sky', 'mint', 'rose', 'amber']\n        })\n      }\n    })\n  }\n})",{"id":3538,"title":1899,"titles":3539,"content":3540,"level":411},"/docs/studio/config#在-studio-中编辑",[3514,3524],"一旦您的 schema 部署完成，任何用户都可以访问 Data 区域，使用生成的表单进行操作。 表单中的任何更新都会直接应用到 app.config.ts 文件。您可以在审查页面查看这些更改。 export default defineNuxtSchema({\n  ui: group({\n    title: 'UI',\n    description: 'UI 自定义。',\n    icon: 'i-mdi-palette-outline',\n    fields: {\n      primary: field({\n        type: 'string',\n        title: '主色',\n        description: '您的 UI 主色。',\n        icon: 'i-mdi-palette-outline',\n        required: ['sky', 'mint', 'rose', 'amber', 'violet', 'emerald', 'fuchsia', '...']\n      }),\n      gray: field({ ... }),\n      icons: group({\n        title: '图标',\n        description: '管理 UI Pro 中使用的图标。',\n        icon: 'i-mdi-application-settings-outline',\n        fields: {\n          search: field({ ...}),\n          dark: field({ ... }),\n          light: field({ ... }),\n          external: field({ ...}),\n          chevron: field({ ... }),\n          hash: field({ ... })\n        }\n      })\n    }\n  })\n}) 查看此章节，以验证您在本地开发中的 schema 配置。 想要实际示例，请查看我们为 UI Pro Docs starter 开发的 schema。 html pre.shiki code .s7zQu, html code.shiki .s7zQu{--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-default:#89DDFF;--shiki-default-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic}html pre.shiki code .s2Zo4, html code.shiki .s2Zo4{--shiki-light:#6182B8;--shiki-default:#82AAFF;--shiki-dark:#82AAFF}html pre.shiki code .sTEyZ, html code.shiki .sTEyZ{--shiki-light:#90A4AE;--shiki-default:#EEFFFF;--shiki-dark:#BABED8}html pre.shiki code .sMK4o, html code.shiki .sMK4o{--shiki-light:#39ADB5;--shiki-default:#89DDFF;--shiki-dark:#89DDFF}html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .sfazB, html code.shiki .sfazB{--shiki-light:#91B859;--shiki-default:#C3E88D;--shiki-dark:#C3E88D}html pre.shiki code .swJcz, html code.shiki .swJcz{--shiki-light:#E53935;--shiki-default:#F07178;--shiki-dark:#F07178}",{"id":234,"title":233,"titles":3542,"content":3543,"level":310},[],"在本地开发环境中验证您的自定义内容。",{"id":3545,"title":3546,"titles":3547,"content":3548,"level":343},"/docs/studio/debug#目的","目的",[233],"本节的目标是说明如何在发布到生产环境前，在本地验证您的自定义内容。 如果您想： 创建一个 nuxt.schema.ts 文件并在 Studio 上生成相应的接口。集成自定义 Vue 组件，并确保在编辑器中编辑功能正常。 这将对您有所帮助。",{"id":3550,"title":3551,"titles":3552,"content":3553,"level":343},"/docs/studio/debug#教程","教程",[233],"在 Studio 导入您的项目在本地克隆您的仓库在开发环境中启用 Nuxt Content 预览export default defineNuxtConfig({\n  content: {\n    preview: {\n      // 强制在开发环境初始化模块\n      dev: true\n    }\n  }\n})\n使用带 --tunnel 参数的开发命令启动应用，以暴露到互联网npx nuxt dev --tunnel\n确认元数据文件已生成__preview.json 文件应可通过 https://your-localtunnel-url/__preview.json 访问复制隧道 URL 并将其粘贴到 Studio 平台部署标签页的自托管部分 就这样！现在您应该能够访问 Studio UI，确认您的配置接口已成功生成，并且您的 Vue 组件及其属性和插槽在编辑器中可用。 任何对 nuxt.config.ts 文件的修改或 Vue 文件的更改，都需要重启 Nuxt 开发服务器。服务器重启后，您可以通过命令菜单调用 Sync meta 操作   来同步 Studio 接口。刷新 Studio 应用也会应用更新。 html pre.shiki code .s7zQu, html code.shiki .s7zQu{--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-default:#89DDFF;--shiki-default-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic}html pre.shiki code .s2Zo4, html code.shiki .s2Zo4{--shiki-light:#6182B8;--shiki-default:#82AAFF;--shiki-dark:#82AAFF}html pre.shiki code .sTEyZ, html code.shiki .sTEyZ{--shiki-light:#90A4AE;--shiki-default:#EEFFFF;--shiki-dark:#BABED8}html pre.shiki code .sMK4o, html code.shiki .sMK4o{--shiki-light:#39ADB5;--shiki-default:#89DDFF;--shiki-dark:#89DDFF}html pre.shiki code .swJcz, html code.shiki .swJcz{--shiki-light:#E53935;--shiki-default:#F07178;--shiki-dark:#F07178}html pre.shiki code .sHwdD, html code.shiki .sHwdD{--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-default:#546E7A;--shiki-default-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic}html pre.shiki code .sfNiH, html code.shiki .sfNiH{--shiki-light:#FF5370;--shiki-default:#FF9CAC;--shiki-dark:#FF9CAC}html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .sBMFI, html code.shiki .sBMFI{--shiki-light:#E2931D;--shiki-default:#FFCB6B;--shiki-dark:#FFCB6B}html pre.shiki code .sfazB, html code.shiki .sfazB{--shiki-light:#91B859;--shiki-default:#C3E88D;--shiki-dark:#C3E88D}",{"id":3555,"title":303,"titles":3556,"content":3557,"level":310},"/studio",[],"认识 Studio，内容编辑  面向每个人。Nuxt Studio 为您的 Nuxt Content 项目带来可视化编辑。任何人都可以借助我们多功能的编辑器贡献网站内容，该编辑器兼容 markdown、YAML 或 JSON。无需技术专长。为开发者打造，适用于所有人。 GitHub 与 Google 认证为各角色提供个性化工作空间：开发者、撰写者及客户。轻松更新内容从 Markdown 到 YAML 编辑，我们的可视化编辑器专为非技术用户设计。实时协作利用我们的协作功能，团队成员能实时共同撰写。从代码到编辑开发者构建基础，撰写者则可安全地编辑内容。发布前审核在网站上线前审核您的更改内容。即用模板利用为 SaaS 网站、博客、文档等预构建的模板快速开始。 ---\ntitle: The Mountains Website\ndescription: A website about the most iconic mountains in the world.\n---\n\n::landing-hero\n---\nimage: /mountains/everest.jpg\n---\n#title\nThe Everest.\n\n#description\nThe Everest is the highest mountain in the world, standing at 8,848 meters above sea level.\n::\n  \u003Cscript setup lang=\"ts\">\n  defineProps\u003C{\n    image: string \n  }>()\n  \u003C/script>\n  \n  \u003Ctemplate>\n    \u003Csection class=\"flex flex-col sm:flex-row sm:items-center gap-4 py-8 sm:gap-12 sm:py-12\">\n      \u003Cdiv>\n        \u003Ch1 class=\"text-4xl font-semibold\">\n          \u003Cslot name=\"title\" />\n        \u003C/h1>\n        \u003Cdiv class=\"text-base text-gray-600 dark:text-gray-300\">\n          \u003Cslot name=\"description\" />\n        \u003C/div>\n      \u003C/div>\n      \u003Cimg :src=\"image\" class=\"w-1/2 rounded-lg\">\n    \u003C/section>\n  \u003C/template>\n开发者创建 编辑体验开发者以自己的方式构建基础设施：自定义组件、媒体库及网站配置。可定制且可编辑的 Vue 组件使用我们的可视化编辑器编辑 Markdown可视化编辑您的 app.config 让 任何人编辑 您的 Nuxt Content 网站团队和客户获得功能强大的可视化编辑器用于内容管理，从文本编辑到媒体管理——全程无需接触代码。带拖拽的 Markdown 可视化编辑器为 YML 和 JSON 文件生成表单集中管理所有媒体资源 一起编辑，即时预览团队协同编辑内容并通过实时预览看到网站实时变化。从文本编辑到组件更新，每一次更改都会反映在最终网站设计中。体验无延迟、无需手动刷新且顺畅的内容创作流程。实时在网站上查看您的更改分享带有实时更新的预览链接给任何人发布前回顾所有更改 编辑您的 Nuxt Content 网站的最佳方式导入您的 Nuxt Content 网站并邀请团队立即协作。 html pre.shiki code .sMK4o, html code.shiki .sMK4o{--shiki-light:#39ADB5;--shiki-default:#89DDFF;--shiki-dark:#89DDFF}html pre.shiki code .swJcz, html code.shiki .swJcz{--shiki-light:#E53935;--shiki-default:#F07178;--shiki-dark:#F07178}html pre.shiki code .sfazB, html code.shiki .sfazB{--shiki-light:#91B859;--shiki-default:#C3E88D;--shiki-dark:#C3E88D}html pre.shiki code .sTEyZ, html code.shiki .sTEyZ{--shiki-light:#90A4AE;--shiki-default:#EEFFFF;--shiki-dark:#BABED8}html pre.shiki code .spNyl, html code.shiki .spNyl{--shiki-light:#9C3EDA;--shiki-default:#C792EA;--shiki-dark:#C792EA}html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .s2Zo4, html code.shiki .s2Zo4{--shiki-light:#6182B8;--shiki-default:#82AAFF;--shiki-dark:#82AAFF}html pre.shiki code .sBMFI, html code.shiki .sBMFI{--shiki-light:#E2931D;--shiki-default:#FFCB6B;--shiki-dark:#FFCB6B}",{"id":3559,"title":3560,"titles":3561,"content":3562,"level":310},"/templates/canvas","画布",[],"这是一个支持国际化的完全可定制的作品集模板。 Canvas 作品集是一个完全可定制的国际化作品集模板，使用 Nuxt 和 Nuxt UI 构建，旨在帮助您轻松展示作品、推荐语和关键信息。该模板集成了 Nuxt Studio，提供流畅的编辑体验，同时利用 Nuxt Content 进行内容管理。Canvas 作品集在性能、灵活性和响应式设计方面表现出色，为开发者和创意人员提供了坚实的基础。现代组件与布局 – 包含内置组件。Nuxt UI v3 – 使用预制的可定制 UI 组件。NuxtHub 支持 - 几秒钟内部署到 NuxtHub。Tailwind CSS – 美观且响应式的设计系统。可用的联系表单 – 集成 Resend，轻松处理邮件。多语言支持 – 由 Nuxt i18n 驱动。SEO 友好 – 支持 Open Graph 图片（Nuxt OG Image）和 Nuxt Robots，实现自动生成 robots.txt。良好实践 – 自动生成网站地图，优化图片（Nuxt Image），以及 ESLint（Nuxt 配置采用 Flat 配置）。完全响应式 – 兼容所有现代浏览器和设备。极简且专业的设计 – 简洁、优雅且易于定制。",{"id":3564,"title":3565,"titles":3566,"content":3567,"level":310},"/templates/content-wind","Content Wind",[],"一个轻量级的 Nuxt 主题，帮助你在几分钟内搭建作品集。 一个轻量级的 Nuxt 主题，用于构建基于 Nuxt Content、TailwindCSS 和 Iconify 的 Markdown 驱动网站在 Markdown 页面中使用布局支持元标签自动生成可配置的排版组件从页面生成导航支持明暗模式切换访问来自 100+ 图标集的 100,000 个图标使用 Shiki 高亮代码块",{"id":3569,"title":3570,"titles":3571,"content":3572,"level":310},"/templates/docs","文档",[],"使用此模板，几秒钟内即可创建您的文档。 Nuxt UI Pro 是一组高级组件，作为 Nuxt UI 的扩展，旨在帮助您在几分钟内创建漂亮且响应式的 Nuxt 应用。Nuxt UI 团队致力于提供最佳的集成和定制体验，同时 Studio 团队提供与 Nuxt Studio 的完全兼容性。完全可定制：可通过您的应用配置更改任意组件的样式，或通过 ui 属性进行专门定制。轻松编写 Markdown：Nuxt UI Pro 重写了 Nuxt Content 的 prose 组件，使其更出色，还新增了 Callout、CodeGroup、Field 等组件。精美的排版样式：预配置了 Tailwind CSS 排版插件，样式与 Nuxt UI 组件和颜色匹配。开箱即用的全文搜索：Nuxt UI Pro 配备了现成的命令面板组件，无需再配置 Algolia DocSearch。全面插槽支持：每个组件都利用 Vue 的插槽功能，给予您构建任意内容的灵活性。响应式设计：Nuxt UI Pro 组件旨在构建您的内容结构，天生响应式，适应各种屏幕尺寸。",{"id":3574,"title":3575,"titles":3576,"content":3577,"level":310},"/templates/docus","Docus",[],"用 Markdown 编写美观的文档 一个美观、极简的 Docus 文档创建入门模板这是默认的 Docus 入门模板，提供了使用 Markdown 和 Vue 组件构建漂亮文档网站所需的一切。✨ 特性🎨 美观设计 - 干净、现代的文档主题📱 响应式 - 移动优先响应式设计🌙 暗黑模式 - 内置暗/亮模式支持🔍 搜索 - 全文搜索功能📝 增强 Markdown - 支持带自定义组件的扩展 Markdown🎨 高度可定制 - 轻松主题和品牌定制⚡ 快速性能 - 针对 Nuxt 4 优化🔧 TypeScript 支持 - 完全支持 TypeScript🚀 快速开始# 安装依赖\nnpm install\n\n# 启动开发服务器\nnpm run dev\n你的文档站点将运行在 http://localhost:3000📁 项目结构my-docs/\n├── content/              # 你的 Markdown 内容\n│   ├── index.md          # 主页\n│   ├── 1.getting-started/  # 入门部分\n│   └── 2.essentials/     # 重要文档\n├── public/               # 静态资源\n└── package.json          # 依赖和脚本\n⚡ 内置技术栈此入门模板预配置了以下组件：Nuxt 4 - Web 框架Nuxt Content - 基于文件的 CMSNuxt UI Pro - 高级 UI 组件Nuxt Image - 优化图片加载Tailwind CSS 4 - 原子化 CSS 框架Docus Layer - 文档主题📖 文档要获取关于定制你的 Docus 项目的详细文档，请访问 Docus 文档🚀 部署生产环境构建：npm run build\n构建好的文件会输出到 .output 目录，支持部署到任何支持 Node.js 的托管服务。📄 许可证MIT 许可证 html pre.shiki code .sHwdD, html code.shiki .sHwdD{--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-default:#546E7A;--shiki-default-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic}html pre.shiki code .sBMFI, html code.shiki .sBMFI{--shiki-light:#E2931D;--shiki-default:#FFCB6B;--shiki-dark:#FFCB6B}html pre.shiki code .sfazB, html code.shiki .sfazB{--shiki-light:#91B859;--shiki-default:#C3E88D;--shiki-dark:#C3E88D}html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"id":3579,"title":3580,"titles":3581,"content":3582,"level":310},"/templates/docus-i18n","Docus I18n",[],"使用 Markdown 和 Nuxt I18n 编写漂亮的国际化文档 uesssh 一个漂亮的国际化入门模板，使用 Docus 创建多语言文档这是一个 i18n Docus 入门模板，提供了构建漂亮多语言文档站点所需的一切，支持 Markdown 和 Vue 组件。✨ 特性🌍 国际化 - 原生 i18n 支持多语言文档🎨 精美设计 - 简洁现代的文档主题📱 响应式 - 移动优先响应设计🌙 暗色模式 - 内建暗/亮模式支持🔍 搜索 - 每种语言的全文搜索功能📝 增强 Markdown - 扩展的 Markdown 支持自定义组件🎨 可定制 - 轻松主题和品牌定制⚡ 快速 - 针对 Nuxt 4 优化性能🔧 TypeScript - 完整的 TypeScript 支持🚀 快速开始# 安装依赖\nnpm install\n\n# 启动开发服务器\nnpm run dev\n您的多语言文档站点将在 http://localhost:3000 运行🌍 语言此入门模板预配置了：🇺🇸 英语 (en) - 默认语言🇫🇷 法语 (fr) - 法语翻译📁 项目结构my-docs/\n├── content/              # 你的 Markdown 内容\n│   ├── en/              # 英文内容\n│   │   ├── index.md     # 英文首页\n│   │   └── docs/        # 英文文档\n│   └── fr/              # 法语内容\n│       ├── index.md     # 法语首页\n│       └── docs/        # 法语文档\n├── public/              # 静态资源\n├── nuxt.config.ts       # 配置了 i18n 的 Nuxt 配置\n└── package.json         # 依赖和脚本\n内容结构内容按语言组织，方便管理翻译：content/\n├── en/                   # 英文内容\n│   ├── index.md\n│   ├── 1.getting-started/\n│   │   ├── installation.md\n│   │   └── configuration.md\n│   └── 2.essentials/\n│       ├── markdown.md\n│       └── components.md\n└── fr/                   # 法语内容\n    ├── index.md\n    ├── 1.getting-started/\n    │   ├── installation.md\n    │   └── configuration.md\n    └── 2.essentials/\n        ├── markdown.md\n        └── components.md\n🔗 URL 结构i18n 入门模板生成带语言前缀的 URL：英语: /en/getting-started/installation法语: /fr/getting-started/installation默认语言回退: /getting-started/installation （重定向至英语）⚡ 构建工具此模板预配置了：Nuxt 4 - Web 框架Nuxt Content - 基于文件的 CMSNuxt i18n - 国际化支持Nuxt UI Pro - 高级 UI 组件Nuxt Image - 优化图片组件Tailwind CSS 4 - 实用优先 CSS 框架Docus Layer - 文档主题📖 文档有关如何自定义你的 Docus 项目的详细说明，请访问 Docus 文档🚀 部署生产构建：npm run build\n构建好的文件将位于 .output 目录，可部署至任何支持 Node.js 的主机。📄 许可MIT 许可证 html pre.shiki code .sHwdD, html code.shiki .sHwdD{--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-default:#546E7A;--shiki-default-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic}html pre.shiki code .sBMFI, html code.shiki .sBMFI{--shiki-light:#E2931D;--shiki-default:#FFCB6B;--shiki-dark:#FFCB6B}html pre.shiki code .sfazB, html code.shiki .sfazB{--shiki-light:#91B859;--shiki-default:#C3E88D;--shiki-dark:#C3E88D}html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"id":3584,"title":3585,"titles":3586,"content":3587,"level":310},"/templates/landing","登陆页",[],"一个简单的模板，可用作您下一个创意的起点。 Nuxt UI Pro 是一套高级组件集合，是 Nuxt UI 的扩展，旨在帮助您在几分钟内创建吸引人且响应迅速的 Nuxt 应用程序。Nuxt UI 团队致力于提供最佳集成和定制体验，而 Studio 团队则提供与 Nuxt Studio 的完全兼容性。完全可定制：您可以通过应用配置更改 UI 样式，或通过 index.yml 文件编辑您的登陆页内容。美观的排版样式：预配置了 Tailwind CSS 排版插件，并且样式与 Nuxt UI 组件和配色相匹配。响应式设计：Nuxt UI Pro 组件旨在构建您的内容，它们具有响应式设计，能够适应任何屏幕尺寸。",{"id":3589,"title":3590,"titles":3591,"content":3592,"level":310},"/templates/minimal-starter","极简入门",[],"极简起步，无限可能：打造你的理想！ 释放你的想象力，使用我们的极简入门：从一张白纸开始，打造你梦想中的应用。Nuxt Content 已全部配置完成。使用 Markdown 和 Vue 组件轻松组合页面，配合直观的 MDC 语法增强体验。",{"id":3594,"title":3595,"titles":3596,"content":3597,"level":310},"/templates/minted-directory","Minted 目录",[],"一个无需数据库的 SEO 优化目录入门套件。 Minted 目录是一个高度可定制的模板，旨在快速构建成功的目录网站。创建具有定制样式/品牌的目录网站使用 Markdown 管理列表SEO 优化通过标签实现搜索和分类博客页面",{"id":3599,"title":3600,"titles":3601,"content":3602,"level":310},"/templates/portfolio","作品集",[],"一个时尚现代的作品集模板，用于展示你的作品、技能、博客文章、演讲活动，并提供联系信息。 Nuxt UI Pro 是一套高级组件集合，是 Nuxt UI 的扩展，旨在帮助你在几分钟内创建吸引人且响应式的 Nuxt 应用程序。Nuxt UI 团队致力于提供最佳的集成和定制体验，而 Studio 团队则提供与 Nuxt Studio 的完全兼容性。完全可定制：可以通过你的应用配置更改任何组件的样式，或通过 ui 属性专门定制它们。轻松编写 Markdown：Nuxt UI Pro 覆盖了 Nuxt Content 的 prose 组件，使其更加出色，还新增了 Callout、CodeGroup、Field 等组件。优美的排版样式：预配置了 Tailwind CSS 排版插件，并根据 Nuxt UI 组件和颜色进行了样式调整。开箱即用的全文搜索：Nuxt UI Pro 配备了即用的命令面板组件，无需再配置 Algolia DocSearch。组件支持插槽：每个组件都利用了 Vue 插槽的强大功能，给予你构建任何内容的灵活性。响应式设计：Nuxt UI Pro 组件旨在结构化你的内容，默认响应式，能适配任何屏幕尺寸。",{"id":3604,"title":3605,"titles":3606,"content":3607,"level":310},"/templates/saas","Saas",[],"一个完全构建好的 SaaS 应用，用于启动您的下一个项目。 Nuxt UI Pro 是一套高级组件集，是 Nuxt UI 的扩展，旨在帮助您用几分钟时间创建吸引人且响应迅速的 Nuxt 应用。Nuxt UI 团队致力于提供最佳的集成和定制体验，而 Studio 团队则确保与 Nuxt Studio 的完全兼容。完全可定制：可通过您的应用配置更改任何组件的样式，也可以通过 ui 属性专门定制它们。轻松编写 Markdown：Nuxt UI Pro 重写了 Nuxt Content 的 prose 组件，使其更加出色，还新增了 Callout、CodeGroup、Field 等组件。精美的排版样式：预配置了 Tailwind CSS 排版插件，样式与 Nuxt UI 组件及颜色相匹配。开箱即用的全文搜索：Nuxt UI Pro 内置了可直接使用的命令面板组件，无需再设置 Algolia DocSearch。全面的插槽支持：每个组件均利用 Vue 的插槽功能，为您提供构建任何内容的灵活性。响应式设计：Nuxt UI Pro 组件旨在构建您的内容结构，响应式设计可适应任何屏幕尺寸。",1757738955677]