import{e as a,r,n as e,x as s,w as t}from"../../../../nitro/nitro.mjs";import{r as o}from"../../../../_/auth.mjs";import{o as i,e as m,i as p,s as n,a as c,b as u,d}from"../../../../_/types.mjs";import"node:buffer";import"node:events";import"node:process";import"node:timers";import"node:async_hooks";import"cloudflare:workers";import"node:path";const f=i({query:n().min(1).max(1e6).trim(),params:d().array().default([])}),l=a(async a=>{await o(a),r("database");const{command:d}=await e(a,i({command:m(["first","all","raw","run","exec","batch"])}).parse),l=s();if("exec"===d){const{query:r}=await t(a,f.pick({query:!0}).parse);return l.exec(r)}if("first"===d){const{query:r,params:e,colName:s}=await t(a,p(f,i({colName:n().optional()})).parse);return s?l.prepare(r).bind(...e).first(s):l.prepare(r).bind(...e).first()}if("batch"===d){const r=await t(a,c(f).parse);return l.batch(r.map(a=>l.prepare(a.query).bind(...a.params)))}if("raw"===d){const{query:r,params:e,columnNames:s}=await t(a,p(f,i({columnNames:u().default(!1)})).parse);return l.prepare(r).bind(...e).raw({columnNames:s})}const{query:w,params:b}=await t(a,f.parse);return l.prepare(w).bind(...b)[d]()});export{l as default};
//# sourceMappingURL=_command_.post.mjs.map
